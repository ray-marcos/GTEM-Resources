
!-----------------------------------------------------------------------!
! Tablo code of the GTEM-FOOD model (Duy prepares - August 2020) !
!-----------------------------------------------------------------------!

! For model documentation, please refer to !

! Y. Cai, D. Newth, J. Finnigan, D. Gunasekera (2015),
"A Hybrid Energy-Economy Model for Global Integrated Assessment of
Climate Change, Carbon Mitigation and Energy Transformation",
Applied Energy. !

! For the original GTEM model, please refer to !

! Pant H. (2007), GTEM: Global Trade and Environment Model.
ABARE Technical Report. Canberra:
Australian Bureau of Agricultural and Resource Economics and Sciences.!


!********************************************************************!
! FILES                                                              !
!********************************************************************!

FILE SETS_file # file with SET specification #;

FILE SAM_file # file with economchic and energy data #;

FILE PARAM_file # file with parameters #;

FILE EMIS_file # file with emissions #;

FILE CLIMATE_file # file with climate damage function parameters #;


!***********************************************************************!
! SETS                                                                  !
!***********************************************************************!

! Regions !

SET REG # regions in the model #
MAXIMUM SIZE 30 READ ELEMENTS FROM FILE SETS_file HEADER "H1";

SET SRC # sources of supply #
    (dom,imp);

! commodities !

SET TRAD_COMM # traded commodities #
MAXIMUM SIZE 37 READ ELEMENTS FROM FILE SETS_file HEADER "H2";

SET NSAV_COMM # non-savings commodities #
MAXIMUM SIZE 40 READ ELEMENTS FROM FILE SETS_file HEADER "H3";

SET DEMD_COMM # demanded commodities #
MAXIMUM SIZE 39 READ ELEMENTS FROM FILE SETS_file HEADER "H4";

SUBSET DEMD_COMM IS SUBSET OF NSAV_COMM ;

SUBSET TRAD_COMM IS SUBSET OF DEMD_COMM ;

SET PROD_COMM # produced commodities #
MAXIMUM SIZE 37 READ ELEMENTS FROM FILE SETS_file HEADER "H5";

SUBSET PROD_COMM IS SUBSET OF NSAV_COMM;

SUBSET TRAD_COMM IS SUBSET OF PROD_COMM;

SET MARG_COMM # margin commodities #
maximum size 10 read elements from file SETS_file header "MARG";

SUBSET MARG_COMM IS SUBSET OF TRAD_COMM;

SET  NMARG_COMM # non-margin commodities #
    = TRAD_COMM - MARG_COMM;

SET CGDS_COMM # capital goods commodities #
MAXIMUM SIZE 2 READ ELEMENTS FROM FILE SETS_file HEADER "H9";

SUBSET CGDS_COMM IS SUBSET OF PROD_COMM ;

! Endowments !

SET ENDW_COMM # endowment commodities #
MAXIMUM SIZE 9 READ ELEMENTS FROM FILE SETS_file HEADER "H6";

SUBSET ENDW_COMM IS SUBSET OF DEMD_COMM;

SET ENDWM_COMM # mobile endowment commodities #
MAXIMUM SIZE 4 READ ELEMENTS FROM FILE SETS_file HEADER "H8";

SUBSET ENDWM_COMM IS SUBSET OF ENDW_COMM;

SET ENDWS_COMM # sluggish endowment commodities #
    = ENDW_COMM - ENDWM_COMM;

SET ENDWC_COMM # capital endowment commodity #
MAXIMUM SIZE 3 READ ELEMENTS FROM FILE SETS_file HEADER "H7CP";

SUBSET ENDWC_COMM IS SUBSET OF ENDWM_COMM;

SET ENDWL_COMM # labour endowment commodity #
MAXIMUM SIZE 3 READ ELEMENTS FROM FILE SETS_file HEADER "H7LB";

SUBSET ENDWL_COMM IS SUBSET OF ENDWM_COMM;

! Technology bundle industries and technologies !

SET TECH_IND # technology-bundle-industries #
(ELY, I_S, OTP, Meat_cattle, Fishery);                      !Duy added (new), declare the set components directly!
!READ ELEMENTS FROM FILE SETS_file HEADER "H11";!           !Duy deleted (new), no longer read it from the har file!

SUBSET TECH_IND IS SUBSET OF TRAD_COMM;
SUBSET TECH_IND IS SUBSET OF PROD_COMM;

SET NTECH_IND # non-technology-bundle-industries #
    = PROD_COMM - TECH_IND;

SET FUEL # all energy commodities, including all primary fuels and electricity #
MAXIMUM SIZE 10 READ ELEMENTS FROM FILE SETS_file HEADER "FUEL";

SUBSET FUEL IS SUBSET OF TRAD_COMM;

SET ELY # electricity sector - ELY #
    (ELY);

SUBSET ELY IS SUBSET OF TECH_IND;
SUBSET ELY IS SUBSET OF PROD_COMM;
SUBSET ELY IS SUBSET OF TRAD_COMM;
SUBSET ELY IS SUBSET OF FUEL;

SET NELY = TECH_IND - ELY;

SET NF_TRAD_COMM # non-energy traded commodities #
    = TRAD_COMM - FUEL;

SET ENER_COMM # a single CRESH composite of fuel commodities - energy #
    (ENER);

SET ANIM_COMM # a single composite of animal sourced food commodities #
    (ANIM_C);                                                                                !Duy added, new!
SET STAPLE_COMM # a single composite of staple commodities #
    (STAPLE_C);                                                                              !Duy added, new!
SET CROP_COMM # a single composite of other crop commodities #
    (CROP_C);                                                                                !Duy added, new!
SET PROC_COMM # a single composite of processed food commodities #
    (PROC_C);                                                                                !Duy added, new!

!SET COMP_COMM # non-fuel commodities and the single energy composite #
    = ENER_COMM + NF_TRAD_COMM;!                                                             !Duy deleted, COMP_COMM needs to be modified (below)!

SET ANIM_FOOD # animal sourced food commodities #
    (dairy_milk, raw_milk, meat_cattle, meat_pork, meat_poultry, fishery);                   !Duy added, new!

SET STAPLE # staple commodities #
    (rice, wheat, Oth_grains);                                                               !Duy added, new!

SET CROP # Other crop commodities #
    (Veg_fruit, cane_beet, fibres_crops, oth_crops);                                         !Duy added, new!

SET PROC_FOOD # processed food commodities #
    (sugar, oil_seeds, veg_oils, proc_rice, beve_tobacco, oth_foods);                        !Duy added, new!

SUBSET ANIM_FOOD IS SUBSET OF TRAD_COMM;                                                      !Duy added, new!
SUBSET STAPLE IS SUBSET OF TRAD_COMM;                                                        !Duy added, new!
SUBSET CROP IS SUBSET OF TRAD_COMM;                                                          !Duy added, new!
SUBSET PROC_FOOD IS SUBSET OF TRAD_COMM;                                                     !Duy added, new!

SET NF_TRAD_COM2 # non-energy and non-agri-food traded commodities #
    = NF_TRAD_COMM - ANIM_FOOD - STAPLE - CROP - PROC_FOOD;                                  !Duy added, new!

SET COMP_COMM # the agri-food composites, the single energy composite and other commodities #
    = ENER_COMM + ANIM_COMM + STAPLE_COMM + CROP_COMM + PROC_COMM+ NF_TRAD_COM2;             !Duy added, new!

SET GAS_D (gas,gdt);

SET GAS = GAS_D INTERSECT FUEL;

SUBSET GAS IS SUBSET OF PROD_COMM;
SUBSET GAS IS SUBSET OF DEMD_COMM;
SUBSET GAS IS SUBSET OF TRAD_COMM;

! power sector !

SET TECH # all power technologies including CCS #
read elements from file SETS_file header "TECH";

! power technology map, unit for each tech is Terawatt-Hours

DTRAD_COMM is the set of commodities in the disaggregated GTAP database
underlying the GTEM database.

Label in GTEM model	Element label in DTRAD_COMM	Description
~~~~~~~~~~~~~~~~~~~	~~~~~~~~~~~~~~~~~~~~~~~~~~~	~~~~~~~~~~~
t1	                ElCoal	                    Coal
t2	                ElOil	                    Oil
t3	                ElGas	                    Gas
t4	                Nuclear	                    Nuclear
t5	                Hydro	                    Hydro
t6	                Wind	                    Wind
t7	                Solar	                    Solar
t8	                BioGas	                    Biogas
t9	                BioE_other	                Other Bioenergy
t10	                Waste	                    Waste & other combustibles
t11	                GeoWaveOthRe	            Geothermal, Wave, and other renewables
t12	                CoalCCS	                    Coal + CCS
t13	                OilCCS	                    Oil + CCS
t14	                GasCCS	                    Gas + CCS
t15	                BECCS	                    Bioenergy + CCS
!

! The implementation here continues to assume that conventional coal, oil & gas
  technologies are t1, t2 & t3, respectively. However, set definitions/mappings
  have been altered to accommodate the changing position of CCS variants of
  coal, oil & gas in the list of technologies. KJH 20191216 !

SET COL_ELY # coal power technologies, conventional and CCS #
read elements from file Sets_file header "CELY";

SUBSET COL_ELY IS SUBSET OF TECH;

SET OIL_ELY # oil power technologies, conventional and CCS #
read elements from file Sets_file header "OELY";

SUBSET OIL_ELY IS SUBSET OF TECH;

SET GAS_ELY # gas power technologies, conventional and CCS #
read elements from file Sets_file header "GELY";

SUBSET GAS_ELY IS SUBSET OF TECH;

SET CCS_ELY # CCS power technologies #
read elements from file Sets_file header "CCS";

SUBSET CCS_ELY IS SUBSET OF TECH;

SET REN_ELY # renewable electricity technologies #
read elements from file SETS_file header "RELY";

SUBSET REN_ELY IS SUBSET OF TECH;

SET NREN_ELY = TECH - REN_ELY;

SET MULTIPLE_ELY # power technologies with their CCS variants #
    = COL_ELY + OIL_ELY + GAS_ELY;
SUBSET CCS_ELY IS SUBSET OF MULTIPLE_ELY;
SUBSET MULTIPLE_ELY IS SUBSET OF TECH;
SET CONV_ELY # conventional technologies # = MULTIPLE_ELY - CCS_ELY;

SET SINGLE_ELY # power technologies that do not have CCS variant #
    = TECH - MULTIPLE_ELY;

SET BRANCH_ELY # power technology categories contain a CCS variant #
    !previously (t1_11, t2_12, t3_13)! (tCoal, tOil, tGas);

SET STEM_ELY # power technologies, combo #
    !previously (t1_11, t2_12, t3_13, t4-t10)! = BRANCH_ELY + SINGLE_ELY;

Mapping BRANCH_MAP from MULTIPLE_ELY to BRANCH_ELY;
Formula (all,t,COL_ELY) BRANCH_MAP(t) = "tCoal";
Formula (all,t,OIL_ELY) BRANCH_MAP(t) = "tOil";
Formula (all,t,GAS_ELY) BRANCH_MAP(t) = "tGas";

! Now define mapping from each conventional technology to its CCS alternative.
  This mapping can assist with the removal of hard-wired technology elements
  for CCS technologies.
  Assumption: There is a one-to-one mapping between CCS technologies and their
              corresponding conventional technologies. KJH 20191218 !
Mapping CONV_TO_CCS from CONV_ELY to CCS_ELY;
Mapping CONVTOCCSCHK from CONV_ELY to CCS_ELY;
Formula (all,t,CONV_ELY)
CONV_TO_CCS(t) = MaxS{i,CCS_ELY:BRANCH_MAP(t)=BRANCH_MAP(i), $Pos(i)};
Formula (all,t,CONV_ELY)
CONVTOCCSCHK(t) = MinS{i,CCS_ELY:BRANCH_MAP(t)=BRANCH_MAP(i), $Pos(i)};
Assertion # only one CCS tech corresponding to each conventional tech #
sum{t,CONV_ELY:CONV_TO_CCS(t)=CONVTOCCSCHK(t),1} = sum{t,CONV_ELY,1};

Mapping CCS_TO_CONV from CCS_ELY to CONV_ELY;
Mapping CCSTOCONVCHK from CCS_ELY to CONV_ELY;
Formula (all,t,CCS_ELY)
CCS_TO_CONV(t) = MaxS{i,CONV_ELY:BRANCH_MAP(t)=BRANCH_MAP(i), $Pos(i)};
Formula (all,t,CCS_ELY)
CCSTOCONVCHK(t) = MinS{i,CONV_ELY:BRANCH_MAP(t)=BRANCH_MAP(i), $Pos(i)};
Assertion # only one conventional tech corresponding to each CCS tech #
sum{t,CCS_ELY:CCS_TO_CONV(t)=CCSTOCONVCHK(t),1} = sum{t,CCS_ELY,1};

! Not used at present. KJH 20191216
SET NH_ELY
    (t4-t5);

SUBSET NH_ELY IS SUBSET OF TECH;

SET NNH_ELY = TECH - NH_ELY;

SET F_FACTOR
    (natres);

SUBSET F_FACTOR IS SUBSET OF ENDW_COMM;
SUBSET F_FACTOR IS SUBSET OF ENDWS_COMM;
SET NF_ENDW = ENDW_COMM - F_FACTOR;
SET NF_ENDWS = ENDWS_COMM - F_FACTOR;!

! Energy and emission commodities !

SET FOSSIL (col, gas, oil, p_c);

SUBSET FOSSIL IS SUBSET OF PROD_COMM;
SUBSET FOSSIL IS SUBSET OF TRAD_COMM;

SET ENERGY = FOSSIL + ELY;

SUBSET ENERGY IS SUBSET OF PROD_COMM;
SUBSET ENERGY IS SUBSET OF TRAD_COMM;

SET NGS(gas);

SUBSET NGS IS SUBSET OF ENERGY;

SET NNGS = ENERGY - NGS;

SET ENERGY_COMM = ENERGY UNION GAS;

SUBSET ENERGY_COMM IS SUBSET OF PROD_COMM;
SUBSET ENERGY_COMM IS SUBSET OF TRAD_COMM;

SET NonEner = TRAD_COMM - ENERGY_COMM;

SET CleanFuel
    (nuclear, renewables);

SET PriEner = ENERGY + CleanFuel;

SET FINAL_USER (private, public);

SET USE = PROD_COMM + FINAL_USER;

SET DIRTY_IND # Industries producing non-combustion emissions #
    READ ELEMENTS FROM FILE SETS_file HEADER "DIND";

SUBSET DIRTY_IND is subset of PROD_COMM;

SET CLEAN_IND = PROD_COMM - DIRTY_IND;

! Emissions !

SET GHG # all types of EMISSIONS that can be measured #
MAXIMUM SIZE 12 READ ELEMENTS FROM FILE SETS_file HEADER "H13E";

SET LGWP_GHG  # low global warming potential gases, i.e., CO2, N2O, CH4 #
MAXIMUM SIZE 10 READ ELEMENTS FROM FILE SETS_file HEADER "H13L";

SUBSET LGWP_GHG IS SUBSET OF GHG;

SET CO2 # CO2 gas #
    (co2);

SUBSET CO2 IS SUBSET OF GHG;

SUBSET CO2 IS SUBSET OF LGWP_GHG;

SET GHG_NCO2 # green house gases, excluding CO2 #
    = GHG - CO2;

SET BLOCK # trading block of carbon emissions #
    (b1);

SET END_OUTLET
    (private,public,lucf);

SET EMIS_OUTLET
    = PROD_COMM UNION END_OUTLET;

SET LUCF
    (LUCF);

SUBSET LUCF IS SUBSET OF EMIS_OUTLET;

SET NLUCF_OUTLET
    = EMIS_OUTLET - LUCF;

SUBSET PROD_COMM IS SUBSET OF NLUCF_OUTLET;

SET PROCESS
    (process);

SET INPUT_SOURCE
    = ENDW_COMM + TRAD_COMM;

SET EMIS_SOURCE
    = INPUT_SOURCE + PROCESS;

! negative emission technologies !

SET NEMT # set of negative emission technologies #
READ ELEMENTS FROM FILE SETS_file HEADER "NEMT";


!***********************************************************************!
! VARIABLES                                                             !
!***********************************************************************!

!-----------------------------------------------------------------------!
! 1 Microeconomic variables                                             !
!-----------------------------------------------------------------------!

!-----------------------------------------------------------------------!
! 1.1  Microeconomic variables: quantities                              !
!-----------------------------------------------------------------------!

VARIABLE (all,i,NSAV_COMM) (all,r,REG)
    qo(i,r)
# output of each commodity or supply of each primary factor #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    qva(j,r)
# quantity of factor-composite demanded by industry #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    qfuel(j,r)
# quantity of fuel-composite demanded by industry #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    qvaf(j,r)
# quantity of factor-value-composite demanded by industry #;

VARIABLE (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    qf(i,j,r)
# quantity of each input demanded by industry #;

VARIABLE (all,i,DEMD_COMM)(all,r,REG)
    demd_shift(i,r)
# shift of quantity of each input demanded by industry #;

VARIABLE (all,r,REG)
    adj_fuel_p(r)
# adjustment to ensure inter-fuel demand shift doesn't change total #;

VARIABLE (all,r,REG)
    adj_on_p(r)
# adjustment to ensure inter-fuel demand shift doesn't change total #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    adj_fuel_f(j,r)
# adjustment to ensure inter-fuel demand shift doesn't change total #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    adj_on_f(j,r)
# adjustment to ensure inter-fuel demand shift doesn't change total #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    qfd(i,j,r)
# quantity of each domestic commodity demanded by industry #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    qfm(i,j,r)
# quantity of each imported commodity demanded by industry #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qg(i,r)
# quantity of each commodity demanded for public consumption #;

Variable (all,r,REG)
    ug(r) # per capita utility from gov't expend., in region r #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qgd(i,r)
# quantity of each domestic commodity for public consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qgm(i,r)
# quantity of each imported commodity for public consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qp(i,r)
# quantity of each commodity for private consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qpd(i,r)
# quantity of each domestic commodity for private consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qpm(i,r)
# quantity of each imported commodity for private consumption #;

Variable (all,i,FUEL)(all,r,REG)
    fuel_economy(i,r)
# fuel efficiency, in private consumption #;

Variable (all,i,ANIM_FOOD)(all,r,REG)
    anim_economy(i,r)
# animal sourced food technical shifter, in private consumption #;                      !Duy added, new!

Variable (all,i,STAPLE)(all,r,REG)
    stap_economy(i,r)
# staple technical shifter, in private consumption #;                                   !Duy added, new!

Variable (all,i,CROP)(all,r,REG)
    crop_economy(i,r)
# crop technical shifter, in private consumption #;                                     !Duy added, new!

Variable (all,i,PROC_FOOD)(all,r,REG)
    proc_economy(i,r)
# processed food technical shifter, in private consumption #;                           !Duy added, new!

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qds(i,r)
# % change of total domestic use of each domestic commodity #;

!----------- quantities for technologies--------------!

VARIABLE (all,i,STEM_ELY)(all,j,ELY)(all,r,REG)
    qtech_stem(i,j,r)
# industry demand for each stem technology #;

VARIABLE (all,i,TECH)(all,j,TECH_IND)(all,r,REG)
    qtech(i,j,r)
# industry demand for each technology #;

VARIABLE (all,j,ELY)(all,r,REG)
    adj_qtech(j,r)
# adjustment factor for qtech #;

VARIABLE (all,i,TECH)(all,j,TECH_IND)(all,r,REG)
    f_qtech(i,j,r);

VARIABLE (all,i,TECH)(all,j,TECH_IND)(all,r,REG)
    d_qtech(i,j,r);

VARIABLE (all,i,DEMD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    qft(i,k,j,r)
# demand for each commodity in each technology #;

VARIABLE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    qftd(i,k,j,r)
#quantity of domestic inputs to technologies#;

VARIABLE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    qftm(i,k,j,r) #quantity imported inputs to technologies#;

!-----------------------------------------------------------------------!
! 1.2  Microeconomic variables: prices                                  !
!-----------------------------------------------------------------------!

VARIABLE (all,i,NSAV_COMM)(all,r,REG)
    pm(i,r)
# price received by supplier plus output taxes #;

VARIABLE (all,i,NSAV_COMM)(all,r,REG)
    ps(i,r)
# price received by suppliers of each commodity or primary factors #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    pva(j,r)
# price of factor-composite in each industry #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    pfuel(j,r)
# price of fuel-composite in each industry #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    pfuel_star(j,r)
# star-price of fuel-composite in each industry as per CRESH function #;

VARIABLE (all,j,NTECH_IND)(all,r,REG)
    pvaf(j,r)
# price of factor-fuel-composite in each industry #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    pf(i,j,r)
# price paid by industry for each input #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    pfd(i,j,r)
# price paid by industry for each domestic commodity #;

VARIABLE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    pfe(i,j,r)
# price paid by industry for each primary factor #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    pfm(i,j,r)
# price paid by industry for each imported commodity #;

VARIABLE (all,i,ENDWS_COMM)(all,j,PROD_COMM)(all,r,REG)
    pmes(i,j,r)
# market price of sluggish factors: land and resources #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    pg(i,r)
# price paid for each commodity for public consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    pgd(i,r)
# price paid for each domestic commodity for public consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    pgm(i,r)
# price paid for each imported commodity for public consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    pp(i,r)
# price paid for each commodity for private consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    ppd(i,r)
# price paid for each domestic commodity for private consumption #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    ppm(i,r)
# price paid for each imported commodity for private consumption #;

!----------- prices for technologies--------------!

VARIABLE (all,j,TECH_IND)(all,r,REG)
    ptb(j,r)
# price paid by industry for the technology bundle #;

VARIABLE (all,t,STEM_ELY)(all,j,ELY)(all,r,REG)
    ptech_stem(t,j,r)
# price paid by industry for each technology #;

VARIABLE (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    ptech(t,j,r)
# price paid by industry for each technology #;

VARIABLE (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pftv(t,j,r)
# aggregate price for factor inputs into each technology #;

VARIABLE (all,i,DEMD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pft(i,t,j,r)
# agent's price for inputs into each technology #;

VARIABLE (all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pftd(i,t,j,r)
# user price of domestic inputs to technologies #;

VARIABLE (all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pftm(i,t,j,r)
# user price of imported inputs to technologies #;

!-----------------------------------------------------------------------!
! 1.3 Microeconomic variables: factor markets                           !
!-----------------------------------------------------------------------!

VARIABLE (all,r,REG)
    pop(r)
# total population #;

VARIABLE (all,r,REG)
    f_pop(r)
# exog. pop growth rate in percentage change form #;

VARIABLE (all,i,ENDWL_COMM)(all,r,REG)
    lab_sup(i,r)
# potential labour supply #;

VARIABLE (all,i,ENDWL_COMM)(all,r,REG)
    f_lab_sup(i,r)
# exog. lab supply growth rate in percentage change form #;

VARIABLE (all,i,ENDWL_COMM)(all,r,REG)
    empl_factor(i,r)
# employment rate #;

VARIABLE (all,r,REG)
    wage_r(r)
# real wage #;

VARIABLE (all,r,REG)
    wage_n(r)
# nominal wage #;

!-----------------------------------------------------------------------!
! 2 International trade variables                                       !
!-----------------------------------------------------------------------!

!-----------------------------------------------------------------------!
! 2.1 International trade variables: quantities                         !
!-----------------------------------------------------------------------!

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    qxs(i,r,s)
# quantity of exports of each commodity by destination #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    f_qxs(i,r,s)
# shift on the quantity of exports of each commodity by destination #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    f_qx(i,r)
# Shift on demand for exports from each source region #;

VARIABLE
    f_qx1;

VARIABLE
    f_qx2;

!VARIABLE
    us_lng;!

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    adj_qxs(i,s);

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    adj_on(i,s);

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    qimp(i,s)
# total quantity of imports of each commodity of regions s#;

![[! Removed. Not used. KJH 20191213
VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    eimp(i,s)
# total quantity of imports of each commodity-embedded energy of regions s#;
!]]!

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    f_qimp(i,r)
# shift on the quantity of i that region r imports #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qiw(i,r)
# volume of cif merchandise imports, by region and commodity #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qx(i,r)
# total quantity of exports of each commodity #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    qex(i,r)
# aggregate exports of i from region r #;

VARIABLE (all,r,REG)
    imports(r)
# real imports #;

VARIABLE (all,r,REG)
    exports(r)
# real exports #;

VARIABLE (all,m,MARG_COMM)(all,r,REG)
    qst(m,r)
# quantity of international freight and insurance services #;

VARIABLE (all,m,MARG_COMM)
    qt(m)
# global quantity of international freight and insurance services #;

VARIABLE (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    qtmfsd(m,i,r,s)
# int'l margin usage, by margin, freight, source, and destination #;

![[! Removed. Not used. KJH 20191213
VARIABLE (all, i, TRAD_COMM)(all, j, USE)(all, s, REG)(all, n, REG)
    qgio(i, j, s, n);

VARIABLE (all, i, TRAD_COMM)(all, j, USE)(all, s, REG)(all, n, REG)
    eio(i, j, s, n);

VARIABLE
(all, i, TRAD_COMM)(all, j, USE)(all, s, REG)(all, n, REG)(all, e, GHG)
    ghgio(i, j, s, n, e);
!]]!
!-----------------------------------------------------------------------!
! 2.2 International trade variables: prices                             !
!-----------------------------------------------------------------------!

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    pfob(i,r,s)
# fob export price of each commodity by destination #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    pcif(i,r,s)
# cif import price of each commodity by source #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    pms(i,r,s)
# tariff inclusive price of each sourced imported commodity #;

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    pimp(i,s)
# tariff inclusive price of imports of each commodity #;

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    pimp_star(i,s)
# star price of imports of each commodity, as per CRESH function #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    px(i,r)
# fob export price of each commodity #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    pex(i,r)
# aggregate exports price index of i from region r #;

VARIABLE (all,m,MARG_COMM)
    pt(m)
# price of international freight and insurance services type m #;

VARIABLE (all,r,REG)
    mpi(r)
# import price index #;

VARIABLE (all,r,REG)
    xpi(r)
# export price index #;

!-----------------------------------------------------------------------!
! 3 Macroeconomic variables                                             !
!-----------------------------------------------------------------------!

!-----------------------------------------------------------------------!
! 3.1 Macroeconomic variables: output                                   !
!-----------------------------------------------------------------------!

VARIABLE (all,r,REG)
    gdp_n(r)
# nominal GDP #;

VARIABLE (all,r,REG)
    gdp_r(r)
# real GDP #;

VARIABLE (all,r,REG)
    gnp_n(r)
# nominal GNP #;

VARIABLE (all,r,REG)
    gnp_r(r)
# real GNP #;

VARIABLE (all,i,TRAD_COMM)
    qworld(i)
# world output of each commodity #;

VARIABLE (all,r,REG)
    yfull(r)
# gross nominal income #;

VARIABLE (change) (all,r,REG)
    c_tottaxrev(r)
# change in total tax revenue collected in region r #;

!-----------------------------------------------------------------------!
! 3.2 Macroeconomic variables: price indices                            !
!-----------------------------------------------------------------------!

VARIABLE (all,r,REG)
    cpi(r)
# consumer price index based on cost shares #;

VARIABLE (all,r,REG)
    f_cpi(r)
# shift to set cpi-bundle as regional numeraire #;

VARIABLE (all,r,REG)
    pgov(r)
# public consumption price index #;

VARIABLE (all,r,REG)
    reg_num(r)
# percentage change in the price of regional numeraires #;

VARIABLE (all,r,REG)
    pgdp(r)
# GDP price index #;

VARIABLE (all,r,REG)
    f_pgdp(r)
# shift to set gdp-bundle as regional numeraire #;

!----------------------------------------------------!
! 3.3 Macroeconomic variables: consumption           !
!---------------------------------------------------!

VARIABLE (all,i,COMP_COMM)(all,r,REG)
    qpa(i,r)
# percentage change in demand for composite consumer commodities#;

VARIABLE (all,i,COMP_COMM)(all,r,REG)
    ppa(i,r)
# percentage change in price of composite consumer commodities#;

VARIABLE (all,i,ENER_COMM)(all,r,REG)
    ppa_star(i,r)
# percentage change in consumer's price for energy composite #;

VARIABLE (all,i,ANIM_COMM)(all,r,REG)
    ppa_star1(i,r)
# percentage change in consumer's price for animal sourced food composite #;            !Duy added, new!

VARIABLE (all,i,STAPLE_COMM)(all,r,REG)
    ppa_star2(i,r)
# percentage change in consumer's price for staple composite #;                         !Duy added, new!

VARIABLE (all,i,CROP_COMM)(all,r,REG)
    ppa_star3(i,r)
# percentage change in consumer's price for other crop composite #;                     !Duy added, new!

VARIABLE (all,i,PROC_COMM)(all,r,REG)
    ppa_star4(i,r)
# percentage change in consumer's price for processed food composite #;                 !Duy added, new!

VARIABLE (all,r,REG)
    yp(r)
# nominal private consumption #;

VARIABLE (all,r,REG)
    yg(r)
# nominal public consumption #;

VARIABLE (all,r,REG)
    ys(r)
# nominal gross savings #;

VARIABLE (all,r,REG)
    qpcons(r)
# real household consumption #;

VARIABLE (all,r,REG)
    qgcons(r)
# real public consumption #;

VARIABLE (all,r,REG)
    uepriv(r)
    # elasticity of cost wrt utility from private consumption #;

VARIABLE (all,r,REG)
    uelas(r) # elasticity of cost of utility wrt utility #;

VARIABLE (all,r,REG)
    dppriv(r) # private consumption distribution parameter #;

VARIABLE (all,r,REG)
    dpgov(r) # government consumption distribution parameter #;

VARIABLE (all,r,REG)
    dpsave(r) # saving distribution parameter #;

!-----------------------------------------------------------------------!
! 3.4 Macroeconomic variables: investment and savings                   !
!-----------------------------------------------------------------------!

VARIABLE (all,r,REG)
    qk(r)
# percent change over base year caiptal stock data#;

VARIABLE (all,r,REG)
    f_kb(r)
# shift to capital accumulation equation #;

VARIABLE (all,r,REG)
    qcgds(r)
# real gross domestic investment #;

VARIABLE
    adj_qcgds
# global adjustment factor to regional investment for market clearing #;

VARIABLE (all,r,REG)
    f_qcgds(r)
# shift on real gross domestic investment #;

VARIABLE
    globalcgds
# real global gross investment #;

VARIABLE
    globalsave
# global supply of savings #;

VARIABLE (all,r,REG)
    pcgds(r)
# regional price index of capital goods #;

VARIABLE
    psavewld
# a price index for the aggregate global cgds composite #;

VARIABLE (levels,change,linear_name=c_debt) (all,r,REG)
    DEBT(r)
# net foreign debt #;

VARIABLE (all,r,REG)
    f_debt(r)
# shifter to debt #;

VARIABLE (levels,change,linear_name=c_fy) (all,r,REG)
    FY(r)
# change in foreign interest payments in local currency #;
! FY is always 0 (by construction) in the GTAP database. Therefore, its initial
  value in GTEM is zero. The equation for FY equates it with the global RoR
  times net foreign debt plus a balancing item of foreign income that decays to
  zero over time. !

VARIABLE (levels)(all,r,REG) FYBAL(r) # Foreign income balancing item #;

VARIABLE (all,r,REG)
    rental(r)
# change in price of capital input #;

VARIABLE (all,r,REG)
    rorc(r)
# change in actual gross rate of return on capital #;

VARIABLE
    rorg
# change in actual global average gross rate of return on capital #;

VARIABLE (all,r,REG)
    rorc_e(r)
# change in static expected gross rate of return on capital #;

VARIABLE
    rorg_e
# change in static expected global average rate of return on capital #;

!-----------------------------------------------------------------------!
! 3.5 Macroeconomic variables:  balance of payments                     !
!-----------------------------------------------------------------------!

VARIABLE (all,r,REG)
    tot(r)
# terms of trade: ratio of export to import price index #;

!-----------------------------------------------------------------------!
! 4  Policy variables                                                   !
!-----------------------------------------------------------------------!

!-----------------------------------------------------------------------!
! 4.1  Policy variables: taxes                                          !
!-----------------------------------------------------------------------!

VARIABLE (all,i,NSAV_COMM)(all,r,REG)
    to(i,r)
# power of all industry or primary factor taxes including carbon taxes #;

VARIABLE (change) (all,i,NSAV_COMM)(all,r,REG)
    c_to_(i,r)
# change in non-emission ptax levied on market value of industry output#;

VARIABLE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    tfe(i,j,r)
# power of all taxes on usage of endowment commodity by industry j r #;

VARIABLE (change) (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    c_tfe_(i,j,r)
# change of tfe #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    tfd(i,j,r)
# power of all taxes on industry usage of each domestic commodity i #;

VARIABLE (change) (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    c_tfd_(i,j,r)
# change of tfd #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    tfm(i,j,r)
# power of all taxes on industry usage of each imported commodity i#;

VARIABLE (change) (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    c_tfm_(i,j,r)
# change of tfm #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    tgd(i,r)
# power of all taxes on public consumption of domestic commodity i #;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)
    c_tgd_(i,r)
# change of tgd #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    tgm(i,r)
# power of all taxes on public consumption of imported commodity i #;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)
    c_tgm_(i,r)
# change of tgm #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    tpd(i,r)
# power of all taxes on private consumption of domestic commodity i #;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)
    c_tpd_(i,r)
# change of tpd #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    tpm(i,r)
# power of all taxes on private consumption of imported commodity i #;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)
    c_tpm_(i,r)
# change of tpm #;

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    tm(i,s)
# power of non-source specific tariff on imports of commodity i into s #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    tms(i,r,s)
# power of source specific tariff on imports of commodity i into r #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    tx(i,r)
# power of export tax on commodity i #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    txs(i,r,s)
# power of destination specific export tax on exports of commodity i #;

!----------- taxes on technologies--------------!

VARIABLE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    tfd_tech(i,k,j,r)
# taxes on domestic traded good inputs #;

VARIABLE (change) (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    c_tfd_tech_(i,k,j,r)
# change in non-emission tax on dom commodities by technologies #;

VARIABLE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    tfm_tech(i,k,j,r)
# taxes on imported traded technology good inputs #;

VARIABLE (change) (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    c_tfm_tech_(i,k,j,r)
# change in non-emission tax on imported commodities by tech #;

VARIABLE (change) (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    c_tfe_e(i,j,r,e)
# change in ad valorem emissions tax on domestic int. inputs #;

VARIABLE (change) (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    c_tfd_e(i,j,r,e)
# change in ad valorem emissions tax on domestic int. inputs #;

VARIABLE (change) (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    c_tfm_e(i,j,r,e)
# change in ad valorem emissions tax on imported int. inputs #;

VARIABLE (change)
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    c_tfd_tech_e(i,k,j,r,e)
# change in ad valorem emissions tax on domestic int. inputs to TBs #;

VARIABLE (change)
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    c_tfm_tech_e(i,k,j,r,e)
# change in ad valorem emissions tax on imported int. inputs to TBs #;

VARIABLE (change) (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    c_to_e(j,r,e)
# change in ad valorem emissions tax rates on domestic production #;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    c_tpd_e(i,r,e)
#change in ad valorem emissions tax on HH cons. of domestic goods#;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    c_tpm_e(i,r,e)
#change in ad valorem emissions tax on HH cons. of imported goods#;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    c_tgd_e(i,r,e)
#change in ad valorem emissions tax on public cons. of domestic goods#;

VARIABLE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    c_tgm_e(i,r,e)
# change in ad valorem emissions tax on public cons. of imported goods #;

VARIABLE (change)(all,e,GHG)
    gctax(e)
# global carbon price, by emissions #;

VARIABLE (change)(all,e,GHG)
    hot_gctax(e)
# turn on Hotelling global carbon price #;

VARIABLE (change)
    gctax_co2e
# change in global carbon price, in CO2-e #;

VARIABLE (change) (all,e,GHG)
    f_gctax(e)
# shift to global carbon price #;

VARIABLE (change) (all,b,BLOCK)(all,e,GHG)
    bctax(b,e)
# block carbon price, by emissions #;

VARIABLE (change) (all,b,BLOCK)(all,e,GHG)
    hot_bctax(b,e)
# turn on Hotelling block carbon price #;

VARIABLE (change) (all,b,BLOCK)
    bctax_co2e(b)
# block carbon price, in CO2-e #;

VARIABLE (change) (all,b,BLOCK)(all,e,GHG)
    f_bctax(b,e)
# shift to block carbon price #;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    c_rel_ctax(r,e)
# level of effective carbon price, relative to implied carbon price #;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    rctax(r,e)
# implied regional carbon price #;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    f_rctax(r,e)
# shift to implied regional carbon price#;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    ectax(r,e)
# effective regional carbon price, by emissions #;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    hot_ectax(r,e)
# turn on Hotelling regional carbon price #;

VARIABLE (change) (all,r,REG)
    ectax_co2e(r)
# effective regional carbon price, in CO2-e #;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    f_ectax(r,e)
# shift to effective regional carbon price #;

!-----------------------------------------------------------------------!
! 5 technical change variables                                          !
!-----------------------------------------------------------------------!

VARIABLE (all,j,PROD_COMM)(all,r,REG)
    ao(j,r)
# output-augmenting productivity change #;

VARIABLE (all,j,PROD_COMM)(all,r,REG)
    ao_generic(j,r)
# output-augmenting productivity change #;

VARIABLE (all,r,REG)
    ao_r(r)
# output-augmenting productivity change in region r #;

VARIABLE (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    af(i,j,r)
# input-augmenting productivity change #;

VARIABLE (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    af_generic(i,j,r)
# input-augmenting productivity change #;

VARIABLE (all,j,PROD_COMM)(all,r,REG)
    af_jr(j,r)
# input-augmenting productivity change in region r #;

VARIABLE (all,i,DEMD_COMM)(all,r,REG)
    af_ir(i,r)
# input-augmenting productivity change in region r #;

VARIABLE (all,r,REG)
    af_r(r)
# input-augmenting productivity change in region r #;

VARIABLE (all,r,REG)
    a_energy(r)
# input-augmenting productivity change in energy-intensive sectors #;

VARIABLE
    a_energy_w
# world-wide productivity change in energy-intensive sectors #;

VARIABLE (all,j,PROD_COMM)(all,r,REG)
    ava(j,r)
# factor-input-augmenting productivity change #;

VARIABLE (all,r,REG)
    ava_r(r)
# regional factor-input-augmenting productivity change #;

VARIABLE (all,r,REG)
    dmg_clim(r)
# regional factor-damaging shock due to climate change #;

VARIABLE (all,i,DEMD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    aft(i,t,j,r)
# input-augmenting productivity change in technology-bundle sectors #;

VARIABLE (all,j,TECH_IND)(all,r,REG)
    aft_endw(j,r);

VARIABLE (all,i,DEMD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    aft_(i,k,j,r)
# input-augmenting productivity change in technology-bundle sectors #;

VARIABLE (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    atall(m,i,r,s)
# tech change in m's shipping of i from region r to s #;

VARIABLE (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    at_generic(m,i,r,s);

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    at_ir(i,r);

VARIABLE (all,i,TRAD_COMM)(all,s,REG)
    at_is(i,s);

VARIABLE (all,i,TRAD_COMM)
    at_i(i);

VARIABLE (all,m,MARG_COMM)
    at_m(m);

!-----------------------------------------------------------------------!
! 6 Slack and dynamic variables                                         !
!-----------------------------------------------------------------------!

VARIABLE (all,j,PROD_COMM)(all,r,REG)
    profitslack(j,r)
# excessive profit #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    tradslack(i,r)
# excess supply of traded goods #;

VARIABLE (all, r, REG)
    cgdslack(r)
# slack variable for E_qcgds #;

VARIABLE
    walraslack
# slack variable in the omitted market #;

VARIABLE (all,i,ENDW_COMM)(all,r,REG)
    endwslack(i,r)
# excess supply of primary factors #;

VARIABLE (change)
    one_dummy
# a dummy variable which is always 1 for equation manipulation #;

VARIABLE (change)
    time
# period of time #;

!---------------------------------------------------------------------!
! 7 Energy variables                                                  !
!---------------------------------------------------------------------!

VARIABLE (all, i, PriEner)(all, r, REG)
    qec1(i, r)
# total energy consumption by source #;

VARIABLE ! total energy consumption by use !
(all,i,ENERGY)(all, j, USE)(all, r, REG)
    qec2(i, j, r);

VARIABLE ! total energy consumption !
(all,i,ENERGY)(all, r, REG)
    qec3(i, r);

!---------------------------------------------------------------------!
! 8 Emission variables                                                !
!---------------------------------------------------------------------!

VARIABLE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    efe(i,j,r,e)
# percentage change in per unit emission from use of factor input #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    efd(i,j,r,e)
# percentage change in per unit emission from intermediate commodities #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    efm(i,j,r,e)
# percentage change in per unit emission from intermediate commodities #;

VARIABLE
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    efd_tech(i,k,j,r,e)
# percentage change in per unit emission from inputs of TB-technologies #;

VARIABLE
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    efm_tech(i,k,j,r,e)
# percentage change in per unit emission from inputs of TB-technologies #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    epd(i,r,e)
# percentage change in per unit emission from private use of commodities #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    epm(i,r,e)
# percentage change in per unit emission from priv. use of commodities #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    egd(i,r,e)
# percentage change in per unit emission from public use of commodities #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    egm(i,r,e)
# percentage change in per unit emission from public use of commodities #;

VARIABLE (all,i,PROD_COMM)(all,r,REG)(all,e,GHG)
    eo(i,r,e)
# percentage change in per unit emission from the production of good i #;

VARIABLE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    f_efe(i,j,r,e)
# shifter of efe #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    f_efd(i,j,r,e)
# shifter of efd #;

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    f_efm(i,j,r,e)
# shifter of efm #;

VARIABLE
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    f_efd_tech(i,k,j,r,e)
# shifter of efd_tech #;

VARIABLE
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    f_efm_tech(i,k,j,r,e)
# shifter of efm_tech #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    f_epd(i,r,e)
# shifter of epd #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    f_epm(i,r,e)
# shifter of epm #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    f_egd(i,r,e)
# shifter of egd #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    f_egm(i,r,e)
# shifter of egm #;

VARIABLE (all,i,PROD_COMM)(all,r,REG)(all,e,GHG)
    f_eo(i,r,e)
# shifter of eo #;

VARIABLE (all,e,GHG)
    w_ae(e) # global shifter of aef #;

VARIABLE (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_eo(j,r,e);

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_efd(i,j,r,e);

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_efm(i,j,r,e);

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_EO(j,r,e)
# actual level of emissions intensity index, base 1 #;

Read L_EO from file EMIS_file header "LEO";

UPDATE (all,r,REG)(all,j,PROD_COMM)(all,e,GHG)
    L_EO(j,r,e) = lambda_eo(j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_EFD(i,j,r,e)
# emission intensity of industrial combustion, base year = 1 #;

Read L_EFD from file EMIS_file header "LEFD";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_EFD(i,j,r,e) = lambda_efd(i,j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_EFM(i,j,r,e)
# emission intensity of industrial combustion, base year = 1 #;

Read L_EFM from file EMIS_file header "LEFM";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_EFM(i,j,r,e) = lambda_efm(i,j,r,e);

VARIABLE (all,r,REG)(all,e,GHG)
    p_ENET(r,e)
# percentage change in total net emissions #;

VARIABLE (all,r,REG)(all,e,GHG)
    p_ETOT(r,e)
# percentage change in total gross emissions #;

VARIABLE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    p_emis_end(i,j,r,e);

VARIABLE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    p_emis_int(i,j,r,e);

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    p_emis_priv(i,r,e)
# emissions from private consumption of commodity i #;

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    p_emis_gov(i,r,e);

VARIABLE (all,e,GHG)(all,i,EMIS_SOURCE)(all,j,EMIS_OUTLET)(all,r,REG)
    p_ALL_EMIS(e,i,j,r);

VARIABLE (change) (all,r,REG)
    ch_EMIS_LUCF(r)
# annual change in net emissions from LUCF #;

VARIABLE (change)(all,e,GHG)
    c_L_EMIS_G_GHG(e)
# Change in global emissions by GHG #;

VARIABLE (change)
    c_L_EMIS_G_CO2e
# Change in global emissions in CO2e #;

VARIABLE (all,r,REG)(all,e,GHG)
    emis_pc(r,e)
# percentage change in per capita emission in region r #;

VARIABLE (all,r,REG)(all,e,GHG)
    emis_to_gdp(r,e)
# percentage change in emission to GDP ratio #;

VARIABLE (all,b,BLOCK)(all,e,GHG)
    block_emis(b,e)
#percentage change in aggregate emission of the BLOCK b#;

VARIABLE (all,e,GHG)
    glob_emis(e)
# percentage change in global aggregate emission #;

VARIABLE (all,r,REG) (all,e,GHG)
    tax_emis(r,e)
# percentage change in quantity of taxable emissions #;

VARIABLE (change) (all,r,REG)
    c_CTAXREV(r)
#change in total emission tax revenue#;

VARIABLE (change) (all,r,REG)(all,e,GHG)
    c_CTAXREV_e(r,e)
#change in emission tax revenue from emission type e#;

VARIABLE (change) (all,r,REG)
    equo_inc(r)
# foreign income from trading emissions quota #;

VARIABLE (change) (all,r,REG)
    f_equo_inc(r)
# shifter to turn equo_inc on and off #;

VARIABLE (change)
    equo_inc_g
# sum of global quota incomes, must be 0 #;

VARIABLE (change) (all,r,REG)(all,s,BLOCK)(all,e,GHG)
    ch_EQUO(r,s,e)
# Change in emissions quota #;

!---------------------------------------------------------------------!
! 9 Negative emission technology variables                            !
!---------------------------------------------------------------------!

VARIABLE (all,m,NEMT)(all,r,REG)
    p_NEMS(m,r)
# % change of NEMS #;

VARIABLE (all,m,NEMT)(all,r,REG)
    f_p_NEMS(m,r)
# shift to NEMS #;

VARIABLE (all,m,NEMT)(all,r,REG)
    q_VOAT(m,r)
# % quantity change of VOAT #;

VARIABLE (all,m,NEMT)(all,r,REG)
    p_VOAT(m,r)
# % price change of VOAT #;

VARIABLE (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    q_EVA(i,m,r)
# % quantity change of EVAM & EVAA #;

VARIABLE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    q_VDA(i,m,r)
# % quantity change of VDAM & VDAA #;

VARIABLE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    q_VIA(i,m,r)
# % quantity change of VIAM & VIAA #;

VARIABLE (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    af_EVA(i,m,r)
# % input efficiency change of EVAM & EVAA #;

VARIABLE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    af_VDA(i,m,r)
# % input efficiency change of VDAM & VDAA #;

VARIABLE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    af_VIA(i,m,r)
# % input efficiency change of VIAM & VIAA #;


!***********************************************************************!
! COEFFICIENTS                                                          !
!***********************************************************************!

!-----------------------------------------------------------------------!
! 1 Parameters                                                          !
!-----------------------------------------------------------------------!

! parameters for non-technology bundle industries !

COEFFICIENT (PARAMETER) (all,j,PROD_COMM)(all,r,REG)
    ESUBVAF(j,r)
# fuel-factor substitution elasticities #;

READ ESUBVAF FROM FILE PARAM_file HEADER "ESVF";

VARIABLE (all,i,FUEL)(all,j,PROD_COMM)(all,r,REG)
    p_ESUBF(i,j,r)
# change of interfuel substitution elasticities #;

COEFFICIENT (all,i,FUEL)(all,j,PROD_COMM)(all,r,REG)
    ESUBF(i,j,r)
# interfuel substitution elasticities #;

READ ESUBF FROM FILE PARAM_file HEADER  "ESBF";

UPDATE (all,i,FUEL)(all,j,PROD_COMM)(all,r,REG)
    ESUBF(i,j,r) = p_ESUBF(i,j,r);

VARIABLE (all,j,PROD_COMM)(all,r,REG)
    p_ESUBVA(j,r)
# change of elasticity of substitution among factor inputs #;

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)
    ESUBVA(j,r)
# elasticity of substitution among factor inputs #;

UPDATE (all,j,PROD_COMM)(all,r,REG)
    ESUBVA(j,r) = p_ESUBVA(j,r);

READ ESUBVA FROM FILE PARAM_file HEADER "ESBV";

VARIABLE (all,i,TRAD_COMM)(all,r,REG)
    p_ESUBD(i,r)
# change of Armington elasticity #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    ESUBD(i,r)
# Armington elasticity of subs. between domestic and imported goods #;

READ ESUBD FROM FILE PARAM_file HEADER "ESBD";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    ESUBD(i,r) = p_ESUBD(i,r);

VARIABLE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    p_ESUBM(i,r,s);

COEFFICIENT (PARAMETER) (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    ESUBM(i,r,s)
# CRESH elasticity of subs. among imports from different sources #;

READ ESUBM FROM FILE PARAM_file HEADER "ESBM";

! extra parameters for the technology-bundle industries!

VARIABLE (all,t,STEM_ELY)(all,r,REG)
    p_ESUBE(t,r)
# CRESH subs. parameter for technology t in TB industry ELY#;

COEFFICIENT (all,t,STEM_ELY)(all,r,REG)
    ESUBE(t,r)
# CRESH subs. parameter for technology t in TB industry ELY#;

READ ESUBE FROM FILE PARAM_file HEADER "ETBE";

UPDATE (all,t,STEM_ELY)(all,r,REG)
    ESUBE(t,r) = p_ESUBE(t,r);

COEFFICIENT (PARAMETER) (all,r,REG)
    ESUBC(r);

READ ESUBC FROM FILE PARAM_file HEADER  "ETBC";

COEFFICIENT (PARAMETER) (all,r,REG)
    ESUBO(r);

READ ESUBO FROM FILE PARAM_file HEADER  "ETBO";

COEFFICIENT (PARAMETER) (all,r,REG)
    ESUBG(r);

READ ESUBG FROM FILE PARAM_file HEADER  "ETBG";

COEFFICIENT (PARAMETER) (all,i,ENDWS_COMM)
    ETRAE(i)
# the elasticity of trans. for sluggish primary factor endowments #;

READ ETRAE FROM FILE PARAM_file HEADER "ETRA";

VARIABLE (all,i,FUEL)(all,r,REG)
    p_SIGH(i,r)
# shifter of SIGH_FUEL #;

COEFFICIENT (all,i,FUEL)(all,r,REG)
    SIGH_FUEL(i,r)
# household CRESH parameter for fuel commodities #;

READ SIGH_FUEL FROM FILE PARAM_file HEADER "SIGH";

UPDATE (all,i,FUEL)(all,r,REG)
    SIGH_FUEL(i,r) = p_SIGH(i,r);

COEFFICIENT (all,i,ANIM_FOOD)(all,r,REG)
    SIGH_ANIM(i,r)
# household CES parameter for animal sourced food commodities #;                !Duy added, new!
READ SIGH_ANIM FROM FILE PARAM_file HEADER "SIGA";                              !Duy added, new!

COEFFICIENT (all,i,STAPLE)(all,r,REG)
    SIGH_STAP(i,r)
# household CES parameter for staple commodities #;                             !Duy added, new!
READ SIGH_STAP FROM FILE PARAM_file HEADER "SIGS";                              !Duy added, new!

COEFFICIENT (all,i,CROP)(all,r,REG)
    SIGH_CROP(i,r)
# household CES parameter for other crop commodities #;                         !Duy added, new!
READ SIGH_CROP FROM FILE PARAM_file HEADER "SIGC";                              !Duy added, new!

COEFFICIENT (all,i,PROC_FOOD)(all,r,REG)
    SIGH_PROC(i,r)
# household CES parameter for processed food commodities #;                     !Duy added, new!
READ SIGH_PROC FROM FILE PARAM_file HEADER "SIGP";                              !Duy added, new!

COEFFICIENT (PARAMETER) (all,i,CCS_ELY)
    CCS_TAX(i)
# floor carbon price to start CCS technologies #;

READ CCS_TAX FROM FILE PARAM_file HEADER "CCST";

COEFFICIENT (PARAMETER)
    DISC_RATE
# an exogenous int.rate applied to carbon tax under Hotl #;

Read DISC_RATE from file PARAM_file HEADER "DRAT";

COEFFICIENT (PARAMETER) (all,r,REG)
    HOME(r)
# home-bias parameter #;

READ HOME from file PARAM_file HEADER "HOME";

COEFFICIENT (PARAMETER) PEN
# risk-aversion parameter #;

READ PEN from file PARAM_file HEADER "PEN";

COEFFICIENT (PARAMETER) (all,r,REG)
    RORFLEX(r)
# flexibility parameter #;

READ RORFLEX FROM FILE PARAM_file HEADER "RFLX";

COEFFICIENT (PARAMETER) (all,r,REG)
    RESIDUAL(r)
# residual parameter #;

READ RESIDUAL FROM FILE PARAM_file HEADER "RES";

COEFFICIENT (PARAMETER)
    TINY
# define a TINY number #;

READ TINY from file PARAM_file HEADER "TINY";

COEFFICIENT (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    DIFF(i,j,r);

VARIABLE (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    p_DIFF(i,j,r);

UPDATE (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    DIFF(i,j,r) = p_DIFF(i,j,r);

READ DIFF from file PARAM_file HEADER "DIFF";

!-----------------------------------------------------------------------!
! 2 Policy parameters                                                   !
!-----------------------------------------------------------------------!

COEFFICIENT (PARAMETER)
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,e,GHG)(all,r,REG)
    IMPUTE1(i,j,e,r)
# emission tax flag for input i in production of j (=1 IF exempted) #;

READ IMPUTE1 FROM FILE PARAM_file HEADER "IMP1";

COEFFICIENT (PARAMETER) (all,j,PROD_COMM)(all,e,GHG)(all,r,REG)
    IMPUTE2(j,e,r)
# emission tax flag for production of j (=1 IF exempted) #;

READ IMPUTE2 from file PARAM_file HEADER "IMP2";

COEFFICIENT (PARAMETER) (all,i,TRAD_COMM)(all,e,GHG)(all,r,REG)
    IMPUTE3(i,e,r)
# emission tax flag for private consumption of j (=1 IF exempted) #;

READ IMPUTE3 from file PARAM_file HEADER "IMP3";

COEFFICIENT (all,r,REG)(all,j,NSAV_COMM)
    L_TO_(j,r);

READ L_TO_ from file EMIS_file header "LTO";

UPDATE(change)(all,r,REG) (all,j,NSAV_COMM)
    L_TO_(j,r) = c_to_(j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    L_tpd_(i,r);

READ L_tpd_ from file EMIS_file header "LTPD";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)
    L_tpd_(i,r) = c_tpd_(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    L_tpm_(i,r);

READ L_tpm_ from file EMIS_file header "LTPM";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)
    L_tpm_(i,r) = c_tpm_(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    L_tgd_(i,r);

READ L_tgd_ from file EMIS_file header "LTGD";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)
    L_tgd_(i,r) =c_tgd_(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    L_tgm_(i,r);

READ L_tgm_ from file EMIS_file header "LTGM";

UPDATE(change)(all,i,TRAD_COMM)(all,r,REG)
    L_tgm_(i,r) =c_tgm_(i,r);

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    L_tfe_(i,j,r);

READ L_tfe_ from file EMIS_file header "LTFE";

UPDATE (change) (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    L_tfe_(i,j,r) = c_tfe_(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    L_tfd_(i,j,r);

READ L_tfd_ from file EMIS_file header "LTFD";

UPDATE (change) (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    L_tfd_(i,j,r) = c_tfd_(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,r,REG)(all,j,TECH_IND)
    L_tfd_tech_(i,k,j,r);

READ L_tfd_tech_ from file EMIS_file header "LTTD";

UPDATE (change) (all,i,TRAD_COMM)(all,k,TECH)(all,r,REG)(all,j,TECH_IND)
    L_tfd_tech_(i,k,j,r) = c_tfd_tech_(i,k,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,j,PROD_COMM)
    L_tfm_(i,j,r);

READ L_tfm_ from file EMIS_file header "LTFM";

UPDATE  (change) (all,i,TRAD_COMM)(all,r,REG)(all,j,PROD_COMM)
    L_tfm_(i,j,r) = c_tfm_(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,r,REG)(all,j,TECH_IND)
    L_tfm_tech_(i,k,j,r);

READ L_tfm_tech_ from file EMIS_file header "LTTM";

UPDATE (change) (all,i,TRAD_COMM)(all,k,TECH)(all,r,REG)(all,j,TECH_IND)
    L_tfm_tech_(i,k,j,r) = c_tfm_tech_(i,k,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tpd_e(i,r,e);

READ L_tpd_e from file EMIS_file header "TPDE";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tpd_e(i,r,e) = [1-IMPUTE3(i,e,r)] * c_tpd_e(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tpm_e(i,r,e);

READ L_tpm_e from file EMIS_file header "TPME";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tpm_e(i,r,e) = [1-IMPUTE3(i,e,r)] * c_tpm_e(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tgd_e(i,r,e);

READ L_tgd_e from file EMIS_file header "TGDE";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tgd_e(i,r,e) = [1-IMPUTE3(i,e,r)] * c_tgd_e(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tgm_e(i,r,e);

READ L_tgm_e from file EMIS_file header "TGME";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_tgm_e(i,r,e) = [1-IMPUTE3(i,e,r)] * c_tgm_e(i,r,e);

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_tfe_e(i,j,r,e);

READ L_tfe_e from file EMIS_file header "TFEE";

UPDATE (change) (all,i,ENDW_COMM)(all,r,REG)(all,j,PROD_COMM)(all,e,GHG)
    L_tfe_e(i,j,r,e) = [1-IMPUTE2(j,e,r)] * c_tfe_e(i,j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_tfd_e(i,j,r,e);

READ L_tfd_e from file EMIS_file header "TFDE";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)(all,j,PROD_COMM)(all,e,GHG)
    L_tfd_e(i,j,r,e) = [1-IMPUTE1(i,j,e,r)] * c_tfd_e(i,j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    L_tfm_e(i,j,r,e);

READ L_tfm_e from file EMIS_file header "TFME";

UPDATE (change) (all,i,TRAD_COMM)(all,r,REG)(all,j,PROD_COMM)(all,e,GHG)
       L_tfm_e(i,j,r,e) = [1-IMPUTE1(i,j,e,r)] * c_tfm_e(i,j,r,e);

COEFFICIENT
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    L_tfd_tech_e(i,k,j,r,e);

READ L_tfd_tech_e from file EMIS_file header "TCDE";

UPDATE (change)
(all,i,TRAD_COMM)(ALL,k,TECH)(all,r,REG)(all,j,TECH_IND)(all,e,GHG)
    L_tfd_tech_e(i,k,j,r,e) = c_tfd_tech_e(i,k,j,r,e);

COEFFICIENT
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    L_tfm_tech_e(i,k,j,r,e);

READ L_tfm_tech_e from file EMIS_file header "TCME";

UPDATE (change)
(all,i,TRAD_COMM)(ALL,k,TECH)(all,r,REG)(all,j,TECH_IND)(all,e,GHG)
    L_tfm_tech_e(i,k,j,r,e) = c_tfm_tech_e(i,k,j,r,e);

COEFFICIENT (all,j,PROD_COMM)(all,r,REG) (all,e,GHG)
    L_TO_E(j,r,e);

READ L_TO_E from file EMIS_file HEADER "LTOE";

UPDATE (change) (all,r,REG)(all,j,PROD_COMM)(all,e,GHG)
    L_TO_E(j,r,e) = [1-IMPUTE2(j,e,r)]*c_to_e(j,r,e);

!-----------------------------------------------------------------------!
! 4 aggregate indices                                                   !
!-----------------------------------------------------------------------!

COEFFICIENT (all,r,REG)
    L_CPI(r)
# regional CPIs #;

FORMULA (INITIAL)(all,r,REG)
    L_CPI(r) = 1;

READ (IfHeaderExists) L_CPI from file SAM_file header "LCPI";

UPDATE (all,r,REG)
    L_CPI(r) = cpi(r);

COEFFICIENT (all,r,REG)
    L_PGDP(r) # GDP deflator #;

FORMULA (INITIAL)(all,r,REG)
    L_PGDP(r)=1;

READ (IfHeaderExists) L_PGDP FROM FILE SAM_file HEADER "LPGD";

UPDATE (all,r,REG)
    L_PGDP(r) = pgdp(r);

!-----------------------------------------------------------------------!
! 3 Product input-output coefficients                                   !
!-----------------------------------------------------------------------!

! value at current agent prices !

COEFFICIENT (all,i,ENDW_COMM)(all,r,REG)
    EVOA_temp(i,r)
# value of the output of endowment commodity at agent's price #;

READ EVOA_temp FROM FILE SAM_file HEADER "EVOA";

UPDATE (all,i,ENDW_COMM)(all,r,REG)
    EVOA_temp(i,r) = ps(i,r) * qo(i,r);

COEFFICIENT (all,i,ENDW_COMM)(all,r,REG)
    EVOA(i,r)
# value of the output of endowment commodity at agent's price #;

FORMULA (all,i,ENDW_COMM)(all,r,REG)
    EVOA(i,r) = IF(EVOA_temp(i,r) > 0, EVOA_temp(i,r));

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFA_temp(i,j,r)
# value of expenditure at agents prices #;

READ EVFA_temp FROM FILE SAM_file HEADER "EVFA";

UPDATE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFA_temp(i,j,r) = pfe(i,j,r) * qf(i,j,r);

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFA(i,j,r)
# value of expenditure at agents prices #;

FORMULA (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFA(i,j,r) = IF(EVFA_temp(i,j,r) > 0, EVFA_temp(i,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFA_temp(i,j,r)
# agent price value of firm expenditure on domestic good i by industry #;

READ VDFA_temp FROM FILE SAM_file HEADER "VDFA";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFA_temp(i,j,r) = pfd(i,j,r) * qfd(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFA(i,j,r)
# agent price value of firm expenditure on domestic good i by industry #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFA(i,j,r) = IF(VDFA_temp(i,j,r) > 0, VDFA_temp(i,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFA_temp(i,j,r)
# agent price value of firm expenditure on imported good i by industry #;

READ VIFA_temp FROM FILE SAM_file HEADER "VIFA";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFA_temp(i,j,r) = pfm(i,j,r) * qfm(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFA(i,j,r)
# agent price value of firm expenditure on imported good i by industry #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFA(i,j,r) = IF(VIFA_temp(i,j,r) > 0, VIFA_temp(i,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDPA_temp(i,r)
# agent price value of private household expenditure on domestic good i #;

READ VDPA_temp FROM FILE SAM_file HEADER "VDPA";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VDPA_temp(i,r) = ppd(i,r) * qpd(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDPA(i,r)
# agent price value of private household expenditure on domestic good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VDPA(i,r) = IF(VDPA_temp(i,r) > 0, VDPA_temp(i,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIPA_temp(i,r)
# agent price value of private household expenditure on imported good i #;

READ VIPA_temp FROM FILE SAM_file HEADER "VIPA";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VIPA_temp(i,r) = ppm(i,r) * qpm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIPA(i,r)
# agent price value of private household expenditure on imported good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VIPA(i,r) = IF(VIPA_temp(i,r) > 0, VIPA_temp(i,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDGA_temp(i,r)
# agent price value of public expenditure on domestic good i #;

READ VDGA_temp FROM FILE SAM_file HEADER "VDGA";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VDGA_temp(i,r) = pgd(i,r) * qgd(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDGA(i,r)
# agent price value of public expenditure on domestic good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VDGA(i,r) = IF(VDGA_temp(i,r) > 0, VDGA_temp(i,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIGA_temp(i,r)
# agent price value of public expenditure on imported good i #;

READ VIGA_temp FROM FILE SAM_file HEADER "VIGA";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VIGA_temp(i,r) = pgm(i,r) * qgm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIGA(i,r)
# agent price value of public expenditure on imported good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VIGA(i,r) = IF(VIGA_temp(i,r) > 0, VIGA_temp(i,r));

! value at current market prices !

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFM_temp(i,j,r)
# market price value of firm expenditure on endowment i by industry j #;

READ EVFM_temp FROM FILE SAM_file HEADER "EVFM";

UPDATE (all,i,ENDWM_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFM_temp(i,j,r) = pm(i,r) * qf(i,j,r);

UPDATE (all,i,ENDWS_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFM_temp(i,j,r) = pmes(i,j,r) * qf(i,j,r);

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFM(i,j,r)
# market price value of firm expenditure on endowment i by industry j #;

FORMULA (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    EVFM(i,j,r) = IF(EVFM_temp(i,j,r) > 0, EVFM_temp(i,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFM_temp(i,j,r)
# market price value of firm expenditure on domestic good i by industry #;

READ VDFM_temp FROM FILE SAM_file HEADER "VDFM";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFM_temp(i,j,r)  = pm(i,r)  * qfd(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFM(i,j,r)
# market price value of firm expenditure on domestic good i by industry #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VDFM(i,j,r) = IF( VDFM_temp(i,j,r) > 0, VDFM_temp(i,j,r) );

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFM_temp(i,j,r)
# market price value of firm expenditure on imported good i by industry #;

READ VIFM_temp FROM FILE SAM_file HEADER "VIFM";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFM_temp(i,j,r)  = pimp(i,r) * qfm(i,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFM(i,j,r)
# market price value of firm expenditure on imported good i by industry #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VIFM(i,j,r) = IF( VIFM_temp(i,j,r) > 0, VIFM_temp(i,j,r) );

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDPM_temp(i,r)
# market price value of private household exp. on domestic good i #;

READ VDPM_temp FROM FILE SAM_file HEADER "VDPM";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VDPM_temp(i,r)  = pm(i,r) * qpd(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDPM(i,r)
# market price value of private household exp. on domestic good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VDPM(i,r) = IF( VDPM_temp(i,r) > 0, VDPM_temp(i,r) );

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIPM_temp(i,r)
# market price value of private household exp. on imported good i #;

READ VIPM_temp FROM FILE SAM_file HEADER "VIPM";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VIPM_temp(i,r)  = pimp(i,r) * qpm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIPM(i,r)
# market price value of private household exp. on imported good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VIPM(i,r) = IF( VIPM_temp(i,r) > 0, VIPM_temp(i,r) );

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDGM_temp(i,r)
# market price value of public expenditure on domestic good i #;

READ VDGM_temp FROM FILE SAM_file HEADER "VDGM";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VDGM_temp(i,r) = pm(i,r) * qgd(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDGM(i,r)
# market price value of public expenditure on domestic good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VDGM(i,r) = IF( VDGM_temp(i,r) > 0, VDGM_temp(i,r) );

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIGM_temp(i,r)
# market price value of public expenditure on imported good i #;

READ VIGM_temp FROM FILE SAM_file HEADER "VIGM";

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    VIGM_temp(i,r) = pimp(i,r) * qgm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIGM(i,r)
# market price value of public expenditure on imported good i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VIGM(i,r) = IF( VIGM_temp(i,r) > 0, VIGM_temp(i,r) );

! value at base-year constant prices !

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    QEFM_temp(i,j,r)
# constant value of firm expenditure on endowment i by industry j #;

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QDFM_temp(i,j,r)
# constant value of firm expenditure on domestic good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QIFM_temp(i,j,r)
# constant value of firm expenditure on imported good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QDPM_temp(i,r)
# constant value of private household expenditure on domestic good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QIPM_temp(i,r)
# constant value of private household expenditure on imported good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QDGM_temp(i,r)
# constant value of public expenditure on domestic good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QIGM_temp(i,r)
# constant value of public expenditure on imported good i #;

! Initialise quantities to values. !
Formula
(Initial)(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG) QEFM_temp(i,j,r) = EVFM(i,j,r);
(Initial)(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG) QIFM_temp(i,j,r) = VIFM(i,j,r);
(Initial)(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG) QDFM_temp(i,j,r) = VDFM(i,j,r);
(Initial)(all,i,TRAD_COMM)(all,r,REG) QIPM_temp(i,r) = VIPM(i,r);
(Initial)(all,i,TRAD_COMM)(all,r,REG) QDPM_temp(i,r) = VDPM(i,r);
(Initial)(all,i,TRAD_COMM)(all,r,REG) QIGM_temp(i,r) = VIGM(i,r);
(Initial)(all,i,TRAD_COMM)(all,r,REG) QDGM_temp(i,r) = VDGM(i,r);

READ (IfHeaderExists) QEFM_temp FROM FILE SAM_file HEADER "QEFM";
READ (IfHeaderExists) QDFM_temp FROM FILE SAM_file HEADER "QDFM";
READ (IfHeaderExists) QIFM_temp FROM FILE SAM_file HEADER "QIFM";
READ (IfHeaderExists) QDPM_temp FROM FILE SAM_file HEADER "QDPM";
READ (IfHeaderExists) QIPM_temp FROM FILE SAM_file HEADER "QIPM";
READ (IfHeaderExists) QDGM_temp FROM FILE SAM_file HEADER "QDGM";
READ (IfHeaderExists) QIGM_temp FROM FILE SAM_file HEADER "QIGM";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QDFM_temp(i,j,r) = qfd(i,j,r);

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QIFM_temp(i,j,r) = qfm(i,j,r);

UPDATE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    QEFM_temp(i,j,r) = qf(i,j,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    QDPM_temp(i,r) = qpd(i,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    QIPM_temp(i,r) = qpm(i,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    QDGM_temp(i,r) = qgd(i,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    QIGM_temp(i,r) = qgm(i,r);

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    QEFM(i,j,r)
# constant value of firm expenditure on endowment i by industry j #;

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QDFM(i,j,r)
# constant value of firm expenditure on domestic good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QIFM(i,j,r)
# constant value of firm expenditure on imported good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QDPM(i,r)
# constant value of private household expenditure on domestic good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QIPM(i,r)
# constant value of private household expenditure on imported good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QDGM(i,r)
# constant value of public expenditure on domestic good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    QIGM(i,r)
# constant value of public expenditure on imported good i #;

FORMULA (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    QEFM(i,j,r) = IF(QEFM_temp(i,j,r) > 0, QEFM_temp(i,j,r));

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QDFM(i,j,r) = IF(QDFM_temp(i,j,r) > 0, QDFM_temp(i,j,r));

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    QIFM(i,j,r) = IF(QIFM_temp(i,j,r) > 0, QIFM_temp(i,j,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    QDPM(i,r) = IF(QDPM_temp(i,r) > 0, QDPM_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    QIPM(i,r) = IF(QIPM_temp(i,r) > 0, QIPM_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    QDGM(i,r) = IF(QDGM_temp(i,r) > 0, QDGM_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    QIGM(i,r) = IF(QIGM_temp(i,r) > 0, QIGM_temp(i,r));

! technologies !

COEFFICIENT (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTA_temp(i,k,j,r)
# value of endowmwnt commodity i used by technology k at agents prices #;

READ EVTA_temp from file SAM_file header "EVTA";

UPDATE (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTA_temp(i,k,j,r) = pft(i,k,j,r) * qft(i,k,j,r);

COEFFICIENT (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTA(i,k,j,r)
# value of endowmwnt commodity i used by technology k at agents prices #;

FORMULA (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTA(i,k,j,r) = IF(EVTA_temp(i,k,j,r) > 0, EVTA_temp(i,k,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VDTA_temp(i,k,j,r)
# value of commodity i used in technology k at agents prices #;

READ VDTA_temp from file SAM_file header "VDTA";

UPDATE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pftd(i,k,j,r) + qftd(i,k,j,r)>-99.9)
    VDTA_temp(i,k,j,r) = pftd(i,k,j,r) * qftd(i,k,j,r);

UPDATE (Change)(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pftd(i,k,j,r) + qftd(i,k,j,r)<=-99.9)
    VDTA_temp(i,k,j,r) = -0.999*VDTA_temp(i,k,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VDTA(i,k,j,r)
# value of commodity i used in technology k at agents prices #;

FORMULA (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VDTA(i,k,j,r) = IF(VDTA_temp(i,k,j,r) > 0, VDTA_temp(i,k,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VITA_temp(i,k,j,r)
# value of commodity i used in technology k at agents prices #;

READ VITA_temp from file SAM_file header "VITA";

UPDATE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pftm(i,k,j,r) + qftm(i,k,j,r)>-99.9)
    VITA_temp(i,k,j,r) = pftm(i,k,j,r) * qftm(i,k,j,r);

UPDATE (Change)(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pftm(i,k,j,r) + qftm(i,k,j,r)<=-99.9)
    VITA_temp(i,k,j,r) = -0.999*VITA_temp(i,k,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VITA(i,k,j,r)
# value of commodity i used in technology k at agents prices #;

FORMULA (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VITA(i,k,j,r) = IF(VITA_temp(i,k,j,r) > 0, VITA_temp(i,k,j,r));

COEFFICIENT (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTM_temp(i,k,j,r)
# value of endowment commodity i used by technology k at market prices #;

READ EVTM_temp from file SAM_file header "EVTM";

UPDATE (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTM_temp(i,k,j,r) = pft(i,k,j,r) * qft(i,k,j,r);

COEFFICIENT (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTM(i,k,j,r)
# value of endowment commodity i used by technology k at market prices #;

FORMULA (all,i,ENDW_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    EVTM(i,k,j,r) = IF(EVTM_temp(i,k,j,r) > 0, EVTM_temp(i,k,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VDTM_temp(i,k,j,r)
# value of commodity i used in technology k at market prices #;

READ VDTM_temp from file SAM_file header "VDTM";

UPDATE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pm(i,r) + qftd(i,k,j,r)>-99.9)
    VDTM_temp(i,k,j,r) = pm(i,r) * qftd(i,k,j,r);

UPDATE (Change)(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pm(i,r) + qftd(i,k,j,r)<=-99.9)
    VDTM_temp(i,k,j,r) = -0.999*VDTM_temp(i,k,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VDTM(i,k,j,r)
# value of commodity i used in technology k at market prices #;

FORMULA (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VDTM(i,k,j,r) = IF(VDTM_temp(i,k,j,r) > 0, VDTM_temp(i,k,j,r));

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VITM_temp(i,k,j,r)
# value of commodity i used in technology k at market prices #;

READ VITM_temp from file SAM_file header "VITM";

UPDATE (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pimp(i,r) + qftm(i,k,j,r)>-99.9)
    VITM_temp(i,k,j,r) = pimp(i,r) * qftm(i,k,j,r);

UPDATE (Change)(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)
(all,r,REG:pimp(i,r) + qftm(i,k,j,r)<=-99.9)
    VITM_temp(i,k,j,r) = -0.999*VITM_temp(i,k,j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VITM(i,k,j,r)
# value of commodity i used in technology k at market prices #;

FORMULA (all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VITM(i,k,j,r) = IF(VITM_temp(i,k,j,r) > 0, VITM_temp(i,k,j,r));

!-----------------------------------------------------------------------!
! mapping variables                                                 !
!-----------------------------------------------------------------------!

COEFFICIENT (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    TECH_FLAG(i,j,r)
# 1 when input i is used in the technology bundle of j #;

FORMULA (all,i,DEMD_COMM)(all,j,NTECH_IND)(all,r,REG)
    TECH_FLAG(i,j,r) = 0;

FORMULA (all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    TECH_FLAG(i,j,r)
        = IF[SUM(t,TECH,VITA(i,t,j,r) + VDTA(i,t,j,r)) > 0, 1];

FORMULA (all,i,ENDW_COMM)(all,j,TECH_IND)(all,r,REG)
    TECH_FLAG(i,j,r) = IF[SUM(t,TECH,EVTA(i,t,j,r)) > 0, 1];

COEFFICIENT (all,i,NSAV_COMM)(all,j,NSAV_COMM)
    NSAV_MAP(i,j)
# to select non-savings commodities #;

FORMULA (all,i,NSAV_COMM)(all,j,NSAV_COMM)
    NSAV_MAP(i,j) = 0;

FORMULA (all,i,NSAV_COMM)
    NSAV_MAP(i,i) = 1;

COEFFICIENT (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    IS_FUEL(i,j,r)
# 1 if is fuel #;

FORMULA (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    IS_FUEL(i,j,r) = 0;

FORMULA (all,i,FUEL)(all,j,PROD_COMM)(all,r,REG)
    IS_FUEL(i,j,r) = 1;

COEFFICIENT (all,i,PROD_COMM)(all,j,PROD_COMM)(all,r,REG)
    IS_OIL(i,j,r)
# 1 if is oil #;

FORMULA (all,i,PROD_COMM)(all,j,PROD_COMM)(all,r,REG)
    IS_OIL(i,j,r) = 0;

FORMULA (all,r,REG)
    IS_OIL("oil","oil",r) = 1;

COEFFICIENT (all,i,NSAV_COMM)
    ENDW_FLAG(i)
# to select endowment good from non-savings commodities #;

FORMULA (all,i,NSAV_COMM)
    ENDW_FLAG(i) = 0;

FORMULA (all,i,ENDW_COMM)
    ENDW_FLAG(i) = 1;

COEFFICIENT (all,e,GHG)
    IS_CO2(e);

FORMULA (all,e,GHG)
    IS_CO2(e) = 0;

FORMULA (all,e,CO2)
    IS_CO2(e) = 1;

!-----------------------------------------------------------------------!
! 4 Global trade coefficients                                           !
!-----------------------------------------------------------------------!

! at current market prices !

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIMS_temp(i,s,r)
# market price value of imports #;

READ VIMS_temp FROM FILE SAM_file HEADER "VIMS";

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIMS_temp(i,r,s)  =  pms(i,r,s) * qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIMS(i,s,r);

FORMULA(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIMS(i,s,r) = IF(VIMS_temp(i,s,r) > 0, VIMS_temp(i,s,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXMD_temp(i,r,s)
# market price value of exports of commodity i from region r to dest. s #;

READ VXMD_temp FROM FILE SAM_file HEADER "VXMD";

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXMD_temp(i,r,s) = pm(i,r) * qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXMD(i,r,s);

FORMULA(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXMD(i,r,s) = IF(VXMD_temp(i,r,s) > 0, VXMD_temp(i,r,s));

! at current world prices !

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIWS_temp(i,r,s)
# cif value of imports of commodity i from source s to region r #;

READ VIWS_temp FROM FILE SAM_file HEADER "VIWS";

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIWS_temp(i,r,s) = pcif(i,r,s) * qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIWS(i,r,s);

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VIWS(i,r,s) = IF(VIWS_temp(i,r,s) > 0, VIWS_temp(i,r,s));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXWD_temp(i,r,s)
# fob value of exports of commodity i from region s to destination r #;

READ VXWD_temp FROM FILE SAM_file HEADER "VXWD";

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXWD_temp(i,r,s) = pfob(i,r,s) * qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXWD(i,r,s);

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VXWD(i,r,s) = IF(VXWD_temp(i,r,s) > 0, VXWD_temp(i,r,s));

COEFFICIENT (all,m,MARG_COMM)(all,r,REG)
    VST_temp(m,r)
# exports of commodity i from REGion r to the international transport #;

READ VST_temp FROM FILE SAM_file HEADER "VST";

UPDATE (all,m,MARG_COMM)(all,r,REG)
    VST_temp(m,r) = pm(m,r) * qst(m,r);

COEFFICIENT (all,m,MARG_COMM)(all,r,REG)
    VST(m,r)
# exports of commodity i from REGion r to the international transport #;

FORMULA (all,m,MARG_COMM)(all,r,REG)
    VST(m,r) = IF(VST_temp(m,r) > 0, VST_temp(m,r));

COEFFICIENT (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VTMFSD_temp(m,i,r,s)
# value of transportation services m used in shipping commodity #;

Read VTMFSD_temp from file  SAM_file header "VTWR";

UPDATE (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VTMFSD_temp(m,i,r,s) = pt(m) * qtmfsd(m,i,r,s);

COEFFICIENT (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VTMFSD(m,i,r,s)
# value of transportation services m used in shipping commodity #;

FORMULA (all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    VTMFSD(m,i,r,s) = IF(VTMFSD_temp(m,i,r,s) > 0, VTMFSD_temp(m,i,r,s));

! Create aggregate variables !

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIW(i,r)
# value of imports of com. i into region r at cif prices #;

FORMULA (all,i,TRAD_COMM)(all,s,REG)
    VIW(i,s) = SUM(r,REG,VIWS(i,r,s) );

COEFFICIENT (all,r,REG)
    REGIMP(r)
# value of imports into region r at cif prices #;

FORMULA (all,r,REG)
    REGIMP(r) = SUM(i, TRAD_COMM, VIW(i,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VXW(i,r)
# value of exports of commodity i from region r at fob prices #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VXW(i,r) = SUM(s,REG, VXWD(i,r,s));

COEFFICIENT (all,m,MARG_COMM)
    VT(m)
# the value of total international transportation services type m #;

FORMULA (all,m,MARG_COMM)
    VT(m) = SUM(r,REG, VST(m,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VXWT(i,r)
# fob exports by commodity including sales to international transport #;

FORMULA (all,m,MARG_COMM)(all,r,REG)
    VXWT(m,r) = SUM(s,REG, VXWD(m,r,s)) + VST(m,r);

FORMULA (all,i,NMARG_COMM)(all,r,REG)
    VXWT(i,r) = SUM(s,REG, VXWD(i,r,s));

COEFFICIENT (all,i,TRAD_COMM)
    VXWT_W(i)
# world fob exports including sales to international transport #;

FORMULA (all,i,TRAD_COMM)
    VXWT_W(i) = SUM(r,REG, VXWT(i,r));

COEFFICIENT (all,r,REG)
    REGEXP(r)
# regional exports at fob including sales to international transport #;

FORMULA (all,r,REG)
    REGEXP(r)
        = SUM(i,TRAD_COMM, VXW(i,r))
        + SUM(m,MARG_COMM,VST(m,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VIM(i,r)
# value of imports of commodity i into region r at market prices #;

FORMULA (all,i,TRAD_COMM)(all,s,REG)
    VIM(i,s) = SUM(r,REG,VIMS(i,r,s));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VXM(i,r)
# value of exports of commodity i from region r at market prices #;
! excluding sales to international transport !

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VXM(i,r) = SUM(s,REG,VXMD(i,r,s));

! at base year constant prices !

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIMS_temp(i,r,s)
# quantity of imports of commodity i from source s to region r #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIMS_temp(i,r,s) = qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIWS_temp(i,r,s)
# constant value of imports of commodity i from source s to region r #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIWS_temp(i,r,s) = qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXMD_temp(i,r,s)
# quantity of exports of commodity i from region r to destination s #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXMD_temp(i,r,s) = qxs(i,r,s);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXWD_temp(i,r,s)
# constant value of exports #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXWD_temp(i,r,s) = qxs(i,r,s);

! Initialise quantities to values. !
Formula
(Initial)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG) QIMS_temp(i,r,s) = VIMS(i,r,s);
(Initial)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG) QIWS_temp(i,r,s) = VIWS(i,r,s);
(Initial)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG) QXWD_temp(i,r,s) = VXWD(i,r,s);
(Initial)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG) QXMD_temp(i,r,s) = VXMD(i,r,s);

READ (IfHeaderExists) QIMS_temp FROM FILE SAM_file HEADER "QIMS";
READ (IfHeaderExists) QIWS_temp FROM FILE SAM_file HEADER "QIWS";
READ (IfHeaderExists) QXMD_temp FROM FILE SAM_file HEADER "QXMD";
READ (IfHeaderExists) QXWD_temp FROM FILE SAM_file HEADER "QXWD";

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIMS(i,r,s)
# quantity of imports of commodity i from source s to region r #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIMS(i,r,s) = IF(QIMS_temp(i,r,s) > 0, QIMS_temp(i,r,s));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIWS(i,r,s)
# constant value of imports of commodity i from source s to region r #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QIWS(i,r,s) = IF(QIWS_temp(i,r,s) > 0, QIWS_temp(i,r,s));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXMD(i,r,s)
# quantity of exports of commodity i from region r to destination s #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXMD(i,r,s) = IF(QXMD_temp(i,r,s) > 0, QXMD_temp(i,r,s));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXWD(i,r,s)
# constant value of exports #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    QXWD(i,r,s) = IF(QXWD_temp(i,r,s) > 0, QXWD_temp(i,r,s));

!-----------------------------------------------------------------------!
! 5 Consumption, investment and savings coefficicents                   !
!-----------------------------------------------------------------------!

VARIABLE (LEVELS,LINEAR_NAME=wkb) (all,r,REG)
    VKB(r)
#Units of physical capital stock at the start of the period#;

READ VKB FROM FILE SAM_file HEADER "VKB";

EQUATION E_wkb (all,r,REG)
    wkb(r) = qk(r) + pcgds(r);
SUBSTITUTE wkb USING E_wkb;

COEFFICIENT(PARAMETER) (all, r, REG)
    DEP_RATE(r);

FORMULA(INITIAL) (all, r, REG)
    DEP_RATE(r) = 0.04;

COEFFICIENT (all, r, REG)
    VDEP(r)
# value of capital depreciation in region r #;

READ VDEP FROM FILE SAM_file HEADER "VDEP";

UPDATE (all,r,REG)
    VDEP(r) = qk(r) * pcgds(r);

COEFFICIENT (all, r, REG)
    REGINV(r)
# regional gross investment, i.e., value of output of sector "cgds" #;

!READ REGINV from file SAM_file header "RINV";

UPDATE (all,r,REG)
    REGINV(r) = qcgds(r) * pcgds(r);!
Formula (all,r,REG)
REGINV(r) = sum{j,CGDS_COMM,sum{i,TRAD_COMM, VDFA(i,j,r) + VIFA(i,j,r)}};
! REGINV need not be present on the initial SAM_file. KJH 20191213 !

COEFFICIENT (all,r,REG)
    REGSAVE(r)
# nominal gross savings #;

READ REGSAVE FROM FILE SAM_file HEADER "SAVE";

UPDATE (all,r,REG)
    REGSAVE(r) = ys(r);

COEFFICIENT (all, r, REG)
    NETINV(r)
# regional net investment in region r #;

FORMULA (all, r, REG)
    NETINV(r)  = REGINV(r) - VDEP(r);

READ DEBT FROM FILE SAM_file HEADER "DEBT";

! DEBT now a levels variable. KJH 20191214
UPDATE (change) (all,r,REG)
    DEBT(r) = c_debt(r);!

!-----------------------------------------------------------------------!
! 6 Aggregated coefficients                                             !
!-----------------------------------------------------------------------!

COEFFICIENT (all,i,DEMD_COMM)(all,j,PROD_COMM)(all,r,REG)
    VFA(i,j,r)
# producer expenditure on i by industry j in region r at agent prices #;

FORMULA (all,i,ENDW_COMM)(all,j,NTECH_IND)(all,r,REG)
    VFA(i,j,r) = EVFA(i,j,r);

FORMULA (all,i,ENDW_COMM)(all,j,TECH_IND)(all,r,REG)
    VFA(i,j,r)
        = IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,EVTA(i,t,j,r)))
        + IF(TECH_FLAG(i,j,r) = 0, EVFA(i,j,r));

FORMULA (all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    VFA(i,j,r) = VDFA(i,j,r) + VIFA(i,j,r);

FORMULA (all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    VFA(i,j,r)
        = IF(TECH_FLAG(i,j,r) = 1,
            SUM(t,TECH,VDTA(i,t,j,r) + VITA(i,t,j,r)))
        + IF(TECH_FLAG(i,j,r) = 0,
            VDFA(i,j,r) + VIFA(i,j,r));

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)
    VVA(j,r);

FORMULA (all,j,PROD_COMM)(all,r,REG)
    VVA(j,r) = SUM(i,ENDW_COMM,VFA(i,j,r));

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)
    VFUEL(j,r);

FORMULA (all,j,PROD_COMM)(all,r,REG)
    VFUEL(j,r) = SUM(i,FUEL,VFA(i,j,r));

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)
    VVAF(j,r);

FORMULA (all,j,PROD_COMM)(all,r,REG)
    VVAF(j,r) = VVA(j,r) + VFUEL(j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VPA(i,r)
# agent price value of private household expenditure of commodity i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VPA(i,r) = VDPA(i,r) + VIPA(i,r);

COEFFICIENT (all,r,REG)
    PRIVEXP(r)
# value of private household expenditure in region r at agent prices #;

FORMULA (all,r,REG)
    PRIVEXP(r) = SUM(i,TRAD_COMM, VPA(i,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VGA(i,r)
# value of public expenditure on commodity i at agent prices #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VGA(i,r) = VDGA(i,r) + VIGA(i,r);

COEFFICIENT (all,r,REG)
    GOVEXP(r)
# value of public expenditure in region r at agent prices #;

FORMULA (all,r,REG)
    GOVEXP(r) = SUM(i,TRAD_COMM, VGA(i,r));

COEFFICIENT (all,i,NSAV_COMM)(all,r,REG)
    VOA(i,r)
# value of the output of commodity i in region r at agent prices #;

FORMULA (all,i,ENDW_COMM)(all,r,REG)
    VOA(i,r) = EVOA(i,r);

FORMULA (all,i,PROD_COMM)(all,r,REG)
    VOA(i,r)
        = SUM(k,DEMD_COMM,VFA(k,i,r));

COEFFICIENT (all,i,TRAD_COMM)
    VOA_WORLD(i)
# world value of output at agent prices #;

FORMULA (all,i,TRAD_COMM)
    VOA_WORLD(i) = SUM(r,REG,VOA(i,r));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    VDM(i,r)
# value of domestic sales of commodity i in region r at market prices #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    VDM(i,r)
        = VDPM(i,r) + VDGM(i,r)
        + SUM(j,PROD_COMM,
            IF(TECH_FLAG(i,j,r) = 0, VDFM(i,j,r)))
        + SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 1,
                SUM(t,TECH,VDTM(i,t,j,r))));

COEFFICIENT (all,i,NSAV_COMM)(all,r,REG)
    VOM(i,r)
# value of the output of commodity or endowment i at market prices #;

FORMULA (all,i,ENDW_COMM)(all,r,REG)
    VOM(i,r)
        = SUM(j,NTECH_IND, EVFM(i,j,r))
        + SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH, EVTM(i,t,j,r)))
          + IF(TECH_FLAG(i,j,r) = 0, EVFM(i,j,r)));

FORMULA (all,m,MARG_COMM)(all,r,REG)
    VOM(m,r) = VDM(m,r) + SUM(s,REG,VXMD(m,r,s)) + VST(m,r);

FORMULA (all,i,NMARG_COMM)(all,r,REG)
    VOM(i,r) = VDM(i,r) + SUM(s,REG,VXMD(i,r,s));

FORMULA (all,h,CGDS_COMM)(all,r,REG)
    VOM(h,r)  = VOA(h,r);

! create aggregate variables !

COEFFICIENT (all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VTA(k,j,r)
# Total Cost of technology k at agent's price #;

FORMULA (all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    VTA(k,j,r)
        = SUM(i,TRAD_COMM,VDTA(i,k,j,r) + VITA(i,k,j,r))
        + SUM(i,ENDW_COMM,EVTA(i,k,j,r));

COEFFICIENT (all,k,STEM_ELY)(all,j,ELY)(all,r,REG)
    VTA_STEM(k,j,r)
# Total Cost of composite and conventional technology k at agent's price #;

FORMULA (all,k,SINGLE_ELY)(all,j,ELY)(all,r,REG)
    VTA_STEM(k,j,r)
        = SUM(i,TRAD_COMM,VDTA(i,k,j,r) + VITA(i,k,j,r))
        + SUM(i,ENDW_COMM,EVTA(i,k,j,r));

FORMULA (all,j,ELY)(all,r,REG)
    VTA_STEM("tCoal",j,r)
        = SUM(k,COL_ELY,
            SUM(i,TRAD_COMM,VDTA(i,k,j,r) + VITA(i,k,j,r))
          + SUM(i,ENDW_COMM,EVTA(i,k,j,r)));

FORMULA (all,j,ELY)(all,r,REG)
    VTA_STEM("tOil",j,r)
        = SUM(k,OIL_ELY,
            SUM(i,TRAD_COMM,VDTA(i,k,j,r) +VITA(i,k,j,r))
                + SUM(i,ENDW_COMM,EVTA(i,k,j,r)));

FORMULA (all,j,ELY)(all,r,REG)
    VTA_STEM("tGas",j,r)
        = SUM(k,GAS_ELY,
            SUM(i,TRAD_COMM,VDTA(i,k,j,r) +VITA(i,k,j,r))
                + SUM(i,ENDW_COMM,EVTA(i,k,j,r)));

COEFFICIENT
    zdd
# Coefficient for zero divide #;

FORMULA
    zdd = 1 / SUM(t,TECH,1);

ZERODIVIDE (zero_by_zero) DEFAULT zdd;

COEFFICIENT (all,i,DEMD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TDEM_SHR(i,t,j,r)
# share of technology t in agg. input demand of i by all techs.#;

FORMULA (all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TDEM_SHR(i,t,j,r)
        = [VDTM(i,t,j,r) + VITM(i,t,j,r)]
        / SUM(tt,TECH,VDTM(i,tt,j,r) + VITM(i,tt,j,r));

FORMULA (all,i,ENDW_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TDEM_SHR(i,t,j,r)
        = EVTM(i,t,j,r) / SUM(tt,TECH,EVTM(i,tt,j,r));

COEFFICIENT (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TQNT_temp(t,j,r)
# Quantity of output of technology t in TB industry j  #;

READ TQNT_temp FROM FILE SAM_file HEADER "TQNT";

UPDATE (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TQNT_temp(t,j,r) = qtech(t,j,r);

COEFFICIENT (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TQNT(t,j,r)
# Quantity of output of technology t in TB industry j  #;

FORMULA (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TQNT(t,j,r)
        = IF(TQNT_temp(t,j,r) > 0, TQNT_temp(t,j,r));

COEFFICIENT (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TECHSHR(t,j,r)
# cost share of technology in the total cost of the bundle #;

FORMULA (all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    TECHSHR(t,j,r) = TQNT(t,j,r) / SUM(tt,TECH, TQNT(tt,j,r));

ZERODIVIDE (zero_by_zero) OFF;

COEFFICIENT (all,i,DEMD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    VCTA(i,t,j,r);

FORMULA (all,i,ENDW_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    VCTA(i,t,j,r) = EVTA(i,t,j,r);

FORMULA (all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    VCTA(i,t,j,r) = VDTA(i,t,j,r) + VITA(i,t,j,r);

! Macro variables !

ZERODIVIDE (zero_by_zero) DEFAULT 0;

VARIABLE (LEVELS,LINEAR_VAR=rorc) (all,r,REG)
    L_RORC(r)
# rate of return #;

!READ L_RORC FROM FILE SAM_file HEADER "RORC";

UPDATE (all,r,REG)
    L_RORC(r) = rorc(r);!
Formula (Initial)(all,r,REG) L_RORC(r) = sum{i,ENDWC_COMM, EVOA(i,r)}/VKB(r);

VARIABLE (LEVELS,LINEAR_VAR=rorg)
    L_RORG
# world rate of return #;

!READ L_RORG FROM FILE SAM_file HEADER "RORW";

UPDATE
    L_RORG = rorg;!
Formula (Initial)
L_RORG = sum{r,REG,sum{i,ENDWC_COMM, EVOA(i,r)}}/sum{r,REG, VKB(r)};
! L_RORC and L_RORG need not be on the initial SAM_file, KJH 20191213 !

COEFFICIENT (all,r,REG)
    REGGNP(r)
# nominal gross national product #;

!READ REGGNP FROM FILE SAM_file HEADER "GNPN";

UPDATE (all,r,REG)
    REGGNP(r) = gnp_n(r);!
Formula (all,r,REG)
REGGNP(r) = PRIVEXP(r) + GOVEXP(r) + REGSAVE(r) + VDEP(r);

COEFFICIENT (all,r,REG)
    GNPR(r)
# real GNP in region r #;

Formula (Initial)(all,r,REG) GNPR(r) = REGGNP(r);
READ (IfHeaderExists) GNPR FROM FILE SAM_file HEADER "GNPR";
! REGGNP and GNPR need not be on the initial SAM_file. KJH 20191213 !

UPDATE (all,r,REG)
    GNPR(r) = gnp_r(r);

COEFFICIENT (all,r,REG)
    REGNNI(r)
# net national income #;

!READ REGNNI FROM FILE SAM_file HEADER "NNI";

UPDATE (all,r,REG)
    REGNNI(r) = yfull(r);!
Formula (all,r,REG) REGNNI(r) = REGGNP(r) - VDEP(r);
! REGNNI need not be on the initial SAM_file. KJH 20191213 !

COEFFICIENT (all,r,REG)
    XSHRPRIV(r);

FORMULA (all,r,REG)
    XSHRPRIV(r) = PRIVEXP(r) / REGNNI(r);

COEFFICIENT (all,r,REG)
    XSHRGOV(r);

FORMULA (all,r,REG)
    XSHRGOV(r) = GOVEXP(r) / REGNNI(r);

COEFFICIENT (all,r,REG)
    XSHRSAVE(r);

FORMULA (all,r,REG)
    XSHRSAVE(r) = REGSAVE(r) / REGNNI(r);

COEFFICIENT (all,r,REG)
    REGGDP(r)
# nominal GDP in region r #;

!READ REGGDP FROM FILE SAM_file HEADER "GDPN";

UPDATE (all,r,REG)
    REGGDP(r) = gdp_n(r);!
! Define REGGDP by formula (always). KJH 20191213 !
Formula (all,r,REG)
REGGDP(r) = PRIVEXP(r) + GOVEXP(r) + REGINV(r) + REGEXP(r) - REGIMP(r);

COEFFICIENT (all,r,REG)
    GDPR(r)
# real GDP in region r #;


Formula (Initial)(all,r,REG) GDPR(r) = REGGDP(r);
READ (IfHeaderExists) GDPR FROM FILE SAM_file HEADER "GDPR";

! REGGDP and GDPR need not be on the initial SAM_file. KJH 20191213 !

UPDATE (all,r,REG)
    GDPR(r) = gdp_r(r);

COEFFICIENT (all, r, REG)
    HOME_BIAS(r)
# HOME_BIAS coefficient #;

FORMULA (all, r, REG)
    HOME_BIAS(r) = HOME(r) * exp(- PEN * DEBT(r) / REGGDP(r));
!        = IF(DEBT(r) GE 0, HOME(r) * exp(- PEN * DEBT(r) / REGGDP(r)))
        + IF(DEBT(r) < 0, HOME(r));
!

COEFFICIENT (all,r,REG)
    PBAL(r)
# net income from trading emissions permits #;

FORMULA (INITIAL)(all,r,REG)
    PBAL(r) = 0;

READ (IfHeaderExists) PBAL from FILE SAM_file HEADER "PBAL";

UPDATE (change)(all,r,REG)
    PBAL(r) = equo_inc(r);

COEFFICIENT
    GLOBINV
# global gross investment #;

FORMULA
    GLOBINV = SUM(r,REG, NETINV(r));

COEFFICIENT
    GLOBSAV
# global savings #;

FORMULA
    GLOBSAV = SUM(r,REG, REGSAVE(r));

ZERODIVIDE (zero_by_zero) OFF;

!-----------------------------------------------------------------------!
! 7 CDE coefficients                                     !
!-----------------------------------------------------------------------!

ZERODIVIDE (zero_by_zero) DEFAULT 0;

COEFFICIENT (PARAMETER) (all,i,COMP_COMM)(all,r,REG)
    INCPAR(i,r)
# expansion parameter in the CDE minimum expenditure function #;

READ INCPAR FROM FILE PARAM_file HEADER "INCP";

COEFFICIENT (PARAMETER) (all,i,COMP_COMM)(all,r,REG)
    SUBPAR(i,r)
# the substitution parameter in the CDE minimum expenditure function #;

READ SUBPAR FROM FILE PARAM_file HEADER "SUBP";

COEFFICIENT (all,i,COMP_COMM)(all,r,REG)
    ALPHA(i,r)
# one minus the substitution parameter in CDE #;

FORMULA (all,i,COMP_COMM)(all,r,REG)
    ALPHA(i,r) = 1 - SUBPAR(i,r);

COEFFICIENT (all,i,COMP_COMM)(all,r,REG)
    VPAA(i,r)
# agent price value of private household expenditure of commodity i #;

!FORMULA (all,i,NF_TRAD_COMM)(all,r,REG)
    VPAA(i,r) = VPA(i,r);!                                      !Duy deleted, NF_TRAD_COMM is replaced with NF_TRAD_COM2!

FORMULA (all,i,NF_TRAD_COM2)(all,r,REG)
    VPAA(i,r) = VPA(i,r);                                       !Duy added, NF_TRAD_COMM is replaced with NF_TRAD_COM2!

FORMULA (all,i,ENER_COMM)(all,r,REG)
    VPAA(i,r)  = SUM(k,FUEL,VPA(k,r) );

FORMULA (all,i,ANIM_COMM)(all,r,REG)
    VPAA(i,r)  = SUM(k,ANIM_FOOD,VPA(k,r) );                    !Duy added, new!

FORMULA (all,i,STAPLE_COMM)(all,r,REG)
    VPAA(i,r)  = SUM(k,STAPLE,VPA(k,r) );                       !Duy added, new!

FORMULA (all,i,CROP_COMM)(all,r,REG)
    VPAA(i,r)  = SUM(k,CROP,VPA(k,r) );                         !Duy added, new!

FORMULA (all,i,PROC_COMM)(all,r,REG)
    VPAA(i,r)  = SUM(k,PROC_FOOD,VPA(k,r) );                    !Duy added, new!

COEFFICIENT (all,i,COMP_COMM)(all,r,REG)
    CONSHR(i,r)
# private household's budget share of commodity i in region r #;

FORMULA (all,i,COMP_COMM)(all,r,REG)
    CONSHR(i,r) = VPAA(i,r) / PRIVEXP(r);

Coefficient (all,i,COMP_COMM)(all,k,COMP_COMM)(all,r,REG)
    APE(i,k,r) # Allen partial elst.of sub between composite #;

Formula (all,i,COMP_COMM)(all,k,COMP_COMM)(all,r,REG)
    APE(i,k,r) = ALPHA(i,r) + ALPHA(k,r)
               - SUM(n,COMP_COMM, CONSHR(n,r) * ALPHA(n,r));

Formula (all,i,COMP_COMM)(all,r,REG)
    APE(i,i,r) = IF[CONSHR(i,r) > 0,
        2.0 * ALPHA(i,r) - SUM(n,COMP_COMM, CONSHR(n,r) * ALPHA(n,r))
      - ALPHA(i,r) / CONSHR(i,r)];

COEFFICIENT (all,r,REG)
    UELASPRIV(r)
    # elasticity of cost wrt utility from private consumption #;

FORMULA (all,r,REG)
    UELASPRIV(r) = SUM(i,COMP_COMM, CONSHR(i,r) * INCPAR(i,r));

COEFFICIENT (all,i,COMP_COMM)(all,r,REG)
    EY(i,r)
# income elasticity of household demand for composite good #;

FORMULA (all,i,COMP_COMM)(all,r,REG)
    EY(i,r)
        = [1.0 / SUM(m,COMP_COMM,CONSHR(m,r) * INCPAR(m,r))]
            * [INCPAR(i,r) * (1.0 - ALPHA(i,r))
                + SUM(m,COMP_COMM,CONSHR(m,r) * INCPAR(m,r) * ALPHA(m,r))]
        + (ALPHA(i,r) - SUM(m,COMP_COMM, CONSHR(m,r) * ALPHA(m,r)));

FORMULA (all,i,COMP_COMM) (all,r,REG:CONSHR(i,r) =0)
    EY(i,r)  = 0;

Coefficient (all,i,COMP_COMM)(all,k,COMP_COMM)(all,r,REG)
    EP(i,k,r)
    # uncomp cross-price elasticity #;

Formula (all,i,COMP_COMM)(all,k,COMP_COMM)(all,r,REG)
    EP(i,k,r) = 0;

Formula (all,i,COMP_COMM)(all,k,COMP_COMM)(all,r,REG)
    EP(i,k,r) = (APE(i,k,r) - EY(i,r)) * CONSHR(k,r);

ZERODIVIDE (zero_by_zero) OFF;

!-----------------------------------------------------------------------!
! 8 Energy input-output coefficients                                  !
!-----------------------------------------------------------------------!

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EIF_temp(i,j,r)
# energy consumption on imported good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EDF_temp(i,j,r)
# energy consumption on domestic good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EDP_temp(i,r)
# energy consumption of private household expenditure #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EIP_temp(i,r)
# energy consumption of private household expenditure #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EDG_temp(i,r)
# energy consumption of public expenditure on domestic good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EIG_temp(i,r)
# energy consumption of public expenditure on imported good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    EXI_temp(i,r,s)
# energy export from region r to destinatin s #;

COEFFICIENT (all,i,PriEner)(all,r,REG)
    TQE1(i,r)
# total energy consumption by source #;

COEFFICIENT (all,i,ENERGY)(all,j,USE)(all,r,REG)
    TQE2(i,j,r)
# total energy consumption by use #;

COEFFICIENT (all,i,ENERGY)(all,r,REG)
    TQE3(i,r)
# total energy consumption #;

READ EDF_temp FROM FILE SAM_file HEADER "EDF";
READ EIF_temp FROM FILE SAM_file HEADER "EIF";
READ EDP_temp FROM FILE SAM_file HEADER "EDP";
READ EIP_temp FROM FILE SAM_file HEADER "EIP";
READ EDG_temp FROM FILE SAM_file HEADER "EDG";
READ EIG_temp FROM FILE SAM_file HEADER "EIG";
READ EXI_temp FROM FILE SAM_file HEADER "EXI";
! TQE? are set by formula (initial) and are not required on the SAM_file.
  However, their updated values are written to the updated SAM_file if they
  are present on the input SAM_file. This writing of updated values to the
  updated SAM_file is used to place the initial values on the initial
  SAM_file via a dummy simulation in the data preparation routines. KJH 20191213
!
READ (IfHeaderExists) TQE1 FROM FILE SAM_file HEADER "TQE1";
READ (IfHeaderExists) TQE2 FROM FILE SAM_file HEADER "TQE2";
READ (IfHeaderExists) TQE3 FROM FILE SAM_file HEADER "TQE3";

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EDF_temp(i,j,r) = qfd(i,j,r);

UPDATE (all,i,NonEner)(all,j,PROD_COMM)(all,r,REG)
    EIF_temp(i,j,r) = qfm(i,j,r);

UPDATE (all,i,ENERGY_COMM)(all,j,PROD_COMM)(all,r,REG)
    EIF_temp(i,j,r) = qfm(i,j,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    EDP_temp(i,r) = qpd(i,r);

UPDATE (all,i,NonEner)(all,r,REG)
    EIP_temp(i,r) = qpm(i,r);

UPDATE (all,i,ENERGY_COMM)(all,r,REG)
    EIP_temp(i,r) = qpm(i,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)
    EDG_temp(i,r) = qgd(i,r);

UPDATE (all,i,NonEner)(all,r,REG)
    EIG_temp(i,r) = qgm(i,r);

UPDATE (all,i,ENERGY_COMM)(all,r,REG)
    EIG_temp(i,r) = qgm(i,r);

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    EXI_temp(i,r,s) = qxs(i,r,s);

UPDATE (all,i,PriEner)(all,r,REG)
    TQE1(i,r) = qec1(i,r);

UPDATE (all,i,ENERGY)(all,j,USE)(all,r,REG)
    TQE2(i,j,r) = qec2(i,j,r);

UPDATE (all,i,ENERGY)(all,r,REG)
    TQE3(i,r) = qec3(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EIF(i,j,r)
# energy consumption on imported good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EDF(i,j,r)
# energy consumption on domestic good i by industry #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EDP(i,r)
# energy consumption of private household expenditure #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EIP(i,r)
# energy consumption of private household expenditure #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EDG(i,r)
# energy consumption of public expenditure on domestic good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)
    EIG(i,r)
# energy consumption of public expenditure on imported good i #;

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    EXI(i,r,s)
# energy export from region r to destinatin s #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EIF(i,j,r) = IF(EIF_temp(i,j,r) > 0, EIF_temp(i,j,r));

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    EDF(i,j,r) = IF(EDF_temp(i,j,r) > 0, EDF_temp(i,j,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    EDP(i,r) = IF(EDP_temp(i,r) > 0, EDP_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    EIP(i,r) = IF(EIP_temp(i,r) > 0, EIP_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    EDG(i,r) = IF(EDG_temp(i,r) > 0, EDG_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)
    EIG(i,r) = IF(EIG_temp(i,r) > 0, EIG_temp(i,r));

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    EXI(i,r,s) = IF(EXI_temp(i,r,s) > 0, EXI_temp(i,r,s));

!-----------------------------------------------------------------------!
! 9 Greenhouse gases coefficients                                       !
!-----------------------------------------------------------------------!

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_OUTIND_(j,r,e)
# non_combustion emission of industry j #;

UPDATE (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_OUTIND_(j,r,e) = eo(j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DGOV_(i,r,e)
# emissions from public consumption of commodity i #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DGOV_(i,r,e) = egd(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MGOV_(i,r,e)
# emissions from public consumption of commodity i #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MGOV_(i,r,e) = egm(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DPRIV_(i,r,e)
# emissions from private consumption of commodity i #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DPRIV_(i,r,e) = epd(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MPRIV_(i,r,e)
# emissions from private consumption of commodity i #;

UPDATE (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MPRIV_(i,r,e) = epm(i,r,e);

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_END_(i,j,r,e)
# emissions from the use of input factor i by industry j #;

UPDATE (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_END_(i,j,r,e) =  efe(i,j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DINT_(i,j,r,e)
# emissions from the use of domestic commodity i by industry j #;

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DINT_(i,j,r,e) = efd(i,j,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MINT_(i,j,r,e)
# emissions from the use of imported commodity i by industry j #;

UPDATE (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MINT_(i,j,r,e) =  efm(i,j,r,e);

READ EMIS_OUTIND_ FROM FILE EMIS_file HEADER "EOUT";

READ EMIS_DGOV_ FROM FILE EMIS_file HEADER "DEGV";
READ EMIS_DPRIV_ FROM FILE EMIS_file HEADER "DEPR";
READ EMIS_DINT_ FROM FILE EMIS_file HEADER "DEIN";

READ EMIS_MGOV_ FROM FILE EMIS_file HEADER "MEGV";
READ EMIS_MPRIV_ FROM FILE EMIS_file HEADER "MEPR";
READ EMIS_MINT_ FROM FILE EMIS_file HEADER "MEIN";

READ EMIS_END_ FROM FILE EMIS_file HEADER "EEIN";

COEFFICIENT (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_OUTIND(j,r,e)
# non_combustion emission of industry j #;

FORMULA (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_OUTIND(j,r,e)
        = IF(EMIS_OUTIND_(j,r,e) > 0, EMIS_OUTIND_(j,r,e));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DGOV(i,r,e)
# emissions from public consumption of commodity i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DGOV(i,r,e) = IF(EMIS_DGOV_(i,r,e) > 0, EMIS_DGOV_(i,r,e));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MGOV(i,r,e)
# emissions from public consumption of commodity i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MGOV(i,r,e) = IF(EMIS_MGOV_(i,r,e) > 0, EMIS_MGOV_(i,r,e));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DPRIV(i,r,e)
# emissions from private consumption of commodity i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DPRIV(i,r,e) = IF(EMIS_DPRIV_(i,r,e) > 0, EMIS_DPRIV_(i,r,e));

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MPRIV(i,r,e)
# emissions from private consumption of commodity i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MPRIV(i,r,e) = IF(EMIS_MPRIV_(i,r,e) > 0, EMIS_MPRIV_(i,r,e));

COEFFICIENT (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_END(i,j,r,e)
# emissions from the use of input factor i by industry j #;

FORMULA (all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_END(i,j,r,e) = IF(EMIS_END_(i,j,r,e) > 0, EMIS_END_(i,j,r,e));

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DINT(i,j,r,e)
# emissions from the use of domestic commodity i by industry j #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_DINT(i,j,r,e) = IF(EMIS_DINT_(i,j,r,e) > 0, EMIS_DINT_(i,j,r,e));

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MINT(i,j,r,e)
# emissions from the use of imported commodity i by industry j #;

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_MINT(i,j,r,e) = IF(EMIS_MINT_(i,j,r,e) > 0, EMIS_MINT_(i,j,r,e));

! emissions from technologies !

COEFFICIENT
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    EMIS_DINT_TB(i,k,j,r,e)
# emissions from the use of domestic commodity i by industry j #;

UPDATE
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    EMIS_DINT_TB(i,k,j,r,e) = efd_tech(i,k,j,r,e);

COEFFICIENT
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    EMIS_MINT_TB(i,k,j,r,e)
# emissions from the use of imported commodity i by industry j #;

UPDATE
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,k,TECH)(all,r,REG)(all,e,GHG)
    EMIS_MINT_TB(i,k,j,r,e) = efm_tech(i,k,j,r,e);

READ EMIS_DINT_TB FROM FILE EMIS_file HEADER "DETB";
READ EMIS_MINT_TB FROM FILE EMIS_file HEADER "METB";

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_PRIV(i,r,e)
# emissions from private consumption of commodity i #;

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_PRIV(i,r,e)
        = EMIS_MPRIV(i,r,e) + EMIS_DPRIV(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_GOV(i,r,e);

FORMULA (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_GOV(i,r,e)
        = EMIS_DGOV(i,r,e) + EMIS_MGOV(i,r,e);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    EMIS_INT(i,j,r,e);

FORMULA (all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)(all,e,GHG)
    EMIS_INT(i,j,r,e)
        = EMIS_MINT(i,j,r,e) + EMIS_DINT(i,j,r,e);

FORMULA (all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    EMIS_INT(i,j,r,e)
        = SUM(t,TECH,EMIS_MINT_TB(i,t,j,r,e) + EMIS_DINT_TB(i,t,j,r,e));

COEFFICIENT (all,r,REG)
    EMIS_LUCF(r)
# LUCF emissions #;

READ EMIS_LUCF FROM FILE EMIS_file HEADER "LUCF";

UPDATE(change) (all,r,REG)
    EMIS_LUCF(r) = ch_EMIS_LUCF(r);

COEFFICIENT (all,e,GHG)(all,i,EMIS_SOURCE)(all,j,EMIS_OUTLET)(all,r,REG)
    L_ALL_EMIS(e,i,j,r);

READ L_ALL_EMIS FROM FILE EMIS_file HEADER "EMIS";

UPDATE (all,e,GHG)(all,i,EMIS_SOURCE)(all,j,EMIS_OUTLET)(all,r,REG)
    L_ALL_EMIS(e,i,j,r) = p_ALL_EMIS(e,i,j,r);

COEFFICIENT (all,e,GHG)(all,i,EMIS_SOURCE)(all,j,EMIS_OUTLET)(all,r,REG)
    NAT_ALL_EMIS(e,i,j,r) # Emissions in natural units #;

READ NAT_ALL_EMIS FROM FILE EMIS_file HEADER "ENAT";

COEFFICIENT (all,r,REG) (all,e, GHG)
    L_TAX_EMIS(r,e)
# quantity of taxable emissions in region r #;

FORMULA (all,r,REG) (all,e,GHG)
    L_TAX_EMIS(r,e)
        = SUM(i,ENDW_COMM,SUM(j,PROD_COMM,
            [1 - IMPUTE2(j,e,r)] * EMIS_END(i,j,r,e)))
        + SUM(i,TRAD_COMM,SUM(j,NTECH_IND,
            [1 - IMPUTE1(i,j,e,r)] * [EMIS_DINT(i,j,r,e) + EMIS_MINT(i,j,r,e)]))
        + SUM(i,TRAD_COMM,SUM(t,TECH,SUM(j,TECH_IND,
            [EMIS_DINT_TB(i,t,j,r,e) + EMIS_MINT_TB(i,t,j,r,e)])))
        + SUM(j,PROD_COMM,
            [1 - IMPUTE2(j,e,r)] * EMIS_OUTIND(j,r,e))
        + SUM(i,TRAD_COMM,
            [1 - IMPUTE3(i,e,r)] * [EMIS_DGOV(i,r,e) + EMIS_MGOV(i,r,e)
                + EMIS_DPRIV(i,r,e) + EMIS_MPRIV(i,r,e)]);

COEFFICIENT (PARAMETER)(all,r,REG)(all,b,BLOCK)(all,e,GHG)
    BLK_PAR(r,b,e);
! BLK_PAR(r,b,e) = 1 if region r is a member of BLOCK b of emission e!

READ BLK_PAR FROM FILE EMIS_file HEADER "BPAR";

! carbon prices at different levels !

COEFFICIENT (all,e,GHG)
    L_GCTAX(e)
# global carbon price #;

READ L_GCTAX from FILE EMIS_file HEADER "GCTX";

UPDATE (change) (all,e,GHG)
    L_GCTAX(e) = gctax(e);

COEFFICIENT (all,e,GHG)
    LAST_GCTAX(e)
# global carbon tax applied in the last period #;

FORMULA (INITIAL) (all,e,GHG)
    LAST_GCTAX(e) = L_GCTAX(e);

COEFFICIENT (all,b,BLOCK)(all,e,GHG)
    L_BCTAX(b,e)
# BLOCK-specific carbon price #;

READ L_BCTAX FROM FILE EMIS_file HEADER "BCTX";

UPDATE (change) (all,b,BLOCK)(all,e,GHG)
    L_BCTAX(b,e) = bctax(b,e);

COEFFICIENT (all,b,BLOCK)(all,e,GHG)
    LAST_BCTAX(b,e)
# global carbon tax applied in the last period #;

FORMULA (INITIAL) (all,b,BLOCK)(all,e,GHG)
    LAST_BCTAX(b,e) = L_BCTAX(b,e);

COEFFICIENT (all,r,REG)(all,e,GHG)
    L_RCTAX(r,e)
# implied regional carbon price #;

FORMULA (INITIAL) (all,r,REG)(all,e,GHG)
    L_RCTAX(r,e)
        = SUM(b,BLOCK,BLK_PAR(r,b,e) * L_BCTAX(b,e)) + L_GCTAX(e);

UPDATE (change) (all,r,REG)(all,e,GHG)
    L_RCTAX(r,e) = rctax(r,e);

COEFFICIENT (all,r,REG)(all,e,GHG)
    REL_CTAX(r,e)
# relative magnitudes of different region's carbon price #;

UPDATE (change) (all,r,REG)(all,e,GHG)
    REL_CTAX(r,e) = c_rel_ctax(r,e);

READ REL_CTAX FROM FILE EMIS_file HEADER "RELC";

COEFFICIENT (all,r,REG)(all,e,GHG)
    L_ECTAX(r,e)
# effective regional carbon price #;

READ L_ECTAX FROM FILE EMIS_file HEADER "ECTX";

UPDATE (change) (all,r,REG)(all,e,GHG)
    L_ECTAX(r,e) = ectax(r,e);

COEFFICIENT (all,r,REG)(all,e,GHG)
    LAST_ECTAX(r,e)
# carbon tax in the last period #;

FORMULA(INITIAL) (all,r,REG)(all,e,GHG)
    LAST_ECTAX(r,e) = L_ECTAX(r,e);

COEFFICIENT (all,r,REG)(all,e,GHG)
    ETOT(r,e)
# emissions target of a region #;

READ ETOT from file EMIS_file header "ETOT";

UPDATE (all,r,REG)(all,e,GHG)
    ETOT(r,e) = p_ETOT(r,e);

COEFFICIENT (all,r,REG)(all,e,GHG)
    ENET(r,e)
# net emissions of a region, exclusive of neg emis techs #;

READ ENET from file EMIS_file header "ENET";

UPDATE (all,r,REG)(all,e,GHG)
    ENET(r,e) = p_ENET(r,e);

COEFFICIENT (all,r,REG)(all,s,BLOCK)(all,e,GHG)
    EQUO(r,s,e)
# emissions quota given to a region in a trading block #;

READ EQUO from file EMIS_file header "EQUO";

UPDATE(change) (all,r,REG)(all,b,BLOCK)(all,e,GHG)
    EQUO(r,b,e) = ch_EQUO(r,b,e);

COEFFICIENT (all,r,REG)(all,b,BLOCK)(all,e,GHG)
    EQUO_SALES(r,b,e)
# sales of emissions quota #;

FORMULA (all,r,REG)(all,b,BLOCK)(all,e,GHG)
    EQUO_SALES(r,b,e)
        = BLK_PAR(r,b,e) * (EQUO(r,b,e) - ENET(r,e));

COEFFICIENT (PARAMETER) (all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    CEL1(j,r,e)
# elasticity of price-induced process-based emission intensity improv. #;

READ CEL1 FROM FILE PARAM_file HEADER "CELO";

COEFFICIENT (PARAMETER)
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    CEL2(i,j,r,e)
# elasticity of price-induced input-based emission intensity improv. #;

READ CEL2 FROM FILE PARAM_file HEADER "CELF";

COEFFICIENT  (all,i,TECH)(all,j,TECH_IND)(all,r,REG)
    CTAX_FLAG(i,j,r)
#an indicator COEFFICIENT of significant CTAX to trigger CCT#;

FORMULA  (all,i,TECH)(all,j,TECH_IND)(all,r,REG)
    CTAX_FLAG(i,j,r) = 1;

![[!
FORMULA (all,i,CCS_ELY)(all,j,ELY)(all,r,REG)
    CTAX_FLAG(i,j,r)
        = IF(LAST_ECTAX(r,"CO2") < CCS_TAX(i), 0)
        + IF(LAST_ECTAX(r,"CO2") GE CCS_TAX(i), 1);
!]]!

FORMULA (all,i,CCS_ELY)(all,j,ELY)(all,r,REG)
    CTAX_FLAG(i,j,r)
        = IF(L_ECTAX(r,"CO2") < CCS_TAX(i), 0)
        + IF(L_ECTAX(r,"CO2") GE CCS_TAX(i), 1);

!-----------------------------------------------------------------------!
! 10 Global IO tables                                                   !
!-----------------------------------------------------------------------!

COEFFICIENT (all,s,REG)(all,n,REG)
    MAT_REG(s,n);

FORMULA (all,s,REG)(all,n,REG)
    MAT_REG(s,n) = 0;

FORMULA (all,s,REG)
    MAT_REG(s,s) = 1;

COEFFICIENT (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    QTIM(i,s,n);

FORMULA (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    QTIM(i,s,n) = SUM(j,PROD_COMM,QIFM(i,j,n)) + QIPM(i,n) + QIGM(i,n);

COEFFICIENT (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    Q_NORM(i,s,n);

FORMULA (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    Q_NORM(i,s,n)
        = IF(QXWD(i,s,n) / QTIM(i,s,n) > 0
            and QTIM(i,s,n) > 0 and QXWD(i,s,n) > 0,
                QXWD(i,s,n) / QTIM(i,s,n));

ZERODIVIDE (zero_by_zero) DEFAULT 0;

COEFFICIENT (all,i,TRAD_COMM)(all,n,REG)
    ETIM(i,n);

FORMULA (all,i,TRAD_COMM)(all,n,REG)
    ETIM(i,n) = SUM(j,PROD_COMM,EIF(i,j,n)) + EIP(i,n) + EIG(i,n);

COEFFICIENT (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    ENER_NORM(i,s,n);

FORMULA (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    ENER_NORM(i,s,n)
        = IF(EXI(i,s,n) > 0,
                EXI(i,s,n) / ID01[ETIM(i,n)]);

COEFFICIENT (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    GHG_NORM(i,s,n);

FORMULA (all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    GHG_NORM(i,s,n)
        = IF(QXWD(i,s,n) > 0,
                QXWD(i,s,n) / ID01[SUM(t,REG,QXWD(i,t,n))]);

ZERODIVIDE (zero_by_zero) OFF;

![[!
! global IO table of products !

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    GLOB_IO_temp(i,j,s,n);

READ GLOB_IO_temp FROM FILE SAM_file HEADER "QGIO";

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    GLOB_IO(i,j,s,n);

FORMULA (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    GLOB_IO(i,j,s,n)
        = IF(GLOB_IO_temp(i,j,s,n) > 0, GLOB_IO_temp(i,j,s,n));

UPDATE (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    GLOB_IO_temp(i,j,s,n) = qgio(i,j,s,n);

! global IO table of energy !

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    ENER_IO_temp(i,j,s,n);

READ ENER_IO_temp FROM FILE SAM_file HEADER "EGIO";

UPDATE (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    ENER_IO_temp(i,j,s,n) = eio(i,j,s,n);

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    ENER_IO(i,j,s,n);

FORMULA (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    ENER_IO(i,j,s,n)
        = IF(ENER_IO_temp(i,j,s,n) > 0, ENER_IO_temp(i,j,s,n));

! global IO table of direct emissions !

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    GHG_IO_temp(i,j,s,n,e);

READ GHG_IO_temp FROM FILE EMIS_file HEADER "GGIO";

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    GHG_IO(i,j,s,n,e);

FORMULA
(all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    GHG_IO(i,j,s,n,e)
       = IF(GHG_IO_temp(i,j,s,n,e) > 0, GHG_IO_temp(i,j,s,n,e));

UPDATE (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    GHG_IO_temp(i,j,s,n,e) = ghgio(i,j,s,n,e);
!]]!

![[! Removed. Not used. KJH 20191213
COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    GLOB_IO(i,j,s,n);

READ GLOB_IO FROM FILE SAM_file HEADER "QGIO";

UPDATE (all, i, TRAD_COMM)(all, j, USE)(all, s, REG)(all, n, REG)
    GLOB_IO(i, j, s, n) = qgio(i, j, s, n);

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    ENER_IO(i,j,s,n);

READ ENER_IO FROM FILE SAM_file HEADER "EGIO";

UPDATE (all, i, TRAD_COMM)(all, j, USE)(all, s, REG)(all, n, REG)
    ENER_IO(i, j, s, n) = eio(i, j, s, n);

COEFFICIENT (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    GHG_IO(i,j,s,n,e);

READ GHG_IO FROM FILE EMIS_file HEADER "GGIO";

UPDATE (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    GHG_IO(i, j, s, n, e) = ghgio(i, j, s, n, e);
!]]!
!-----------------------------------------------------------------------!
! 11. Negative emission technologies                                    !
!-----------------------------------------------------------------------!

COEFFICIENT (all,m,NEMT)(all,r,REG)
    VOAT(m,r)
# output of each negative emission technology, billion US$ #;

READ VOAT FROM FILE SAM_file HEADER "VOAT";

UPDATE (all,m,NEMT)(all,r,REG)
    VOAT(m,r) = q_VOAT(m,r) * p_VOAT(m,r);

COEFFICIENT (all,m,NEMT)(all,r,REG)
    PNEM(m,r)
# average unit price of the negative emission technologies #;

READ PNEM FROM FILE SAM_file HEADER "PNEM";

UPDATE (all,m,NEMT)(all,r,REG)
    PNEM(m,r) = p_VOAT(m,r);

! Coefficient NEMS moved and made a levels variable. Derive its initial value from
  VOAT and PNEM rather than read it from file. KJH 03Nov2018 !

VARIABLE (LEVELS,LINEAR_VAR=p_NEMS)(all,m,NEMT)(all,r,REG)
    NEMS(m,r)
# sequestration of each negative emission technology, mil. tons of CO2-e #;

FORMULA (INITIAL)(all,m,NEMT)(all,r,REG)
    NEMS(m,r) = VOAT(m,r)/(PNEM(m,r)/1000);

COEFFICIENT (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    EVAM(i,m,r)
# factor inputs of NE technology at market price, mil. tons of CO2-e #;

READ EVAM FROM FILE SAM_file HEADER "EVAM";

UPDATE (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    EVAM(i,m,r) = q_EVA(i,m,r) * pm(i,r);

COEFFICIENT (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    EVAA(i,m,r)
# factor inputs of NE technology at agent's price, mil. tons of CO2-e #;

READ EVAA FROM FILE SAM_file HEADER "EVAA";

UPDATE (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    EVAA(i,m,r) = q_EVA(i,m,r) * pm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VDAM(i,m,r)
# inputs of domestic goods of NE technology at market price, bil. US$ #;

READ VDAM FROM FILE SAM_file HEADER "VDAM";

UPDATE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VDAM(i,m,r) = q_VDA(i,m,r) * pm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VDAA(i,m,r)
# inputs of domestic goods of NE technology at agent's price, bil. US$ #;

READ VDAA FROM FILE SAM_file HEADER "VDAA";

UPDATE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VDAA(i,m,r) = q_VDA(i,m,r) * pm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VIAM(i,m,r)
# inputs of imported goods of NE technology at market price, bil. US$ #;

READ VIAM FROM FILE SAM_file HEADER "VIAM";

UPDATE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VIAM(i,m,r) = q_VIA(i,m,r) * pm(i,r);

COEFFICIENT (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VIAA(i,m,r)
# inputs of imported goods of NE technology at agent's price, bil. US$ #;

READ VIAA FROM FILE SAM_file HEADER "VIAA";

UPDATE (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    VIAA(i,m,r) = q_VIA(i,m,r) * pm(i,r);

COEFFICIENT (PARAMETER) (all,m,NEMT)(all,r,REG)
    NEON(m,r)
# 1 if region r is developing neg emis tech m #;

READ NEON FROM FILE PARAM_file HEADER "NEON";


!***********************************************************************!
! EQUATIONS                                                             !
!***********************************************************************!

! Population !

EQUATION E_pop # percentage change in population #
(all,r,REG)
    pop(r) = f_pop(r);

! Capital acumulation and national income!

EQUATION E_qk #change in capital stocks #
(all,r,REG)
    ID01[VKB(r)] * qk(r) = 100 * NETINV(r) * time + VKB(r) * f_kb(r);

EQUATION E_yfull # change in NNI #
(all,r,REG)
    ID01[REGNNI(r)] * yfull(r)
        = SUM(i,ENDW_COMM,VOA(i,r) * (ps(i,r) + qo(i,r))) ! value-added !
        - VDEP(r) * (pcgds(r) + qk(r)) ! depreciation !
        + 100 * c_tottaxrev(r) ! tax revenues !
        - 100 * c_fy(r) ! less debt payment !
        + 100 * equo_inc(r) ! tradable quota revenue !
        + SUM(j,PROD_COMM,VOA(j,r) * profitslack(j,r))
        ! put aside a budget for sequestration by Neg Emis techs !
        - SUM(m,NEMT,VOAT(m,r) * (q_VOAT(m,r) + p_VOAT(m,r)));

EQUATION e_c_tottaxrev
(all,r,REG)
    100*c_tottaxrev(r)
        = SUM(i,NSAV_COMM,
            VOM(i,r) * (pm(i,r) + qo(i,r))
                - VOA(i,r)  * (ps(i,r)  + qo(i,r)) )
        + SUM(i,ENDWM_COMM, SUM(j,NTECH_IND,
            EVFA(i,j,r) * (pfe(i,j,r) + qf(i,j,r))
                - EVFM(i,j,r) * (pm(i,r) + qf(i,j,r)) ))
        + SUM(i,ENDWM_COMM, SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
                EVTA(i,t,j,r) * (pft(i,t,j,r) + qft(i,t,j,r))
                    - EVTM(i,t,j,r) * (pft(i,t,j,r) + qft(i,t,j,r)) ))
          + IF(TECH_FLAG(i,j,r) = 0,
                EVFA(i,j,r) * (pfe(i,j,r) + qf(i,j,r))
                    - EVFM(i,j,r) * (pm(i,r) + qf(i,j,r)) )))
        + SUM(i,ENDWS_COMM, SUM(j,NTECH_IND,
            EVFA(i,j,r) * (pfe(i,j,r)  + qf(i,j,r))
                - EVFM(i,j,r) * (pmes(i,j,r) + qf(i,j,r))))
        + SUM(i,ENDWS_COMM, SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
                EVTA(i,t,j,r) * (pft(i,t,j,r) + qft(i,t,j,r))
                    - EVTM(i,t,j,r) * (pft(i,t,j,r) + qft(i,t,j,r)) ))
          + IF(TECH_FLAG(i,j,r) = 0,
                EVFA(i,j,r) * (pfe(i,j,r)  + qf(i,j,r))
                    - EVFM(i,j,r) * (pmes(i,j,r) + qf(i,j,r))) ))
        + SUM(i,TRAD_COMM, SUM(j,NTECH_IND,
            VIFA(i,j,r) * (pfm(i,j,r) + qfm(i,j,r))
                - VIFM(i,j,r) * (pimp(i,r) + qfm(i,j,r))
          + VDFA(i,j,r) * (pfd(i,j,r) + qfd(i,j,r))
                - VDFM(i,j,r) * (pm(i,r) + qfd(i,j,r))))
        + SUM(i,TRAD_COMM, SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
                VITA(i,t,j,r) * (pftm(i,t,j,r) + qftm(i,t,j,r))
                    - VITM(i,t,j,r) * (pimp(i,r) + qftm(i,t,j,r))
              + VDTA(i,t,j,r) * (pftd(i,t,j,r) + qftd(i,t,j,r))
                    - VDTM(i,t,j,r) * (pm(i,r) + qftd(i,t,j,r))))
          + IF(TECH_FLAG(i,j,r) = 0,
                VIFA(i,j,r) * (pfm(i,j,r) + qfm(i,j,r))
                    - VIFM(i,j,r) * (pimp(i,r) + qfm(i,j,r))
              + VDFA(i,j,r) * (pfd(i,j,r) + qfd(i,j,r))
                    - VDFM(i,j,r) * (pm(i,r) + qfd(i,j,r)))))
        + SUM(i,TRAD_COMM,
            VIGA(i,r) * (pgm(i,r) + qgm(i,r))
                - VIGM(i,r) * (pimp(i,r) + qgm(i,r))
          + VDGA(i,r) * (pgd(i,r) + qgd(i,r))
                - VDGM(i,r) * (pm(i,r)  + qgd(i,r))
          + VIPA(i,r) *(ppm(i,r) + qpm(i,r))
                - VIPM(i,r) * (pimp(i,r) + qpm(i,r))
          + VDPA(i,r) * (ppd(i,r) + qpd(i,r))
                - VDPM(i,r) * (pm(i,r) + qpd(i,r)))
        + SUM(i,TRAD_COMM,SUM(s,REG,
            VXWD(i,r,s) * (pfob(i,r,s) + qxs(i,r,s))
                - VXMD(i,r,s) * (pm(i,r) + qxs(i,r,s))))
        + SUM(i,TRAD_COMM,SUM(s,REG,
            VIMS(i,s,r) * (pms(i,s,r) + qxs(i,s,r))
                - VIWS(i,s,r) * (pcif(i,s,r) + qxs(i,s,r))));

! Regional Household Demand System: Engle's Law !

Coefficient (all,i,COMP_COMM)(all,r,REG)
    XWCONSHR(i,r)
    # expansion-parameter-weighted consumption share #;
Formula (all,i,COMP_COMM)(all,r,REG)
    XWCONSHR(i,r) = CONSHR(i,r) * INCPAR(i,r) / UELASPRIV(r);

Equation UTILELASPRIV
# elasticity of expenditure wrt utility from private consumption #
(all,r,REG)
    uepriv(r)
        = SUM(i,COMP_COMM, XWCONSHR(i,r) * [ppa(i,r) + qpa(i,r) - yp(r)]);

Variable (all,r,REG)
    dpav(r) # average distribution parameter shift, for EV calc. #;

Equation DPARAV
# average distribution parameter shift #
(all,r,REG)
    dpav(r)
        = XSHRPRIV(r) * dppriv(r)
        + XSHRGOV(r) * dpgov(r)
        + XSHRSAVE(r) * dpsave(r);

Equation UTILITELASTIC
# elasticity of cost of utility wrt utility #
(all,r,REG)
    uelas(r) = XSHRPRIV(r) * uepriv(r) - dpav(r);

Equation PRIVCONSEXP
# private consumption expenditure #
(all,r,REG)
    yp(r) - yfull(r) = -[uepriv(r) - uelas(r)] + dppriv(r);

Equation GOVCONSEXP
# government consumption expenditure #
(all,r,REG)
    yg(r) - yfull(r) = uelas(r) + dpgov(r);

Equation SAVING
# saving #
(all,r,REG)
    ys(r) - yfull(r) = uelas(r) + dpsave(r);

! private consumption !



!
................Old structure....................

                            Private consumption
                                    /  \
                           CDE   /       \
                              /            \
                    Energy composite       non-ener
                     /\   \      \             /\  CES
               CES /  \    \      \           /  \
                 /    \     \      \        Dom  Imp
              Coal   Gas  Petrol   Elec
               /\
         CES  /  \
             /    \
           Dom   IMP
                  /\
             CES /  \
                /    \
           Source1   Source n



....................New structure.........................

                                        Private consumption
          ---------------------------------------------------------------------------------------------------------------------------
     CDE  |                           |                  |                         |                        |                       |
          |                           |                  |                         |                        |                       |
    Animal sourced foods           staples          Other crops               Processed food                Energy                 Others
          |                           |                  |                         |                        |
          |   CES                     |   CES            |   CES                   |  CES                   | CRESH
          |                           |                  |                         |                        |
   (Dairy_milk, raw_milk,      (other grains,     (Veg_fruit, cane_beet,      (sugar, oil_seeds,         (electricity, coal,
    meat_cattle, meat_pork,        rice, wheat)   fibres_crop, Other crops)    veg_oils, proc_rice,          gas, petroleum)
    meat_poultry, fishery)                                                     beve_tobacco, oth_foods)

!
EQUATION E_qpcons
# cpi-based real regional household consumption #
(all,r,REG)
    qpcons(r) = yp(r) - cpi(r);

EQUATION E_qpa
# Private household demands for composite commodities #
(all,i,COMP_COMM)(all,r,REG)                                                  !COMP_COMM is new, Duy modified!
    qpa(i,r)
        = SUM(k,COMP_COMM,EP(i,k,r) * ppa(k,r))
        + EY(i,r) * [yp(r) - pop(r)]
        + pop(r);

!EQUATION E_qp_NF_TRAD_COMM
# Private household demands for fuel commodities irrespective of sources #
(all,i,NF_TRAD_COMM)(all,r,REG)
    qp(i,r) = qpa(i,r) + demd_shift(i,r);!                                  !Duy deleted, replace with the equation below!

EQUATION E_qp_NF_TRAD_COM2
# Private household demands for non-fuel commodities and non-agri-food commodities irrespective of sources #
(all,i,NF_TRAD_COM2)(all,r,REG)
    qp(i,r) = qpa(i,r) + demd_shift(i,r);                                    !Duy added (new), NF_TRAD_COMM becomes NF_TRAD_COM2!

EQUATION E_qp_fuel
# Private household demands for fuel commodities irrespective of sources #
(all,i,FUEL)(all,r,REG)
    qp(i,r)
        = SUM(j,ENER_COMM, qpa(j,r) - fuel_economy(i,r)
        - SIGH_FUEL(i,r) * [pp(i,r) - ppa_star(j,r) - fuel_economy(i,r)])
        + demd_shift(i,r) - adj_fuel_p(r);

EQUATION E_qp_ANIM_FOOD
# Private household demands for animal sourced food commodities irrespective of sources #
(all,i,ANIM_FOOD)(all,r,REG)
    qp(i,r)
        = SUM(j,ANIM_COMM, qpa(j,r))
        - SIGH_ANIM(i,r) * [pp(i,r) - SUM(j,ANIM_COMM,ppa_star1(j,r)) + anim_economy(i,r)]
        - anim_economy(i,r);                                  !Duy added, new!

EQUATION E_qp_STAPLE
# Private household demands for staple commodities irrespective of sources #
(all,i,STAPLE)(all,r,REG)
    qp(i,r)
        = SUM(j,STAPLE_COMM, qpa(j,r))
        - SIGH_STAP(i,r) * [pp(i,r) - SUM(j,STAPLE_COMM,ppa_star2(j,r)) - stap_economy(i,r)]
        - stap_economy(i,r);                                  !Duy added, new!

EQUATION E_qp_CROP
# Private household demands for other crop commodities irrespective of sources #
(all,i,CROP)(all,r,REG)
    qp(i,r)
        = SUM(j,CROP_COMM, qpa(j,r))
        - SIGH_CROP(i,r) * [pp(i,r) - SUM(j,CROP_COMM,ppa_star3(j,r)) - crop_economy(i,r)]
        - crop_economy(i,r);                                  !Duy added, new!

EQUATION E_qp_PROC_FOOD
# Private household demands for processed food commodities irrespective of sources #
(all,i,PROC_FOOD)(all,r,REG)
    qp(i,r)
        = SUM(j,PROC_COMM, qpa(j,r))
        - SIGH_PROC(i,r) * [pp(i,r) - SUM(j,PROC_COMM,ppa_star4(j,r)) - proc_economy(i,r)]
        - proc_economy(i,r);                                  !Duy added, new!

EQUATION E_adj_fuel_p
# adjustment for private household demands for fuel #
(all,r,REG)
    ID01[SUM(i,FUEL,VPA(i,r))] * adj_fuel_p(r)
        =  SUM(i,FUEL,VPA(i,r) * demd_shift(i,r)) + adj_on_p(r);

EQUATION E_qpd
# Private household demand for domestic goods. #
(all,i,TRAD_COMM)(all,r,REG)
    qpd(i,r)
        = IF(VDPA(i,r) > TINY,
            qp(i,r) + ESUBD(i,r) * [pp(i,r) - ppd(i,r)]
                - [VIPA(i,r) / ID01(VPA(i,r))] * f_qimp(i,r));

EQUATION E_qpm
# Private household demand for aggregate imports. #
(all,i,TRAD_COMM)(all,r,REG)
    qpm(i,r)
        = IF(VIPA(i,r) > TINY,
            qp(i,r) + ESUBD(i,r) * [pp(i,r) - ppm(i,r)]
                + [VDPA(i,r) / ID01(VPA(i,r))] * f_qimp(i,r));

EQUATION E_ppd
# This EQUATION links domestic market and private household prices #
(all,i,TRAD_COMM)(all,r,REG)
    ppd(i,r) = pm(i,r) + tpd(i,r);

EQUATION E_ppm
# Private household price for composite imports. #
(all,i,TRAD_COMM)(all,r,REG)
    ppm(i,r) = pimp(i,r) + tpm(i,r);

EQUATION E_pp
# Private household price for domestic-imported composite commodities #
(all,i,TRAD_COMM)(all,r,REG)
    ID01[VPA(i,r)] * pp(i,r)
        = VIPA(i,r) * ppm(i,r) + VDPA(i,r) * ppd(i,r);

!EQUATION E_ppa_NF_TRAD_COMM
# consumer's price for non-fuel goods #
(all,i,NF_TRAD_COMM)(all,r,REG)
    ppa(i,r) = pp(i,r);!                                                    !Duy deleted!

EQUATION E_ppa_NF_TRAD_COM2
# consumer's price for non-fuel goods #
(all,i,NF_TRAD_COM2)(all,r,REG)
    ppa(i,r) = pp(i,r);                                                     !Duy added (new, NF_TRAD_COMM is replaced with NF_TRAD_COM2!

EQUATION E_ppa_energy
# consumer's price for fuel goods #
(all,i,ENER_COMM)(all,r,REG)
    ID01[SUM(j,FUEL,VPA(j,r))] * (ppa(i,r) + qpa(i,r))
        = SUM[k,FUEL,VPA(k,r) * (pp(k,r) + qp(k,r))];

EQUATION E_ppa_anim
# consumer's price for animal sourced food goods #
(all,i,ANIM_COMM)(all,r,REG)
    ID01[SUM(j,ANIM_FOOD,VPA(j,r))] * (ppa(i,r) + qpa(i,r))
        = SUM[k,ANIM_FOOD,VPA(k,r) * (pp(k,r) + qp(k,r))];                 !Duy added, new!

EQUATION E_ppa_stap
# consumer's price for staple goods #
(all,i,STAPLE_COMM)(all,r,REG)
    ID01[SUM(j,STAPLE,VPA(j,r))] * (ppa(i,r) + qpa(i,r))
        = SUM[k,STAPLE,VPA(k,r) * (pp(k,r) + qp(k,r))];                    !Duy added, new!

EQUATION E_ppa_crop
# consumer's price for animal sourced food goods #
(all,i,CROP_COMM)(all,r,REG)
    ID01[SUM(j,CROP,VPA(j,r))] * (ppa(i,r) + qpa(i,r))
        = SUM[k,CROP,VPA(k,r) * (pp(k,r) + qp(k,r))];                      !Duy added, new!

EQUATION E_ppa_proc
# consumer's price for animal sourced food goods #
(all,i,PROC_COMM)(all,r,REG)
    ID01[SUM(j,PROC_FOOD,VPA(j,r))] * (ppa(i,r) + qpa(i,r))
        = SUM[k,PROC_FOOD,VPA(k,r) * (pp(k,r) + qp(k,r))];                 !Duy added, new!

EQUATION E_ppa_star
# consumer's star-price for fuel goods, as per CRESH function #
(all,i,ENER_COMM)(all,r,REG)
    ppa_star(i,r)
        = SUM(k,FUEL,SIGH_FUEL(k,r) * VPA(k,r)
            / ID01[SUM(j,FUEL,SIGH_FUEL(j,r) * VPA(j,r))]
                * (pp(k,r) - fuel_economy(k,r)));

EQUATION E_ppa_star1
# consumer's star-price for animal sourced food goods #
(all,i,ANIM_COMM)(all,r,REG)
    ppa_star1(i,r)
        = SUM(k,ANIM_FOOD, VPA(k,r)
            / ID01[SUM(j,ANIM_FOOD, VPA(j,r))]
                * (pp(k,r) - anim_economy(k,r)));                          !Duy added, new!

EQUATION E_ppa_star2
# consumer's star-price for staple goods #
(all,i,STAPLE_COMM)(all,r,REG)
    ppa_star2(i,r)
        = SUM(k,STAPLE, VPA(k,r)
            / ID01[SUM(j,STAPLE, VPA(j,r))]
                * (pp(k,r) - stap_economy(k,r)));                          !Duy added, new!

EQUATION E_ppa_star3
# consumer's star-price for crop goods #
(all,i,CROP_COMM)(all,r,REG)
    ppa_star3(i,r)
        = SUM(k,CROP, VPA(k,r)
            / ID01[SUM(j,CROP, VPA(j,r))]
                * (pp(k,r) - crop_economy(k,r)));                          !Duy added, new!

EQUATION E_ppa_star4
# consumer's star-price for crop goods #
(all,i,PROC_COMM)(all,r,REG)
    ppa_star4(i,r)
        = SUM(k,PROC_FOOD, VPA(k,r)
            / ID01[SUM(j,PROC_FOOD, VPA(j,r))]
                * (pp(k,r) - proc_economy(k,r)));                          !Duy added, new!

EQUATION E_cpi
# consumer price index of private goods #
(all,r,REG)
    ID01[PRIVEXP(r)] * cpi(r)
        = SUM(i,COMP_COMM,VPAA(i,r) * ppa(i,r));

EQUATION E_reg_num_cpi
# price of regional numeraire is cpi #
(all,r,REG)
    reg_num(r) = cpi(r) + f_cpi(r);

EQUATION E_reg_num_pgdp
# price of regional numeraire is cpi #
(all,r,REG)
    reg_num(r) = pgdp(r) + f_pgdp(r);

! public consumption !

EQUATION E_qgcons
# gpi-based real regional govt consumption #
(all,r,REG)
    qgcons(r) = yg(r) - pgov(r);

EQUATION E_pgov
# definition of price index for aggregate public purchases #
(all,r,REG)
    ID01[GOVEXP(r)] * pgov(r) = SUM(i,TRAD_COMM,VGA(i,r) * pg(i,r));

Equation GOVU
# utility from government consumption in r #
(all,r,REG)
    yg(r) - pop(r) = pgov(r) + ug(r);

Equation GOVDMNDS
# government consumption demands for composite commodities (HT 41) #
(all,i,TRAD_COMM)(all,r,REG)
    qg(i,r) = ug(r) - [pg(i,r) - pgov(r)] + pop(r) !+ demd_shift(i,r)!;

EQUATION E_qgd
# public demand for domestic goods. #
(all,i,TRAD_COMM)(all,r,REG)
    qgd(i,r)
        = IF(VDGA(i,r) > TINY,
            qg(i,r) - ESUBD(i,r) * (pgd(i,r) - pg(i,r))
                - [VIGA(i,r) / ID01(VGA(i,r))] * f_qimp(i,r));

EQUATION E_qgm
# public demand for composite imports. #
(all,i,TRAD_COMM)(all,r,REG)
    qgm(i,r)
        = IF(VIGA(i,r) > TINY,
            qg(i,r) - ESUBD(i,r) * [pgm(i,r)  - pg(i,r) ]
                + [VDGA(i,r) / ID01(VGA(i,r))] * f_qimp(i,r));

EQUATION E_pgd
(all,i,TRAD_COMM)(all,r,REG)
    pgd(i,r) = pm(i,r) + tgd(i,r);

EQUATION E_pgm
(all,i,TRAD_COMM)(all,r,REG)
    pgm(i,r) = pimp(i,r) + tgm(i,r);

EQUATION E_pg
(all,i,TRAD_COMM)(all,r,REG)
    ID01[VGA(i,r)] * pg(i,r)
        = VIGA(i,r) * pgm(i,r) + VDGA(i,r) * pgd(i,r);

! industrial use !

! technological shocks !

EQUATION E_ao
# output augmenting productivity improvement by industry in each region #
(all,j,PROD_COMM)(all,r,REG)
    ao(j,r)
        = ao_generic(j,r) + ao_r(r) + IS_OIL(j,j,r) * ao_generic("p_c",r);

EQUATION E_af_TRAD
# input neutral productivity improvement by industry in each region #
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    af(i,j,r)
        = af_generic(i,j,r)
        + IS_FUEL(i,j,r) * (a_energy(r) + a_energy_w)
        + af_jr(j,r) + af_ir(i,r) + DIFF(i,j,r) * af_r(r);

EQUATION E_af_ENDW
# input neutral productivity improvement by industry in each region #
(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    af(i,j,r)
        = af_generic(i,j,r) + af_jr(j,r) + af_ir(i,r) + DIFF(i,j,r) * af_r(r);

EQUATION E_aft
(all,i,DEMD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    aft_(i,t,j,r)
        = aft(i,t,j,r) + af(i,j,r) + ENDW_FLAG(i) * aft_endw(j,r);

! non-tech industries !

EQUATION E_qf_1
# NTB industry demands for non-fuel and non-factor inputs #
(all,i,NF_TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    qf(i,j,r) = IF[VFA(i,j,r) > TINY,
        - af(i,j,r) + qo(j,r) - ao(j,r) + demd_shift(i,r)];

EQUATION E_qvaf
# NTB industry demands for factor-fuel composite #
(all,j,NTECH_IND)(all,r,REG)
    qvaf(j,r) = IF[VVAF(j,r) > TINY, qo(j,r) - ao(j,r)];

EQUATION E_qfuel
# NTB industry demands for fuel composite #
(all,j,NTECH_IND)(all,r,REG)
    qfuel(j,r) = IF[VFUEL(j,r) > TINY,
        qvaf(j,r) - ESUBVAF(j,r) * (pfuel(j,r) - pvaf(j,r))];

EQUATION E_qva
# NTB industry demands for factor composite #
(all,j,NTECH_IND)(all,r,REG)
    qva(j,r) = IF[VVA(j,r) > TINY,
        qvaf(j,r) - ava(j,r) - ava_r(r) + dmg_clim(r)
      - ESUBVAF(j,r)
        * (pva(j,r) - ava(j,r) - ava_r(r) + dmg_clim(r) - pvaf(j,r))];

EQUATION E_qf_2
# NTB industry demands for fuel inputs #
(all,i,FUEL)(all,j,NTECH_IND)(all,r,REG)
    qf(i,j,r) = IF[VFA(i,j,r) > TINY,
        qfuel(j,r) - af(i,j,r)
      - ESUBF(i,j,r) * (pf(i,j,r) - af(i,j,r) - pfuel_star(j,r))
      + demd_shift(i,r) - adj_fuel_f(j,r)];

EQUATION E_qf_3
# NTB industry demands for factor inputs #
(all,i,ENDW_COMM)(all,j,NTECH_IND)(all,r,REG)
    qf(i,j,r) = IF(VFA(i,j,r) > TINY,
        qva(j,r) - af(i,j,r)
      - ESUBVA(j,r) * (pfe(i,j,r) - af(i,j,r) - pva(j,r))
      + demd_shift(i,r));

EQUATION E_qf_4
# TB industry demands for all inputs #
(all,i,DEMD_COMM)(all,j,TECH_IND)(all,r,REG)
    qf(i,j,r) = IF(VFA(i,j,r) > TINY,
        IF(TECH_FLAG(i,j,r) = 0,
            - af(i,j,r) + qo(j,r) - ao(j,r) + demd_shift(i,r))
      + IF(TECH_FLAG(i,j,r) = 1,
            SUM(t,TECH,TDEM_SHR(i,t,j,r) * qft(i,t,j,r))));

EQUATION E_adj_fuel_f
# adjustment for industrial demands for fuel #
(all,j,NTECH_IND)(all,r,REG)
    ID01[SUM(i,FUEL,VFA(i,j,r))] * adj_fuel_f(j,r)
        = SUM(i,FUEL,VFA(i,j,r) * demd_shift(i,r)) + adj_on_f(j,r);

COEFFICIENT (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    ESUBD_PROD(i,j,r);

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    ESUBD_PROD(i,j,r) = ESUBD(i,r);

FORMULA (all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    ESUBD_PROD(i,j,r)
        = IF(VDFA(i,j,r) LE TINY OR VIFA(i,j,r) LE TINY,0.01);

EQUATION E_qfd_1 # Industry j demands for domestic good i. #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    qfd(i,j,r) = IF(VDFA(i,j,r) > TINY,
        qf(i,j,r) - ESUBD_PROD(i,j,r) * [pfd(i,j,r) - pf(i,j,r)]
      - VIFA(i,j,r) / ID01[VFA(i,j,r)] * f_qimp(i,r));

EQUATION E_qfd_2 # Industry j demands for domestic good i. #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    qfd(i,j,r) = IF(VDFA(i,j,r) > TINY,
        IF(TECH_FLAG(i,j,r) = 0,
            qf(i,j,r) - ESUBD_PROD(i,j,r) * [pfd(i,j,r) - pf(i,j,r)]
                - VIFA(i,j,r) / ID01[VFA(i,j,r)] * f_qimp(i,r))
      + IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
            VDTA(i,t,j,r)
                / ID01[SUM(tt,TECH,VDTA(i,tt,j,r))] * qftd(i,t,j,r))));

EQUATION E_qfm_1 # Industry j demands for domestic good i. #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    qfm(i,j,r) = IF(VIFA(i,j,r) > TINY,
        qf(i,j,r) - ESUBD_PROD(i,j,r) * [pfm(i,j,r) - pf(i,j,r)]
      + VDFA(i,j,r) / ID01[VFA(i,j,r)] * f_qimp(i,r));

EQUATION E_qfm_2 #Industry j demands for composite import i #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    qfm(i,j,r) = IF(VIFA(i,j,r) > TINY,
        IF(TECH_FLAG(i,j,r) = 0,
            qf(i,j,r) - ESUBD_PROD(i,j,r) * [pfm(i,j,r) - pf(i,j,r)]
          + VDFA(i,j,r) / ID01[VFA(i,j,r)] * f_qimp(i,r))
      + IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
            VITA(i,t,j,r)
                / ID01[SUM(tt,TECH,VITA(i,tt,j,r))] * qftm(i,t,j,r))));

EQUATION E_pfd_NTB
# Purchaser's price to firms of composite imported commodity #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    pfd(i,j,r)
        = IF(VDFA(i,j,r) > 0, pm(i,r) + tfd(i,j,r))
        + IF(VDFA(i,j,r) LE 0, reg_num(r));

EQUATION E_pfd_TB
# Purchaser's price to firms of composite imported commodity #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    pfd(i,j,r)
        = IF(VDFA(i,j,r) > 0,
            IF(TECH_FLAG(i,j,r) = 1,
                SUM(t,TECH,VDTA(i,t,j,r) / ID01[SUM(tt,TECH,VDTA(i,tt,j,r))]
                * [pm(i,r) + tfd_tech(i,t,j,r)]))
          + IF(TECH_FLAG(i,j,r) = 0,
                pm(i,r) + tfd(i,j,r)))
        + IF(VDFA(i,j,r) LE 0,
            reg_num(r));

EQUATION E_pf_NTB
# Industry price for composite commodities #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    ID01[VFA(i,j,r)] * pf(i,j,r)
        = IF(VFA(i,j,r) > 0,
            VIFA(i,j,r) * pfm(i,j,r)
          + VDFA(i,j,r) * pfd(i,j,r))
        + IF(VFA(i,j,r) LE 0,
            ID01[VFA(i,j,r)] * reg_num(r));

EQUATION E_pfe_NTB_M
# Industry price for factor inputs #
(all,i,ENDWM_COMM)(all,j,NTECH_IND)(all,r,REG)
    pfe(i,j,r) = pm(i,r) + tfe(i,j,r);

EQUATION E_pfe_NTB_S
# Industry price for factor inputs #
(all,i,ENDWS_COMM)(all,j,NTECH_IND)(all,r,REG)
    pfe(i,j,r)
        = pmes(i,j,r) + tfe(i,j,r);

EQUATION E_pf_TB
# Industry price for traded goods #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    ID01[VFA(i,j,r)] * pf(i,j,r)
        = IF(VFA(i,j,r) > 0,
            IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
                VITA(i,t,j,r) * pftm(i,t,j,r)
              + VDTA(i,t,j,r) * pftd(i,t,j,r)))
          + IF(TECH_FLAG(i,j,r) = 0,
                VIFA(i,j,r) * pfm(i,j,r) + VDFA(i,j,r) * pfd(i,j,r)))
        + IF(VFA(i,j,r) LE 0,
            ID01[VFA(i,j,r)] * reg_num(r));

EQUATION E_pfe_TB
# price of factor inputs paid by technologies#
(all,i,ENDW_COMM)(all,j,TECH_IND)(all,r,REG)
    ID01[SUM(t,TECH,EVTA(i,t,j,r))] * pfe(i,j,r)
        = SUM(t,TECH,EVTA(i,t,j,r) * pft(i,t,j,r));

EQUATION E_pva
(all,j,NTECH_IND)(all,r,REG)
    ID01[SUM(i,ENDW_COMM,VFA(i,j,r))] * pva(j,r)
        = IF(SUM(i,ENDW_COMM,VFA(i,j,r)) > 0,
            SUM(k,ENDW_COMM,VFA(k,j,r) * [pfe(k,j,r) - af(k,j,r)]))
        + IF(SUM(i,ENDW_COMM,VFA(i,j,r)) LE 0,
            ID01[SUM(i,ENDW_COMM,VFA(i,j,r))] * reg_num(r));

EQUATION E_pfuel
# price of fuel composite in each industry in CRESH function #
(all,j,NTECH_IND)(all,r,REG)
    pfuel(j,r) + qfuel(j,r)
        = IF(VFUEL(j,r) > 0,SUM(i,FUEL,
            VFA(i,j,r) / ID01[VFUEL(j,r)] * (pf(i,j,r) + qf(i,j,r))))
        + IF(VFUEL(j,r) LE 0,
            reg_num(r) + qfuel(j,r));

EQUATION E_pfuel_star
# star-price of fuel composite in each industry in CRESH function #
(all,j,NTECH_IND)(all,r,REG)
    ID01[SUM(i,FUEL,VFA(i,j,r) * ESUBF(i,j,r))] * pfuel_star(j,r)
        = IF(SUM(i,FUEL,VFA(i,j,r) * ESUBF(i,j,r)) > 0,
            SUM(i,FUEL,VFA(i,j,r) * ESUBF(i,j,r)
                * [pf(i,j,r) - af(i,j,r)]))
        + IF(SUM(i,FUEL,VFA(i,j,r) * ESUBF(i,j,r)) LE 0,
            ID01[SUM(i,FUEL,VFA(i,j,r) * ESUBF(i,j,r))] * reg_num(r));

EQUATION E_pvaf
# Effective price of fuel-primary factor composite #
(all,j,NTECH_IND)(all,r,REG)
    ID01[VVAF(j,r)] * (pvaf(j,r) + qvaf(j,r))
        = IF(VVAF(j,r) > 0,
            SUM(i,ENDW_COMM,VFA(i,j,r) * (pfe(i,j,r) + qf(i,j,r)))
          + SUM(i,FUEL,VFA(i,j,r) * (pf(i,j,r) + qf(i,j,r))))
        + IF(VVAF(j,r) LE 0,
            ID01[VVAF(j,r)] * (reg_num(r) + qvaf(j,r)));

! tech-industries !

EQUATION E_adj_qtech
# additivity of technology supplies #
(all,j,ELY)(all,r,REG)
    qo(j,r) = SUM(t,TECH,TECHSHR(t,j,r) * qtech(t,j,r));

EQUATION E_qtech_stem
# demand for each stem technology, adjusted to maintain additivity #
(all,t,STEM_ELY)(all,j,ELY)(all,r,REG)
    qtech_stem(t,j,r)
        = qo(j,r) - ESUBE(t,r) * [ptech_stem(t,j,r) - ptb(j,r)];

COEFFICIENT (all,t,TECH)(all,j,NELY)(all,r,REG)
    ESUBNELY(t,j,r)
# CRESH parameters for subst. between tech. in non-elec tech bundle industries #;
FORMULA (INITIAL)(all,t,TECH)(all,j,NELY)(all,r,REG)
    ESUBNELY(t,j,r) = 2;
Read (IfHeaderExists) ESUBNELY from file PARAM_file header "ESNE";

EQUATION E_qtech_NELY
# demand for each technology in non-electricity tech bundle industries #
(all,t,TECH)(all,j,NELY)(all,r,REG)
    qtech(t,j,r)
        = qo(j,r) - ESUBNELY(t,j,r) * [ptech(t,j,r) - ptb(j,r)];

COEFFICIENT (all,t,CCS_ELY)(all,r,REG)
    CCS_SHR(t,r);

! Single formula replaces previous formulae for each of coal, oil & gas. The
  ordering of CCS technologies is no longer hard-wired. KJH 20191216 !
FORMULA (all,t,CCS_ELY)(all,r,REG)
    CCS_SHR(t,r)
        = TQNT(t,"ely",r)
  / ID01[sum{t1,MULTIPLE_ELY:BRANCH_MAP(t1)=BRANCH_MAP(t), TQNT(t1,"ely",r)}];

!FORMULA (all,r,REG)
    CCS_SHR("t11",r)
        = TQNT("t11","ely",r) / ID01[TQNT("t1","ely",r) + TQNT("t11","ely",r)];

FORMULA (all,r,REG)
    CCS_SHR("t12",r)
        = TQNT("t12","ely",r) / ID01[TQNT("t2","ely",r) + TQNT("t12","ely",r)];

FORMULA (all,r,REG)
    CCS_SHR("t13",r)
        = TQNT("t13","ely",r) / ID01[TQNT("t3","ely",r) + TQNT("t13","ely",r)];!

COEFFICIENT (all,r,REG)
    ESUBC_REAL(r);

FORMULA (all,r,REG)
    ESUBC_REAL(r)
        = IF(CCS_SHR(CONV_TO_CCS("t1"),r) LE 0.10, ESUBC(r))
        + IF(CCS_SHR(CONV_TO_CCS("t1"),r) > 0.10, 10);

COEFFICIENT (all,r,REG)
    ESUBO_REAL(r);

FORMULA (all,r,REG)
    ESUBO_REAL(r)
        = IF(CCS_SHR(CONV_TO_CCS("t2"),r) LE 0.10, ESUBO(r))
        + IF(CCS_SHR(CONV_TO_CCS("t2"),r) > 0.10, 10);

COEFFICIENT (all,r,REG)
    ESUBG_REAL(r);

FORMULA (all,r,REG)
    ESUBG_REAL(r)
        = IF(CCS_SHR(CONV_TO_CCS("t3"),r) LE 0.10, ESUBG(r))
        + IF(CCS_SHR(CONV_TO_CCS("t3"),r) > 0.10, 10);

COEFFICIENT (all,t,BRANCH_ELY)(all,r,REG)
    ESUB_REAL(t,r);

FORMULA (all,t,BRANCH_ELY)(all,r,REG)
    ESUB_REAL(t,r) = IF[t="tCoal", ESUBC_REAL(r)] +
                     IF[t="tOil", ESUBO_REAL(r)] +
                     IF[t="tGas", ESUBG_REAL(r)] ;

! Next two equations replace the previous six equations with hard-wired element
  labels.
  NOTE: One-to-one mapping between conventional and CCS technologies is
        essential and enforeced above. KJH 20191218 !

EQUATION E_qtech_CONV
# demand for conventional technology #
(all,t,CONV_ELY)(all,j,ELY)(all,r,REG)
    qtech(t,j,r) = IF(TQNT(t,j,r) > TINY,
        qtech_stem(BRANCH_MAP(t),j,r) - CTAX_FLAG(CONV_TO_CCS(t),j,r)
            * ESUB_REAL(BRANCH_MAP(t),r) * (ptech(t,j,r) - ptech_stem(BRANCH_MAP(t),j,r))
      + d_qtech(t,j,r) + adj_qtech(j,r));

EQUATION E_qtech_CCS
# demand for CCS technology #
(all,t,CONV_ELY)(all,j,ELY)(all,r,REG)
    qtech(CONV_TO_CCS(t),j,r) = IF(TQNT(CONV_TO_CCS(t),j,r) > TINY AND CTAX_FLAG(CONV_TO_CCS(t),j,r) > 0,
        qtech_stem(BRANCH_MAP(t),j,r)
      - ESUB_REAL(BRANCH_MAP(t),r) * (ptech(CONV_TO_CCS(t),j,r) - ptech_stem(BRANCH_MAP(t),j,r))
      + d_qtech(CONV_TO_CCS(t),j,r) + adj_qtech(j,r));


!EQUATION E_qtech_col1
# demand for conventional coal #
(all,j,ELY)(all,r,REG)
    qtech("t1",j,r) = IF(TQNT("t1",j,r) > TINY,
        qtech_stem("tCoal",j,r) - CTAX_FLAG("t11",j,r)
            * ESUBC_REAL(r) * (ptech("t1",j,r) - ptech_stem("tCoal",j,r))
      + d_qtech("t1",j,r) + adj_qtech(j,r));

EQUATION E_qtech_col2
# demand for CCS coal technology #
(all,j,ELY)(all,r,REG)
    qtech("t11",j,r) = IF(TQNT("t11",j,r) > TINY AND CTAX_FLAG("t11",j,r) > 0,
        qtech_stem("tCoal",j,r)
      - ESUBC_REAL(r) * (ptech("t11",j,r) - ptech_stem("tCoal",j,r))
      + d_qtech("t11",j,r) + adj_qtech(j,r));

EQUATION E_qtech_oil1
# demand for conventional oil #
(all,j,ELY)(all,r,REG)
    qtech("t2",j,r) = IF(TQNT("t2",j,r) > TINY,
        qtech_stem("tOil",j,r) - CTAX_FLAG("t12",j,r)
            * ESUBO_REAL(r) * (ptech("t2",j,r) - ptech_stem("tOil",j,r))
      + d_qtech("t2",j,r) + adj_qtech(j,r));

EQUATION E_qtech_oil2
# demand for CCS oil technology #
(all,j,ELY)(all,r,REG)
    qtech("t12",j,r) = IF(TQNT("t12",j,r) > TINY AND CTAX_FLAG("t12",j,r) > 0,
        qtech_stem("tOil",j,r)
      - ESUBO_REAL(r) * (ptech("t12",j,r) - ptech_stem("tOil",j,r))
      + d_qtech("t12",j,r) + adj_qtech(j,r));

EQUATION E_qtech_gas1
# demand for conventional gas #
(all,j,ELY)(all,r,REG)
    qtech("t3",j,r) = IF(TQNT("t3",j,r) > TINY,
        qtech_stem("tGas",j,r)
            - CTAX_FLAG("t13",j,r)
                * ESUBG_REAL(r) * (ptech("t3",j,r) - ptech_stem("tGas",j,r))
      + d_qtech("t3",j,r) + adj_qtech(j,r));

EQUATION E_qtech_gas2
# demand for CCS gas technology #
(all,j,ELY)(all,r,REG)
    qtech("t13",j,r) = IF(TQNT("t13",j,r) > TINY AND CTAX_FLAG("t13",j,r) > 0,
        qtech_stem("tGas",j,r)
      - ESUBG_REAL(r) * (ptech("t13",j,r) - ptech_stem("tGas",j,r))
      + d_qtech("t13",j,r) + adj_qtech(j,r));!

EQUATION E_qtech_single
# demand for conventional technology #
(all,t,SINGLE_ELY)(all,j,ELY)(all,r,REG)
    qtech(t,j,r) = IF(TQNT(t,j,r) > TINY,
        qtech_stem(t,j,r) + d_qtech(t,j,r)
      + adj_qtech(j,r));

! share shifters !

EQUATION E_d_qtech1
(all,j,ELY)(all,r,REG)
    d_qtech("t1",j,r) = demd_shift("col",r) + f_qtech("t1",j,r);

EQUATION E_d_qtech2
(all,j,ELY)(all,r,REG)
    d_qtech("t2",j,r) = demd_shift("oil",r) + f_qtech("t2",j,r);

EQUATION E_d_qtech3
(all,j,ELY)(all,r,REG)
    d_qtech("t3",j,r) = demd_shift("gas",r) + f_qtech("t3",j,r);

EQUATION E_d_qtech4
(all,j,ELY)(all,r,REG)
    d_qtech(CONV_TO_CCS("t1"),j,r) = !demd_shift("col",r) + !
                                     f_qtech(CONV_TO_CCS("t1"),j,r);

EQUATION E_d_qtech5
(all,j,ELY)(all,r,REG)
    d_qtech(CONV_TO_CCS("t2"),j,r) = !demd_shift("oil",r) + !
                                     f_qtech(CONV_TO_CCS("t2"),j,r);

EQUATION E_d_qtech6
(all,j,ELY)(all,r,REG)
    d_qtech(CONV_TO_CCS("t3"),j,r) = !demd_shift("gas",r) + !
                                     f_qtech(CONV_TO_CCS("t3"),j,r);

EQUATION E_d_qtech7
(all,j,ELY)(all,r,REG)
    d_qtech("t4",j,r) = f_qtech("t4",j,r); ! Nuclear !

EQUATION E_d_qtech8
(all,t,REN_ELY)(all,j,ELY)(all,r,REG)
    d_qtech(t,j,r) = f_qtech(t,j,r);

EQUATION E_d_qtech_NELY
(all,t,TECH)(all,j,NELY)(all,r,REG)
    d_qtech(t,j,r) = f_qtech(t,j,r);

EQUATION E_qft_ENDW
# Demands for factor inputs in fossil technologies #
(all,i,ENDW_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    qft(i,t,j,r)
        = IF[VCTA(i,t,j,r) > TINY and CTAX_FLAG(t,j,r) > 0,
            qtech(t,j,r) - aft_(i,t,j,r)
                - ESUBVA(j,r)
                    * (pft(i,t,j,r) - aft_(i,t,j,r) - pftv(t,j,r))];

EQUATION E_qft_TRAD_COMM
# Demands for composite tech_com i in each technology #
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    qft(i,t,j,r) = IF[VCTA(i,t,j,r) > TINY and CTAX_FLAG(t,j,r) > 0,
        qtech(t,j,r) - aft_(i,t,j,r)];

EQUATION E_qftd_1
# input demands for domestic commodities by each technology #
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    qftd(i,t,j,r) = IF(VCTA(i,t,j,r) > TINY and CTAX_FLAG(t,j,r) > 0,
        qft(i,t,j,r) - ESUBD(i,r) * [pftd(i,t,j,r) - pft(i,t,j,r)]
      - [VITA(i,t,j,r) / ID01(VDTA(i,t,j,r) + VITA(i,t,j,r))] * f_qimp(i,r));

EQUATION E_qftm
# input demands for imported commodities by each technology #
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    qftm(i,t,j,r) = IF(VCTA(i,t,j,r) > TINY and CTAX_FLAG(t,j,r) > 0,
        qft(i,t,j,r) - ESUBD(i,r) * [pftm(i,t,j,r) - pft(i,t,j,r)]
      + [VDTA(i,t,j,r) / ID01(VDTA(i,t,j,r) + VITA(i,t,j,r))] * f_qimp(i,r));

EQUATION E_pftd
# purchaser's price faced by technologies for domestic goods #
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pftd(i,t,j,r)  = pm(i,r) + tfd_tech(i,t,j,r);

EQUATION E_pftm
# Purchaser's price faced by technologies of composite import #
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pftm(i,t,j,r)  = pimp(i,r) + tfm_tech(i,t,j,r);

EQUATION E_pft
# traded goods prices for composite commodities faced by technologies #
(all,i,TRAD_COMM)(ALL,t,TECH)(all,j,TECH_IND)(all,r,REG)
    ID01[VCTA(i,t,j,r)] * pft(i,t,j,r)
        = IF(VCTA(i,t,j,r) > 0 and CTAX_FLAG(t,j,r) > 0,
            VITA(i,t,j,r) * pftm(i,t,j,r) + VDTA(i,t,j,r) * pftd(i,t,j,r))
        + IF(VCTA(i,t,j,r) LE 0 or CTAX_FLAG(t,j,r) LE 0,
            ID01[VCTA(i,t,j,r)] * reg_num(r));

EQUATION E_pft_M
# mobile factor prices for each technology #
(all,i,ENDWM_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pft(i,t,j,r)
        = IF(CTAX_FLAG(t,j,r) > 0, pm(i,r) + tfe(i,j,r))
        + IF(CTAX_FLAG(t,j,r) LE 0, reg_num(r));

EQUATION E_pft_S
# sluggish factor prices for each technology #
(all,i,ENDWS_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    pft(i,t,j,r)
        = IF(CTAX_FLAG(t,j,r) > 0, pmes(i,j,r) + tfe(i,j,r))
        + IF(CTAX_FLAG(t,j,r) LE 0, reg_num(r));

![[!
EQUATION E_pmes_F
(all,i,F_FACTOR)(all,j,ELY)(all,r,REG)
    pfe(i,j,r) = pmes(i,j,r) + tfe(i,j,r);

EQUATION E_pft_NF
# sluggish factor prices for each technology #
(all,i,NF_ENDWS)(all,t,TECH)(all,j,ELY)(all,r,REG)
    pft(i,t,j,r)
        = IF(CTAX_FLAG(t,j,r) > 0, pmes(i,j,r) + tfe(i,j,r))
        + IF(CTAX_FLAG(t,j,r) LE 0, reg_num(r));
!]]!

EQUATION E_pftv
# aggregate price of factor inputs for each technology #
(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    ID01[SUM(i,ENDW_COMM,EVTA(i,t,j,r))] * pftv(t,j,r)
        = SUM(i,ENDW_COMM,EVTA(i,t,j,r) * pft(i,t,j,r));

EQUATION E_ptech
# zero profit condition for each technique in tech-bundle industries #
(all,t,TECH)(all,j,TECH_IND)(all,r,REG)
    ID01[VTA(t,j,r)] * [ptech(t,j,r) + qtech(t,j,r)]
        = SUM(i,TRAD_COMM,
            VCTA(i,t,j,r) * [pft(i,t,j,r) + qft(i,t,j,r)])
        + SUM(i,ENDW_COMM,
            VCTA(i,t,j,r) * [pft(i,t,j,r) + qft(i,t,j,r)]);

EQUATION E_ptech_stem_S
# zero profit condition for each technique in tech-bundle industries #
(all,t,SINGLE_ELY)(all,j,ELY)(all,r,REG)
    ptech_stem(t,j,r) = ptech(t,j,r);

EQUATION E_ptech_stem_C
# zero profit condition for coal power #
(all,j,ELY)(all,r,REG)
    ID01[SUM(k,COL_ELY,CTAX_FLAG(k,j,r) * VTA(k,j,r))]
        * ptech_stem("tCoal",j,r)
        = SUM(t,COL_ELY,
            CTAX_FLAG(t,j,r) * VTA(t,j,r) * ptech(t,j,r) )
        + IF(SUM(t,COL_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r)) = 0,
            ptech("t1",j,r));

EQUATION E_ptech_stem_O
# zero profit condition for oil power #
(all,j,ELY)(all,r,REG)
    ID01[SUM(t,OIL_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r))]
        * ptech_stem("tOil",j,r)
        = SUM(t,OIL_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r) * ptech(t,j,r))
        + IF(SUM(t,OIL_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r)) = 0,
            ptech("t2",j,r));

EQUATION E_ptech_stem_G
# zero profit condition for gas power #
(all,j,ELY)(all,r,REG)
    ID01[SUM(t,GAS_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r))]
        * ptech_stem("tGas",j,r)
        = SUM(t,GAS_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r) * ptech(t,j,r))
        + IF(SUM(t,GAS_ELY,CTAX_FLAG(t,j,r) * VTA(t,j,r)) = 0,
            ptech("t3",j,r));

EQUATION E_ptb_ELY
# (Effective) price of technologies composite in each sector/region (ELY). #
(all,j,ELY)(all,r,REG)
    ID01[SUM(t,STEM_ELY,ESUBE(t,r) * VTA_STEM(t,j,r))] * ptb(j,r)
        = SUM(t,STEM_ELY,
            ESUBE(t,r) * VTA_STEM(t,j,r) * ptech_stem(t,j,r));

EQUATION E_ptb_NELY
# (Effective) price of technologies composite in each sector/region (NELY). #
(all,j,NELY)(all,r,REG)
    ID01[SUM(t,TECH,ESUBNELY(t,j,r) * VTA(t,j,r))] * ptb(j,r)
        = SUM(t,TECH,
            ESUBNELY(t,j,r) * VTA(t,j,r) * ptech(t,j,r));

! zero profit conditions !

EQUATION E_ps_NTG
# Industry zero profits condition Non-TB-GAS industries #
(all,j,NTECH_IND)(all,r,REG)
    ID01[VOA(j,r)] * [ps(j,r) + qo(j,r)]
        = SUM(i,ENDW_COMM,VFA(i,j,r) * [pfe(i,j,r) + qf(i,j,r)])
        + SUM(i,TRAD_COMM,VFA(i,j,r) * [pf(i,j,r) + qf(i,j,r)])
        + VOA(j,r) * profitslack(j,r);

EQUATION E_ps_TB
# Industry zero profits condition for TB industries#
(all,j,TECH_IND)(all,r,REG)
    ID01[VOA(j,r)] * [ps(j,r) + qo(j,r)]
        = SUM(i,ENDW_COMM, SUM(t,TECH,
            VCTA(i,t,j,r) * [pft(i,t,j,r) + qft(i,t,j,r)]))
        + SUM(i,TRAD_COMM,
            IF(TECH_FLAG(i,j,r) = 1, SUM(t,TECH,
                VCTA(i,t,j,r) * [pft(i,t,j,r) + qft(i,t,j,r)]))
          + IF(TECH_FLAG(i,j,r) = 0,
                VFA(i,j,r) * [pf(i,j,r) + qf(i,j,r)]))
        + VOA(j,r) * profitslack(j,r);

EQUATION E_ps
# links pre- and post-tax supply prices for all industries #
(all,i,NSAV_COMM)(all,r,REG)
    ps(i,r) + to(i,r) = pm(i,r);  ! note this is different from GTAP !

! market clearing conditions !

EQUATION E_qo_nmarg
# market clearing condition for domestic tradeable commodities #
(all,i,NMARG_COMM)(all,r,REG)
    ID01[VOM(i,r)] * qo(i,r)
        = VDM(i,r) * qds(i,r)
        + SUM(s,REG,VXMD(i,r,s) * qxs(i,r,s))
        ! adding demand from neg emis techs !
        + SUM[m,NEMT,VDAM(i,m,r) * q_VDA(i,m,r)]
        + VOM(i,r) * tradslack(i,r);

EQUATION E_qo_marg
# eq'n assures market clearing for margins commodities (HT 1) #
(all,i,MARG_COMM)(all,r,REG)
    ID01[VOM(i,r)] * qo(i,r)
        = VDM(i,r) * qds(i,r)
        + VST(i,r) * qst(i,r)
        + SUM(s,REG,VXMD(i,r,s) * qxs(i,r,s))
        + VOM(i,r) * tradslack(i,r)
        ! adding demand from neg emis techs !
        + SUM[m,NEMT,VDAM(i,m,r) * q_VDA(i,m,r)];

EQUATION E_qds
# This equation aggregates sale of domestic output to domestic users #
(all,i,TRAD_COMM)(all,r,REG)
    ID01[VDM(i,r)] * qds(i,r)
        = SUM(j,NTECH_IND,VDFM(i,j,r) * qfd(i,j,r))
        + SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 1,
                SUM(t,TECH,VDTM(i,t,j,r) * qftd(i,t,j,r)))
          + IF(TECH_FLAG(i,j,r) = 0,
                VDFM(i,j,r) * qfd(i,j,r)))
        + VDPM(i,r) * qpd(i,r) + VDGM(i,r) * qgd(i,r);

EQUATION E_qcgds
# Market clearing condition for capital goods #
(all,r,REG)
    SUM(h,CGDS_COMM,VOA(h,r) * qo(h,r))
        = REGINV(r) * qcgds(r) + REGINV(r) * cgdslack(r);

! market clearing conditions for endowments !

! sluggish endowment: land and natres !

! long-run configuration !
VARIABLE (all,i,ENDWS_COMM)(all,r,REG)
    slug_sup(i,r)
# sluggish factor supply #;

VARIABLE (all,i,ENDWS_COMM)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r)
# supply of sluggish primary factors to each sector #;

EQUATION E_qo_S
# supply of sluggish factors #
(all,i,ENDWS_COMM)(all,r,REG)
    ID01[VOM(i,r)] * qo(i,r)
        = VOM(i,r) * slug_sup(i,r)
        - SUM[m,NEMT,EVAM(i,m,r) * q_EVA(i,m,r)];

EQUATION E_pmes_S
# market clearing for sluggish factors #
(all,i,ENDWS_COMM)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r) = qf(i,j,r);

EQUATION E_pm_S
# composite price for sluggish factors #
(all,i,ENDWS_COMM)(all,r,REG)
    ID01[SUM(k,PROD_COMM,EVFM(i,k,r))] * pm(i,r)
        = SUM(k,PROD_COMM,EVFM(i,k,r) * pmes(i,k,r));

EQUATION E_qoes_S
# distribution of sluggish factors across sectors. #
(all,i,ENDWS_COMM)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r)
        = qo(i,r) - ETRAE(i) * (pmes(i,j,r) - pm(i,r))
        + endwslack(i,r);

![[!
! fixed factor for ELY !

VARIABLE (all,i,F_FACTOR)(all,t,NH_ELY)(all,j,ELY)(all,r,REG)
    fixed_factor(i,t,j,r)
# supply of fixed factors for ELY #;

SET NUREG
    = (all,r,REG: SUM(i,F_FACTOR,VCTA(i,"t4","ely",r)) > TINY);

SET NNUREG = REG - NUREG;

EQUATION E_pft_F_N1
# supply of fixed factors in each technology #
(all,i,F_FACTOR)(all,j,ELY)(all,r,NUREG)
    qft(i,"t4",j,r) = fixed_factor(i,"t4",j,r);

EQUATION E_pft_F_N2
# supply of fixed factors in each technology #
(all,i,F_FACTOR)(all,j,ELY)(all,r,NNUREG)
    pft(i,"t4",j,r) = reg_num(r);

SET HYREG
    = (all,r,REG: SUM(i,F_FACTOR,VCTA(i,"t5","ely",r)) > TINY);

SET NHYREG = REG - HYREG;

EQUATION E_pft_F_H1
# supply of fixed factors in each technology #
(all,i,F_FACTOR)(all,j,ELY)(all,r,HYREG)
    qft(i,"t5",j,r) = fixed_factor(i,"t5",j,r);

EQUATION E_pft_F_H2
# supply of fixed factors in each technology #
(all,i,F_FACTOR)(all,j,ELY)(all,r,NHYREG)
    pft(i,"t5",j,r) = reg_num(r);

EQUATION E_pft_F_NNH
# supply of fixed factors in each technology #
(all,i,F_FACTOR)(all,t,NNH_ELY)(all,j,ELY)(all,r,REG)
    pft(i,t,j,r) = reg_num(r);

! fixed_factor for NELY !

SET NELY = PROD_COMM - ELY;

EQUATION E_pm_F
# composite price for sluggish endowments. #
(all,i,F_FACTOR)(all,r,REG)
    ID01[SUM(k,NELY,EVFM(i,k,r))] * pm(i,r)
        = SUM(k,NELY,EVFM(i,k,r) * pmes(i,k,r));

EQUATION E_qoes_F
# distribution for the sluggish endowments across NELY sectors. #
(all,i,F_FACTOR)(all,j,NELY)(all,r,REG)
    qoes(i,j,r)
        = qo(i,r) - ETRAE(i) * (pmes(i,j,r) - pm(i,r))
        + endwslack(i,r);

! non-fixed factor for all sectors !

EQUATION E_pm_NF
# composite price for sluggish factors #
(all,i,NF_ENDWS)(all,r,REG)
    ID01[SUM(k,PROD_COMM,EVFM(i,k,r))] * pm(i,r)
        = SUM(k,PROD_COMM,EVFM(i,k,r) * pmes(i,k,r));

EQUATION E_qoes_NF
# distribution of sluggish factors across sectors. #
(all,i,NF_ENDWS)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r)
        = qo(i,r) - ETRAE(i) * (pmes(i,j,r) - pm(i,r))
        + endwslack(i,r);
!]]!

! short-run configuration !
![[!
VARIABLE (all,i,ENDWLD_COMM)(all,r,REG)
    land_sup(i,r)
# land supply #;

VARIABLE (all,i,ENDWNR_COMM)(all,j,PROD_COMM)(all,r,REG)
    natres_sup(i,j,r)
# supply of industry-specific natural resources #;

VARIABLE (all,i,ENDWLD_COMM)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r)
# supply of land to each industry #;

EQUATION E_pm_S
# composite price of land #
(all,i,ENDWS_COMM)(all,r,REG)
    ID01[SUM(k,PROD_COMM,EVFM(i,k,r))] * pm(i,r)
        = SUM(k,PROD_COMM,EVFM(i,k,r) * pmes(i,k,r));

EQUATION E_qo_LD
# regional supply of land #
(all,j,ENDWLD_COMM)(all,r,REG)
    qo(j,r) = land_sup(j,r);

EQUATION E_pmes
# sector supply of land #
(all,i,ENDWLD_COMM)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r) = qf(i,j,r) ;

EQUATION E_qoes_LD
# distribution of land across sectors. #
(all,i,ENDWLD_COMM)(all,j,PROD_COMM)(all,r,REG)
    qoes(i,j,r)
        = qo(i,r) - ETRAE(i) * [pmes(i,j,r) - pm(i,r)] + endwslack(i,r);

EQUATION E_qo_natres
# regional supply of natural resources #
(all,i,ENDWNR_COMM)(all,r,REG)
    ID01[SUM(j,PROD_COMM,EVFM(i,j,r))] * qo(i,r)
        = SUM(j,PROD_COMM,EVFM(i,j,r) * qf(i,j,r)) + endwslack(i,r);

SET RES_IND # industries which use natural resources #
    = (all,i,PROD_COMM: sum(r,REG, EVFM("NatRes",i,r)) > 0);

SET NONRES_IND = PROD_COMM - RES_IND;

EQUATION E_pmes_RES_IND
# sectoral supply of natural resources #
(all,i,ENDWNR_COMM)(all,j,RES_IND)(all,r,REG)
    qf(i,j,r) = natres_sup(i,j,r) ;

EQUATION E_pmes_NONRES_IND
# sectoral price of natural resources #
(all,i,ENDWNR_COMM)(all,j,NONRES_IND)(all,r,REG)
    pmes(i,j,r) = reg_num(r);
!]]!

! mobile endowments: capital and labor !

EQUATION E_pm_M
# market clearing for mobile endowment commodities #
(all,i,ENDWM_COMM)(all,r,REG)
    ID01[VOM(i,r)] * qo(i,r)
        = SUM(j,NTECH_IND,EVFM(i,j,r) * qf(i,j,r))
        + SUM(j,TECH_IND,
            IF(TECH_FLAG(i,j,r) = 0,
                EVFM(i,j,r) * qf(i,j,r))
          + IF(TECH_FLAG(i,j,r) = 1,
                SUM(t,TECH, EVTM(i,t,j,r) * qft(i,t,j,r))))
        + VOM(i,r) * endwslack(i,r)
        ! adding demand from neg emis techs !
        + SUM[m,NEMT,EVAM(i,m,r) * q_EVA(i,m,r)];

EQUATION E_qo_L
# realised supply of labour in region r #
(all,i,ENDWL_COMM)(all,r,REG)
    qo(i,r) = lab_sup(i,r) + empl_factor(i,r);

EQUATION E_lab_sup
# labour supply #
(all,i,ENDWL_COMM)(all,r,REG)
    lab_sup(i,r) = f_lab_sup(i,r);

EQUATION E_wage_n # after-tax nominal wage received by labour #
(all,r,REG)
    ID01[SUM(i,ENDWL_COMM,VOA(i,r))] * wage_n(r)
        = SUM(i,ENDWL_COMM,VOA(i,r) * ps(i,r));

EQUATION E_wage_r # after-tax real wage received by labour #
(all,r,REG)
    wage_r(r) = wage_n(r) - cpi(r);

EQUATION E_qo_C
# link capital services during the period with capital stock #
(all,r,REG)
    ID01[SUM(k,ENDWC_COMM, VOA(k,r))] * qk(r)
        = SUM(h,ENDWC_COMM,VOA(h,r) * qo(h,r));

EQUATION E_pcgds
# changes in regional price index of capital goods #
(all,r,REG)
    pcgds(r) = SUM(h,CGDS_COMM,[VOA(h,r) / ID01(REGINV(r))] * ps(h,r));

EQUATION E_psavewld
# the aggregate global cgds composite as global numeraire #
    GLOBINV * psavewld
        = SUM[r,REG,NETINV(r) * pcgds(r)];

EQUATION E_rental
# changes in price of capital input #
(all, r, REG)
    rental(r) = SUM[h,ENDWC_COMM,
        VOA(h,r) / ID01(SUM(k,ENDWC_COMM,VOA(k,r))) * ps(h,r)];

EQUATION E_rorc
# change in actual regional gross rate of return on capital #
(all, r, REG)
    rorc(r)
        = SUM[h,ENDWC_COMM,
            VOA(h,r) / ID01(SUM(k,ENDWC_COMM, VOA(k,r)))
                * (qo(h,r) + ps(h,r))]
        - [qk(r) + pcgds(r)];

EQUATION (Levels) E_rorg
# current in actual global average gross rate of return on capital #
!    rorg = SUM[r,REG, VKB(r) / SUM(n,REG, VKB(n)) * rorc(r)];!
! Correction: The level of the global RoR, NOT its percent change, is a share
  weighted sum of the regional RoRs. !
0 = SUM{r,REG, VKB(r) * [L_RORC(r) - L_RORG]};

EQUATION E_rorc_e
# change in static expected regional gross rate of return on capital #
(all, r, REG)
    rorc_e(r) = rental(r) - pcgds(r);

EQUATION E_rorg_e
# current in static expected global gross rate of return on capital #
    rorg_e = SUM[r,REG,VKB(r) / SUM(n,REG, VKB(n)) * rorc_e(r)];

! imports and exports !

EQUATION E_qxs
# demand for imports by sources #
(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    qxs(i,r,s)
        = IF(VIMS(i,r,s) > TINY,
            qimp(i,s) - ESUBM(i,r,s) * [pms(i,r,s) - pimp_star(i,s)]
                + f_qxs(i,r,s) + f_qx(i,r) - adj_qxs(i,s));

EQUATION E_adj_qxs
(all,i,TRAD_COMM)(all,s,REG)
    ID01[VIM(i,s)] * adj_qxs(i,s)
        = SUM(r,REG,VIMS(i,r,s) * [f_qxs(i,r,s) + f_qx(i,r)])
        + adj_on(i,s);

EQUATION E_qiw
# non-source specific imports calculated using cif price shares #
(all,i,TRAD_COMM)(all,s,REG)
    ID01[VIW(i,s)] * qiw(i,s)
        = SUM(r,REG,VIWS(i,r,s) * qxs(i,r,s));

EQUATION E_qx
# exports excluding sales to international transport #
(all,i,TRAD_COMM)(all,r,REG)
    ID01[VXM(i,r)] * qx(i,r) = SUM(s,REG,VXMD(i,r,s) * qxs(i,r,s));

EQUATION E_qimp
# aggregate imports of tradeable goods #
(all,i,TRAD_COMM)(all,r,REG)
    ID01[VIM(i,r)] * qimp(i,r)
        = IF(VIM(i,r) > TINY,
            SUM(j,NTECH_IND, VIFM(i,j,r) * qfm(i,j,r))
          + SUM(j,TECH_IND,
                IF(TECH_FLAG(i,j,r) = 1,
                    SUM(t,TECH,VITM(i,t,j,r) * qftm(i,t,j,r)))
              + IF(TECH_FLAG(i,j,r) = 0,
                    VIFM(i,j,r) * qfm(i,j,r)))
          + VIGM(i,r) *qgm(i,r) + VIPM(i,r) *qpm(i,r)
          ! adding demand from neg emis techs !
          + SUM[m,NEMT,VIAM(i,m,r) * q_VIA(i,m,r)]);

EQUATION E_qex_marg
# total exports of commodity including sales to international transport #
(all,m,MARG_COMM)(all,r,REG)
    ID01[VXWT(m,r)] * qex(m,r)
        = SUM(s,REG,VXWD(m,r,s) * qxs(m,r,s))
        + VST(m,r) * qst(m,r);

EQUATION E_qex_nmarg
# total exports of commodity including sales to international transport #
(all,i,NMARG_COMM)(all,r,REG)
    ID01[VXWT(i,r)] * qex(i,r)
        = SUM(s,REG,VXWD(i,r,s) * qxs(i,r,s));

EQUATION E_imports
# regional real imports calculated using cif price shares #
(all,r,REG)
    ID01[REGIMP(r)] * imports(r)
        = SUM(i,TRAD_COMM,SUM(s,REG,VIWS(i,s,r) * qxs(i,s,r)));

EQUATION E_exports
# regional real export including sales to international transport #
(all,r,REG)
    ID01[REGEXP(r)] * exports(r)
        = SUM(i,TRAD_COMM,SUM(s, REG, VXWD(i,r,s) * qxs(i,r,s)))
        + SUM(m,MARG_COMM,VST(m,r) * qst(m,r));


EQUATION E_pfob
# export price = domestic market price + tariff #
(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    pfob(i,r,s) = pm(i,r) + tx(i,r) + txs(i,r,s);

EQUATION e_atall
# productivity progress in the form of transport efficiency #
(all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    atall(m,i,r,s)
        = at_m(m) + at_i(i) + at_is(i,s) + at_ir(i,r)
        + at_generic(m,i,r,s);

EQUATION E_pcif
# links fob and cif prices for good i shipped from region r to s #
(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    ID01[VIWS(i,r,s)] * pcif(i,r,s)
        = IF(VIWS(i,r,s) > TINY,
            VXWD(i,r,s) * pfob(i,r,s)
                + SUM(m,MARG_COMM,VTMFSD(m,i,r,s)
                    * [pt(m) - atall(m,i,r,s)]));

EQUATION E_pms
# This equation links duty paid (market) price to cif price of imports #
(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    pms(i,r,s) = tm(i,s) + tms(i,r,s) + pcif(i,r,s);

EQUATION E_pimp
# (duty-paid) market prices of composite imported commodity #
(all,i,TRAD_COMM)(all,s,REG)
    ID01[SUM(r,REG,VIMS(i,r,s))] * (pimp(i,s) + qimp(i,s))
        = SUM(r,REG,VIMS(i,r,s) * (pms(i,r,s) + qxs(i,r,s)));

EQUATION E_pimp_star
# star prices of composite imported commodity, as per CRESH function #
(all,i,TRAD_COMM)(all,s,REG)
    ID01[SUM(r,REG,ESUBM(i,r,s) * VIMS(i,r,s))] * pimp_star(i,s)
        = SUM(r,REG,ESUBM(i,r,s) * VIMS(i,r,s) * pms(i,r,s));

EQUATION E_pfm_NTB
# Purchaser's price to firms of composite imported commodity #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    pfm(i,j,r) = pimp(i,r) + tfm(i,j,r);

EQUATION E_pfm_TB
# Purchaser's price to firms of composite imported commodity #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    pfm(i,j,r)
        = IF(TECH_FLAG(i,j,r) = 1,
            SUM(t,TECH,
                VITA(i,t,j,r) / ID01[SUM(tt,TECH, VITA(i,tt,j,r))]
                    * [pimp(i,r) + tfm_tech(i,t,j,r)]))
        + IF(TECH_FLAG(i,j,r) = 0,
            pimp(i,r) + tfm(i,j,r));

EQUATION E_mpi
# regional cif import price index #
(all,r,REG)
    ID01[REGIMP(r)] * mpi(r)
        = SUM(i,TRAD_COMM,SUM(s,REG,VIWS(i,s,r) * pcif(i,s,r)));

EQUATION E_px
# fob by commodity excluding sales to international transport #
(all,i,TRAD_COMM)(all,r,REG)
    ID01[VXW(i,r)] * px(i,r)
        = SUM(s,REG,VXWD(i,r,s) * pfob(i,r,s));

EQUATION E_pex_marg
# fob by commodity including sales to international transport #
(all,m,MARG_COMM)(all,r,REG)
    ID01[VXWT(m,r)] * pex(m,r)
        = SUM(s,REG,VXWD(m,r,s) * pfob(m,r,s))
        + VST(m,r) * pm(m,r);

EQUATION E_pex_nmarg
# fob by commodity including sales to international transport #
(all,i,NMARG_COMM)(all,r,REG)
    ID01[VXWT(i,r)] * pex(i,r)
        = SUM(s,REG,VXWD(i,r,s) * pfob(i,r,s));

EQUATION E_xpi
# regional fob including sales to international transport #
(all,r,REG)
    ID01[REGEXP(r)] * xpi(r)
        = SUM(i,TRAD_COMM,SUM(s,REG,VXWD(i,r,s) * pfob(i,r,s)))
        + SUM(m,MARG_COMM,VST(m,r) * pm(m,r));

EQUATION E_tot # terms of trade #
(all,r,REG)
    tot(r) = xpi(r) - mpi(r);

EQUATION E_qtmfsd
# bilateral demand for transport services  #
(all,m,MARG_COMM)(all,i,TRAD_COMM)(all,r,REG)(all,s,REG)
    qtmfsd(m,i,r,s) = qxs(i,r,s) - atall(m,i,r,s);

EQUATION E_qt
# global demand for margin m #
(all,m,MARG_COMM)
    ID01[VT(m)] * qt(m)
       = SUM(i,TRAD_COMM,SUM(r,REG,SUM(s,REG,
         VTMFSD(m,i,r,s) * qtmfsd(m,i,r,s))));

EQUATION E_qst
# demand for regional commodities by global transport sector #
(all,m,MARG_COMM)(all,r,REG)
    qst(m,r) = qt(m) + [pt(m) - pm(m,r)];

EQUATION E_pt # price index for transportation services #
(all,m,MARG_COMM)
    ID01[VT(m)] * pt(m)
        = SUM(r,REG,VST(m,r) * pm(m,r));

EQUATION E_globalcgds # global investment #
    ID01[GLOBINV] * globalcgds
        = SUM(r,REG,
            REGINV(r) * (qcgds(r) + pcgds(r))
            - VDEP(r) * (qk(r) + pcgds(r)));

EQUATION E_globalsave # global savings #
    ID01[GLOBSAV] * globalsave
        = SUM(r,REG,REGSAVE(r) * ys(r));

EQUATION E_walraslack # Walras' Law #
    globalcgds = globalsave + walraslack;

! debt accumulation !

EQUATION E_c_debt # change in debt in local currency#
(all,r,REG)
    c_debt(r)
! Correction. KJH 20191214
    = REGIMP(r) * [imports(r) + mpi(r)]
    - REGEXP(r) * [exports(r) + xpi(r)]!
    = [NETINV(r) - REGSAVE(r)]*time
    + f_debt(r);

! debt servicing!

Formula (Initial)(all,r,REG) FYBAL(r) = - L_RORG * DEBT(r);
Read (IfHeaderExists) FYBAL from file SAM_file header "FYBL";

FORMULA & EQUATION E_c_fy # change in debt interest payments in local currency #
(all,r,REG)
    FY(r)
        = L_RORG * DEBT(r) + FYBAL(r);

EQUATION E_p_FYBAL (all,r,REG) p_FYBAL(r) = -10*time + psavewld;

! national accounting !

EQUATION E_gdp_n # nominal GDP #
(all,r,REG)
    ID01[REGGDP(r)] * gdp_n(r)
        = PRIVEXP(r) * yp(r)
        + GOVEXP(r) * yg(r)
        + REGINV(r) * [qcgds(r) + pcgds(r)]
        + REGEXP(r) * [exports(r) + xpi(r)]
        - REGIMP(r) * [imports(r) + mpi(r)];

EQUATION E_gdp_r # real GDP #
(all,r,REG)
    ID01[REGGDP(r)] * gdp_r(r)
        = PRIVEXP(r) * qpcons(r)
        + GOVEXP(r) * qgcons(r)
        + REGINV(r) * qcgds(r)
        + REGEXP(r) * exports(r)
        - REGIMP(r) * imports(r);

EQUATION E_pgdp # GDP price index #
(all,r,REG)
    pgdp(r) = gdp_n(r) - gdp_r(r);

EQUATION E_gnp_n # nominal GNP #
(all,r,REG)
    ID01[REGGNP(r)] * gnp_n(r)
        = PRIVEXP(r) * yp(r)
        + GOVEXP(r) * yg(r)
        + REGSAVE(r) * ys(r)
        + VDEP(r) * [pcgds(r) + qk(r)];

EQUATION E_gnp_r # real GNP as nominal GNP deflated by GNP price index #
(all,r,REG)
    gnp_r(r) = gnp_n(r) - pgdp(r);

EQUATION E_qworld # world output by commodity #
(all,i,TRAD_COMM)
    ID01[VOA_WORLD(i)] * qworld(i)
        = SUM(r,REG,VOA(i,r) * qo(i,r));

EQUATION E_qo_Cg # regional demand for investment#
(all,r,REG)
    qcgds(r)
        = HOME_BIAS(r) * [REGSAVE(r) / REGINV(r) * ys(r)
            + VDEP(r) / REGINV(r)*(qk(r) + pcgds(r)) - pcgds(r)]
        !+ RORFLEX(r) * [rorc(r) - rorg]!
        + RORFLEX(r) * [L_RORC(r) * rorc(r) - L_RORG * rorg]
        + RESIDUAL(r) * adj_qcgds
        + f_qcgds(r);

! carbon prices!

EQUATION E_hot_gctax
(all,e,GHG)
    gctax(e)
        = DISC_RATE * LAST_GCTAX(e) * time + hot_gctax(e);

EQUATION E_hot_bctax
(all,b,BLOCK)(all,e,GHG)
    bctax(b,e)
        = DISC_RATE * LAST_BCTAX(b,e) * time + hot_bctax(b,e);

EQUATION E_hot_ctax
(all,r,REG)(all,e,GHG)
    ectax(r,e)
        = LAST_ECTAX(r,e) * DISC_RATE * time
        + LAST_ECTAX(r,e) / 100 * cpi(r)
        + hot_ectax(r,e);

EQUATION E_gctax # changes in global carbon price #
(all,e,GHG)
    gctax(e) = gctax_co2e + f_gctax(e);

EQUATION E_bctax  # changes in block carbon price #
(all,b,BLOCK)(all,e,GHG)
    bctax(b,e) = bctax_co2e(b) + f_bctax(b,e);

EQUATION E_rctax # changes in implied regional carbon price #
(all,r,REG)(all,e,GHG)
    rctax(r,e)
        = SUM(b,BLOCK,BLK_PAR(r,b,e) * bctax(b,e)) + gctax(e)
        + f_rctax(r,e);

EQUATION E_ectax # changes in effective regional carbon price #
(all,r,REG)(all,e,GHG)
    ectax(r,e)
        = L_CPI(r) * REL_CTAX(r,e) * rctax(r,e)
        + L_CPI(r) * L_RCTAX(r,e) * c_rel_ctax(r,e)
        + L_RCTAX(r,e) / 100 * cpi(r)
        + f_ectax(r,e) + ectax_co2e(r);

! emission accounting !

COEFFICIENT
    MNFE
# cutoff price for endogenous tech growth in reducing carbon intensities #;

READ MNFE from file PARAM_file HEADER "MNFE";

![[!
EQUATION E_lambda_eo
(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_eo(j,r,e)
        = IF[EMIS_OUTIND(j,r,e) > TINY
            and LAST_ECTAX(r,e) > MNFE and L_TO_(j,r) > 0,
            - CEL1(j,r,e) * to(j,r)];

EQUATION E_lambda_efd
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_efd(i,j,r,e)
        = IF[EMIS_DINT(i,j,r,e) > TINY
            and LAST_ECTAX(r,e) > MNFE and L_TFD_(i,j,r) > 0,
            - CEL2(i,j,r,e) * tfd(i,j,r)];

EQUATION E_lambda_efm
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_efm(i,j,r,e)
        = IF[EMIS_MINT(i,j,r,e) > TINY
            and LAST_ECTAX(r,e) > MNFE and L_TFM_(i,j,r) > 0,
            - CEL2(i,j,r,e) * tfm(i,j,r)];
!]]!

EQUATION E_lambda_eo
(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_eo(j,r,e)
        = IF[EMIS_OUTIND(j,r,e) > TINY
            and L_ECTAX(r,e) > MNFE and L_TO_(j,r) > 0,
            - CEL1(j,r,e) * to(j,r)];

EQUATION E_lambda_efd
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_efd(i,j,r,e)
        = IF[EMIS_DINT(i,j,r,e) > TINY
            and L_ECTAX(r,e) > MNFE and L_TFD_(i,j,r) > 0,
            - CEL2(i,j,r,e) * tfd(i,j,r)];

EQUATION E_lambda_efm
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    lambda_efm(i,j,r,e)
        = IF[EMIS_MINT(i,j,r,e) > TINY
            and L_ECTAX(r,e) > MNFE and L_TFM_(i,j,r) > 0,
            - CEL2(i,j,r,e) * tfm(i,j,r)];

EQUATION E_eo
(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    eo(j,r,e)
        = IF[EMIS_OUTIND(j,r,e) > TINY,
            qo(j,r) ! proportional to output !
          + f_eo(j,r,e)  ! shift in carbon intensity !
          + w_ae(e)   ! global adjustment factor for calibration!
          + lambda_eo(j,r,e)];  ! endogenous tech growth !

EQUATION E_efe
(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    efe(i,j,r,e)
        = IF[EMIS_END(i,j,r,e) > TINY,
            qf(i,j,r)   ! proportional to input use !
          + f_efe(i,j,r,e)  ! shift in carbon intensity !
          + w_ae(e)  ! global adjustment factor for calibration!
          + lambda_eo(j,r,e)];  ! endogenous tech growth !

EQUATION E_efd_NTB
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)(all,e,GHG)
    efd(i,j,r,e)
        = IF[EMIS_DINT(i,j,r,e) > TINY,
            qfd(i,j,r)  ! proportional to input use !
          + f_efd(i,j,r,e)  ! shift in carbon intensity !
          + w_ae(e)   ! global adjustment factor for calibration!
          + lambda_efd(i,j,r,e)];   ! endogenous tech growth !

EQUATION E_efd_TB
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    efd(i,j,r,e)
        = IF(EMIS_DINT(i,j,r,e) > TINY, SUM(t,TECH,
            EMIS_DINT_TB(i,t,j,r,e)
                / ID01(SUM(tt,TECH,EMIS_DINT_TB(i,tt,j,r,e)))
                    * efd_tech(i,t,j,r,e)));

EQUATION E_efm_NTB
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)(all,e,GHG)
    efm(i,j,r,e)
        = IF[EMIS_MINT(i,j,r,e) > TINY,
            qfm(i,j,r)  ! proportional to input use !
          + f_efm(i,j,r,e)  ! shift in carbon intensity !
          + w_ae(e)   ! global adjustment factor for calibration!
          + lambda_efm(i,j,r,e)];   ! endogenous tech growth !

EQUATION E_efm_TB
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    efm(i,j,r,e)
        = IF(EMIS_MINT(i,j,r,e) > TINY, SUM(t,TECH,
            EMIS_MINT_TB(i,t,j,r,e)
                / ID01(SUM(tt,TECH,EMIS_MINT_TB(i,tt,j,r,e)))
                    * efm_tech(i,t,j,r,e)));

EQUATION E_efd_tech
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    efd_tech(i,t,j,r,e)
        = IF[EMIS_DINT_TB(i,t,j,r,e) > TINY,
            qftd(i,t,j,r)  ! proportional to input use !
          + f_efd_tech(i,t,j,r,e)  ! shift in carbon intensity !
          + w_ae(e)   ! global adjustment factor for calibration!
          + lambda_efd(i,j,r,e)];   ! endogenous tech growth !

EQUATION E_efm_tech
(all,i,TRAD_COMM)(all,t,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    efm_tech(i,t,j,r,e)
        = IF[EMIS_MINT_TB(i,t,j,r,e) > TINY,
            qftm(i,t,j,r)  ! proportional to input use !
          + f_efm_tech(i,t,j,r,e)  ! shift in carbon intensity !
          + w_ae(e)   ! global adjustment factor for calibration!
          + lambda_efm(i,j,r,e)];   ! endogenous tech growth !

EQUATION E_epd (all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    epd(i,r,e)
        = IF(EMIS_DPRIV(i,r,e) > TINY,
            qpd(i,r) + f_epd(i,r,e) + w_ae(e));

EQUATION E_epm (all,i,TRAD_COMM)(all,r,REG) (all,e,GHG)
    epm(i,r,e)
        = IF(EMIS_MPRIV(i,r,e) > TINY,
            qpm(i,r) + f_epm(i,r,e) + w_ae(e));

EQUATION E_egd (all,i,TRAD_COMM)(all,r,REG) (all,e,GHG)
    egd(i,r,e)
        = IF(EMIS_DGOV(i,r,e) > TINY,
            qgd(i,r) + f_egd(i,r,e) + w_ae(e));

EQUATION E_egm (all,i,TRAD_COMM)(all,r,REG) (all,e,GHG)
    egm(i,r,e)
        = IF(EMIS_MGOV(i,r,e) > TINY,
            qgm(i,r) + f_egd(i,r,e) + w_ae(e));

EQUATION E_p_ETOT # total gross emissions of GHGs #
(all,r,REG) (all,e,GHG)
    ID01[ETOT(r,e)] * p_ETOT(r,e)
        = SUM[i,EMIS_SOURCE,
                SUM[j,EMIS_OUTLET,
                    L_ALL_EMIS(e,i,j,r) * p_ALL_EMIS(e,i,j,r)]];

EQUATION E_p_ENET_co2 # total net emissions of GHGs #
(all,r,REG) (all,e,CO2)
    ENET(r,e) * p_ENET(r,e)
        = ETOT(r,e) * p_ETOT(r,e) - SUM(m,NEMT,NEMS(m,r) * p_NEMS(m,r));

EQUATION E_p_ENET_nco2 # total net emissions of GHGs #
(all,r,REG) (all,e,GHG_NCO2)
    ID01(ENET(r,e)) * p_ENET(r,e)
        = ETOT(r,e) * p_ETOT(r,e);

EQUATION E_emis_pc # per capita GHG emissions by region #
(all,r,REG) (all,e,GHG)
    emis_pc(r,e) = p_ENET(r,e) - pop(r);

EQUATION E_emis_to_gdp # emission to GDP ratio #
(all,r,REG) (all,e,GHG)
    emis_to_gdp(r,e) = p_ENET(r,e) - gdp_r(r);

!aggregate emision of the trading BLOCK!

EQUATION E_block_emis # agg. emissions of the trading BLOCK #
(all,b,BLOCK)(all,e,GHG)
    ID01(SUM(r,REG,BLK_PAR(r,b,e) * ENET(r,e))) * block_emis(b,e)
        = SUM(r,REG,BLK_PAR(r,b,e) * ENET(r,e) * p_ENET(r,e));

EQUATION E_glob_emis # global aggregate of all GHG emissions #
(all,e,GHG)
    ID01(SUM(r,REG,ENET(r,e))) * glob_emis(e)
        = SUM(r,REG,ENET(r,e) * p_ENET(r,e));

! emissions quota trading !

EQUATION E_equo_inc
# Net quota income received from sales of emis. permits in global cur. #
(all,r,REG)
    equo_inc(r)
        = SUM[e,GHG,SUM[b,BLOCK,
            EQUO_SALES(r,b,e) * bctax(b,e)
                + L_BCTAX(b,e) * (BLK_PAR(r,b,e)
                    * (ch_EQUO(r,b,e)
                        - 0.01 * ENET(r,e) * p_ENET(r,e)))]]
        + f_equo_inc(r);

EQUATION E_equo_inc_g
# sum of global quota incomes, must be 0 #
    equo_inc_g = SUM(r,REG,equo_inc(r));

! carbon tax revenue collection !

EQUATION E_tax_emis
# total taxable emissions #
(all,r,REG) (all,e,GHG)
    ID01[L_TAX_EMIS(r,e)] * tax_emis(r,e)
        = SUM(i,ENDW_COMM,SUM(j,PROD_COMM,
            [1 - IMPUTE2(j,e,r)] * EMIS_END(i,j,r,e) * efe(i,j,r,e)))
        + SUM(i,TRAD_COMM,SUM(j,NTECH_IND,
            [1 - IMPUTE1(i,j,e,r)]
                * [EMIS_DINT(i,j,r,e) * efd(i,j,r,e)
                    + EMIS_MINT(i,j,r,e) *efm(i,j,r,e) ]))
        + SUM(i,TRAD_COMM,SUM(j,TECH_IND,SUM(t,TECH,
            [EMIS_DINT_TB(i,t,j,r,e) * efd_tech(i,t,j,r,e)
                + EMIS_MINT_TB(i,t,j,r,e) * efm_tech(i,t,j,r,e)])))
        + SUM(j,PROD_COMM,
            [1 - IMPUTE2(j,e,r)] * EMIS_OUTIND(j,r,e) * eo(j,r,e))
        + SUM(i,TRAD_COMM,
            [1 - IMPUTE3(i,e,r)] * {[EMIS_DGOV(i,r,e) * egd(i,r,e)
                + EMIS_MGOV(i,r,e) * egm(i,r,e)]
                    + [EMIS_DPRIV(i,r,e) * epd(i,r,e)
                        + EMIS_MPRIV(i,r,e) * epm(i,r,e)]});

EQUATION E_c_CTAXREV_e
#c hange in the level of emission tax revenue #
(all,r,REG) (all,e,GHG)
    100 * c_CTAXREV_e(r,e)
        = L_ECTAX(r,e) * L_TAX_EMIS(r,e) * tax_emis(r,e)
        + 100 * L_TAX_EMIS(r,e) * ectax(r,e);

EQUATION E_c_CTAXREV
# change in the level of total emission tax revenue collected by region #
(all,r,REG)
    c_CTAXREV(r) = SUM(e,GHG,c_CTAXREV_e(r,e));

! Conversion of specific carbon tax rate into ad valerom tax rate !

EQUATION E_c_to_e1
# change in emission tax rates on dirty industry output #
(all,j,DIRTY_IND)(all,r,REG)(all,e,GHG)
    100 * ID01[VOA(j,r)] * c_to_e(j,r,e)
        = IF(VOA(j,r) > TINY and EMIS_OUTIND(j,r,e) > TINY,
            - EMIS_OUTIND(j,r,e) * L_ECTAX(r,e)
                * [ps(j,r) - f_eo(j,r,e) - w_ae(e) - lambda_eo(j,r,e)]
            + 100 * EMIS_OUTIND(j,r,e) * ectax(r,e));

EQUATION E_c_to_e2
# change in emission tax rates on clean industry output #
(all,j,CLEAN_IND)(all,r,REG)(all,e,GHG)
    c_to_e(j,r,e) = 0;

EQUATION E_c_tfe_e_M
# change in emission tax rates on non-TB industry #
(all,i,ENDWM_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    100 * ID01[EVFM(i,j,r)] * c_tfe_e(i,j,r,e)
        = IF(EVFM(i,j,r) > TINY and EMIS_END(i,j,r,e) > TINY,
            - EMIS_END(i,j,r,e) * L_ECTAX(r,e)
                * [pm(i,r) - f_efe(i,j,r,e) - w_ae(e) - lambda_eo(j,r,e)]
            + 100 * EMIS_END(i,j,r,e) * ectax(r,e));

EQUATION E_c_tfe_e_S
# change in emission tax rates on non-TB industry usage of each commodity #
(all,i,ENDWS_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    100 * ID01[EVFM(i,j,r)] * c_tfe_e(i,j,r,e)
        = IF(EVFM(i,j,r) > TINY and EMIS_END(i,j,r,e) > TINY,
            - EMIS_END(i,j,r,e) * L_ECTAX(r,e)
                * [pmes(i,j,r) - f_efe(i,j,r,e) - w_ae(e) - lambda_eo(j,r,e)]
            + 100 * EMIS_END(i,j,r,e) * ectax(r,e));

EQUATION E_c_tfd_e_NTB
# change in emission tax rates on non-TB industry usage of each commodity #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)(all,e,GHG)
    100 * ID01[VDFM(i,j,r)] * c_tfd_e(i,j,r,e)
        = IF(VDFM(i,j,r) > TINY and EMIS_DINT(i,j,r,e) > TINY,
            - EMIS_DINT(i,j,r,e) * L_ECTAX(r,e)
                * [pm(i,r) - f_efd(i,j,r,e) - w_ae(e) - lambda_efd(i,j,r,e)]
            + 100 * EMIS_DINT(i,j,r,e) * ectax(r,e));

EQUATION E_c_tfd_e_TB
# change in emission tax rates on TB industry usage of each commodity #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    c_tfd_e(i,j,r,e) = 0;
! nulified in order to avoid double accounting !

!taxes on imported ones!
EQUATION E_c_tfm_e_NTB
# change in emission tax rates on non TB industry usage of each commodity #
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)(all,e,GHG)
    100 * ID01[VIFM(i,j,r)] * c_tfm_e(i,j,r,e)
        = IF(VIFM(i,j,r) > TINY and EMIS_MINT(i,j,r,e) > TINY,
            - EMIS_MINT(i,j,r,e) * L_ECTAX(r,e)
                * [pimp(i,r) - f_efm(i,j,r,e) - w_ae(e) - lambda_efm(i,j,r,e)]
            + 100 * EMIS_MINT(i,j,r,e) * ectax(r,e));

EQUATION E_c_tfm_e_TB
# change in emission tax rates on TB industry usage of each commodity #
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    c_tfm_e(i,j,r,e) = 0;
! nulified in order to avoid double accounting !

EQUATION E_c_tfd_tech_e
# change in emission tax rates on TB industry usage of each commodity #
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    100 * ID01[VDTM(i,k,j,r)] * c_tfd_tech_e(i,k,j,r,e)
        = IF(VDTM(i,k,j,r) > TINY and EMIS_DINT_TB(i,k,j,r,e) > TINY,
            - EMIS_DINT_TB(i,k,j,r,e) * L_ECTAX(r,e)
                * [pm(i,r) - f_efd_tech(i,k,j,r,e)
                    - w_ae(e) - lambda_efd(i,j,r,e)]
            + 100 * EMIS_DINT_TB(i,k,j,r,e) * ectax(r,e));

EQUATION E_c_tfm_tech_e
# change in emission tax rates on non-TB industry #
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    100 * ID01[VITM(i,k,j,r)] * c_tfm_tech_e(i,k,j,r,e)
        = IF(VITM(i,k,j,r) > TINY and EMIS_MINT_TB(i,k,j,r,e) > TINY,
            - EMIS_MINT_TB(i,k,j,r,e) * L_ECTAX(r,e)
                * [pimp(i,r) - f_efm_tech(i,k,j,r,e)
                    - w_ae(e) - lambda_efm(i,j,r,e)]
            + 100 * EMIS_MINT_TB(i,k,j,r,e) * ectax(r,e));

EQUATION E_c_tpd_e
# change in emission tax rates on private household consumption #
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    100 * ID01[VDPM(i,r)] * c_tpd_e(i,r,e)
        = IF(VDPM(i,r) > TINY and EMIS_DPRIV(i,r,e) > TINY,
            - EMIS_DPRIV(i,r,e) * L_ECTAX(r,e)
                * [pm(i,r) - f_epd(i,r,e) - w_ae(e)]
            + 100 * EMIS_DPRIV(i,r,e) * ectax(r,e));

EQUATION E_c_tpm_e
# change in emission tax rates on private household consumption #
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    100 * ID01[VIPM(i,r)] * c_tpm_e(i,r,e)
        = IF(VIPM(i,r) > TINY and EMIS_MPRIV(i,r,e) > TINY,
            - EMIS_MPRIV(i,r,e) * L_ECTAX(r,e)
                * [pimp(i,r) - f_epm(i,r,e) - w_ae(e)]
            + 100 * EMIS_MPRIV(i,r,e) * ectax(r,e));

EQUATION E_c_tgd_e
# power of emission tax on public consumption by commodity #
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    c_tgd_e(i,r,e) = 0;

EQUATION E_c_tgm_e
# power of emission tax on public consumption by commodity #
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    c_tgm_e(i,r,e) = 0;

! power of carbon tax combined with sales tax !

EQUATION E_to1
# percentage change in the power of all taxes on firm's output #
(all,j,PROD_COMM)(all,r,REG)
    to(j,r)
        = {100 / [1 + L_TO_(j,r)
            + SUM(e,GHG,[1 - IMPUTE2(j,e,r)] * L_TO_E(j,r,e))]}
        * {c_to_(j,r) + SUM(e,GHG,[1 - IMPUTE2(j,e,r)] * c_to_e(j,r,e))};

EQUATION E_to2
# percentage change in the power of all taxes on 'output' of factors#
(all,i,ENDW_COMM)(all,r,REG)
    to(i,r) = {100 / [1 + L_TO_(i,r)]} * c_to_(i,r);

EQUATION E_tfe
# perc. change in the power of all taxes on NTB industries #
(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    tfe(i,j,r)
        = {100 / [1 + L_tfe_(i,j,r)
            + SUM(e,GHG,[1 - IMPUTE2(j,e,r)] * L_tfe_e(i,j,r,e))]}
        * {c_tfe_(i,j,r)
            + SUM(e,GHG,[1 - IMPUTE2(j,e,r)] * c_tfe_e(i,j,r,e))};

EQUATION E_tpd
# perc.change in the power of all taxes on HH pur. of dom. goods#

(all,i,TRAD_COMM)(all,r,REG)
    tpd(i,r)
        = {100 / [1 + L_tpd_(i,r) + SUM(e,GHG,L_tpd_e(i,r,e))]}
        * {c_tpd_(i,r) + SUM(e,GHG,[1 - IMPUTE3(i,e,r)] * c_tpd_e(i,r,e))};

EQUATION E_tgd
# perc. change in the power of all taxes on Govt pur. of dom. goods#
(all,i,TRAD_COMM)(all,r,REG)
    tgd(i,r)
        = {100 / [1 + L_tgd_(i,r) + SUM(e,GHG,L_tgd_e(i,r,e))]}
        * {c_tgd_(i,r) + SUM(e,GHG,[1 - IMPUTE3(i,e,r)] * c_tgd_e(i,r,e))};

EQUATION E_tfd_NTB
# perc. change in the power of all taxes on NTB firm's pur.of dom. goods#
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    tfd(i,j,r)
        = {100 / [1 + L_tfd_(i,j,r)
            + SUM(e,GHG,[1 - IMPUTE1(i,j,e,r)] * L_tfd_e(i,j,r,e))]}
        * {c_tfd_(i,j,r)
            + SUM(e,GHG,[1 - IMPUTE1(i,j,e,r)] * c_tfd_e(i,j,r,e))};

EQUATION E_tfd_TB
# perc. change in the power of all taxes on TBs pur.of nontech dom. goods#
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    ID01[SUM(t,TECH,VDTA(i,t,j,r))] * tfd(i,j,r)
        = SUM(t,TECH,VDTA(i,t,j,r) * tfd_tech(i,t,j,r))
        + IF(TECH_FLAG(i,j,r) = 0,
            {100 / [1 + L_tfd_(i,j,r)]} * c_tfd_(i,j,r));

! taxes on domestic purchases of technologies !

EQUATION E_tfd_tech
# percentage change in the power of all taxes on firm's pur.of dom goods#
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    tfd_tech(i,k,j,r)
        = {100 / [1 + L_tfd_tech_(i,k,j,r)
            + SUM(e,GHG,
                [1 - IMPUTE1(i,j,e,r)] * L_tfd_tech_e(i,k,j,r,e))]}
        * {c_tfd_tech_(i,k,j,r)
            + SUM(e,GHG,
                [1 - IMPUTE1(i,j,e,r)] * c_tfd_tech_e(i,k,j,r,e))};

!General Sales and emissions Tax on Imports!

EQUATION E_tpm
# percentage change in the power of all taxes on HH pur. of imp. goods#
(all,i,TRAD_COMM)(all,r,REG)
    tpm(i,r)
        = {100 / [1 + L_tpm_(i,r) + SUM(e,GHG,L_tpm_e(i,r,e))]}
        * {c_tpm_(i,r) + SUM(e,GHG,
            [1 - IMPUTE3(i,e,r)] * c_tpm_e(i,r,e))};

EQUATION E_tgm
# percentage change in the power of all taxes on Govt pur. of imp. goods#
(all,i,TRAD_COMM)(all,r,REG)
    tgm(i,r)
        = {100 / [1 + L_tgm_(i,r) + SUM(e,GHG,L_tgm_e(i,r,e))]}
        * {c_tgm_(i,r) + SUM(e,GHG,
            [1 - IMPUTE3(i,e,r)] * c_tgm_e(i,r,e))};

EQUATION E_tfm_NTB
# percentage change in the power of all taxes on NTB pur.of imp. goods#
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)
    tfm(i,j,r)
        = {100 / [1 + L_tfm_(i,j,r)
            + SUM(e,GHG,[1 - IMPUTE1(i,j,e,r)] * L_tfm_e(i,j,r,e))]}
        * {c_tfm_(i,j,r)
            + SUM(e,GHG,[1 - IMPUTE1(i,j,e,r)] * c_tfm_e(i,j,r,e))};

EQUATION E_tfm_TB
# percentage change in the power of all taxes on TB pur.of imp. goods#
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)
    ID01[SUM(t,TECH,VITA(i,t,j,r))] * tfm(i,j,r)
        = SUM(t,TECH,VITA(i,t,j,r) * tfm_tech(i,t,j,r))
        + IF(TECH_FLAG(i,j,r)=0,
            {100 / [1 + L_tfm_(i,j,r)]} * c_tfm_(i,j,r));

!Taxes on purchases of Technologies of TB industries !
EQUATION E_tfm_tech
# percentage change in the power of all taxes on firm's pur.of dom goods #
(all,i,TRAD_COMM)(all,k,TECH)(all,j,TECH_IND)(all,r,REG)
    tfm_tech(i,k,j,r)
        = {100 / [1 + L_tfm_tech_(i,k,j,r)
            + SUM(e,GHG,
                [1 - IMPUTE1(i,j,e,r)] * L_tfm_tech_e(i,k,j,r,e))]}
        * {c_tfm_tech_(i,k,j,r)
            + SUM(e,GHG,
                [1 - IMPUTE1(i,j,e,r)] * c_tfm_tech_e(i,k,j,r,e))};

! emissions accounting !

EQUATION E_p_emis_end
(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)(all,e,GHG)
    p_emis_end(i,j,r,e) = efe(i,j,r,e);

EQUATION E_p_emis_int1
(all,i,TRAD_COMM)(all,j,NTECH_IND)(all,r,REG)(all,e,GHG)
    ID01(EMIS_INT(i,j,r,e)) * p_emis_int(i,j,r,e)
        = EMIS_MINT(i,j,r,e) * efm(i,j,r,e)
        + EMIS_DINT(i,j,r,e) * efd(i,j,r,e);

EQUATION E_p_emis_int2
(all,i,TRAD_COMM)(all,j,TECH_IND)(all,r,REG)(all,e,GHG)
    ID01(EMIS_INT(i,j,r,e)) * p_emis_int(i,j,r,e)
        = SUM[t,TECH,
            EMIS_MINT_TB(i,t,j,r,e) * efm_tech(i,t,j,r,e)
          + EMIS_DINT_TB(i,t,j,r,e) * efd_tech(i,t,j,r,e)];

EQUATION E_p_emis_priv
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    ID01(EMIS_PRIV(i,r,e)) * p_emis_priv(i,r,e)
        = EMIS_MPRIV(i,r,e) * epm(i,r,e) + EMIS_DPRIV(i,r,e) * epd(i,r,e);

EQUATION E_p_emis_gov
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    ID01(EMIS_GOV(i,r,e)) * p_emis_gov(i,r,e)
        = EMIS_MGOV(i,r,e) * egm(i,r,e) + EMIS_DGOV(i,r,e) * egd(i,r,e);

! Industry emissions !

Formula (Initial) ! Input factor !
(all,e,GHG)(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    L_ALL_EMIS(e,i,j,r) = EMIS_END(i,j,r,e);

Formula (Initial)
(all,e,GHG)(all,i,ENDW_COMM)(all,r,REG)
    L_ALL_EMIS(e,i,"lucf",r) = 0;

Formula (Initial) ! Combustion !
(all,e,GHG)(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    L_ALL_EMIS(e,i,j,r) = EMIS_INT(i,j,r,e);

Formula (Initial) ! Output !
(all,e,GHG)(all,j,PROD_COMM)(all,r,REG)
    L_ALL_EMIS(e,"process",j,r) = EMIS_OUTIND_(j,r,e);

Formula (Initial)
(all,e,GHG)(all,i,TRAD_COMM)(all,r,REG)
    L_ALL_EMIS(e,i,"lucf",r) = 0;

Formula (Initial)
(all,r,REG)
    L_ALL_EMIS("CO2","process","lucf",r) = EMIS_LUCF(r);

Formula (Initial)
(all,e,GHG_NCO2)(all,r,REG)
    L_ALL_EMIS(e,"process","lucf",r) = 0;

! emissions from private and public consumptions !

Formula (Initial)
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_ALL_EMIS(e,i,"private",r) = emis_priv(i,r,e);

Formula (Initial)
(all,i,ENDW_COMM)(all,r,REG)(all,e,GHG)
    L_ALL_EMIS(e,i,"private",r) = 0;

Formula (Initial)
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    L_ALL_EMIS(e,i,"public",r) = emis_gov(i,r,e);

Formula (Initial)
(all,e,GHG)(all,i,ENDW_COMM)(all,r,REG)
    L_ALL_EMIS(e,i,"public",r) = 0;

Formula (Initial)
(all,e,GHG)(all,r,REG)
    L_ALL_EMIS(e,"process","private",r) = 0;

Formula (Initial)
(all,e,GHG)(all,r,REG)
    L_ALL_EMIS(e,"process","public",r) = 0;

Formula (Initial)(all,r,REG) (all,e,GHG)
ETOT(r,e) = SUM[i,EMIS_SOURCE,SUM[j,EMIS_OUTLET,L_ALL_EMIS(e,i,j,r)]];
Formula (Initial)(all,r,REG) (all,e,GHG)
ENET(r,e) = ETOT(r,e) - IF[e in CO2, SUM(m,NEMT,NEMS(m,r))];

FORMULA (all,e,GHG)(all,i,EMIS_SOURCE)(all,j,NLUCF_OUTLET)(all,r,REG)
    NAT_ALL_EMIS(e,i,j,r) = L_ALL_EMIS(e,i,j,r)*
(IF[e="CO2", 1]+IF[e="N2O", 0.003225807]+IF[e="CH4", 0.047619048]+
IF[e="FGAS", 1]);


FORMULA (all,e,GHG)(all,i,INPUT_SOURCE)(all,r,REG)
    NAT_ALL_EMIS(e,i,"lucf",r) = 0;

FORMULA (all,r,REG)
    NAT_ALL_EMIS("co2","process","LUCF",r) = EMIS_LUCF(r);

FORMULA (all,e,GHG_NCO2)(all,r,REG)
    NAT_ALL_EMIS(e,"process","LUCF",r) = L_ALL_EMIS(e,"process","LUCF",r)*
(IF[e="N2O", 0.003225807]+IF[e="CH4", 0.047619048]+IF[e="FGAS", 1]);

! Industry emissions !

EQUATION E_p_ALL_EMIS0 ! Input factor !
(all,e,GHG)(all,i,ENDW_COMM)(all,j,PROD_COMM)(all,r,REG)
    p_ALL_EMIS(e,i,j,r) = p_EMIS_END(i,j,r,e);

EQUATION E_p_ALL_EMIS1
(all,e,GHG)(all,i,ENDW_COMM)(all,r,REG)
    p_ALL_EMIS(e,i,"lucf",r) = 0;

EQUATION E_p_ALL_EMIS2 ! Combustion !
(all,e,GHG)(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,r,REG)
    p_ALL_EMIS(e,i,j,r) = p_EMIS_INT(i,j,r,e);

EQUATION E_p_ALL_EMIS3 ! Output !
(all,e,GHG)(all,j,PROD_COMM)(all,r,REG)
    p_ALL_EMIS(e,"process",j,r) = eo(j,r,e);

EQUATION E_p_ALL_EMIS4
(all,e,GHG)(all,i,TRAD_COMM)(all,r,REG)
    p_ALL_EMIS(e,i,"lucf",r) = 0;

EQUATION E_p_ALL_EMIS5
(all,r,REG)
    p_ALL_EMIS("CO2","process","lucf",r)
        = 100 / L_ALL_EMIS("CO2","process","lucf",r) * ch_EMIS_LUCF(r);

EQUATION E_p_ALL_EMIS6
(all,e,GHG_NCO2)(all,r,REG)
    p_ALL_EMIS(e,"process","lucf",r) = 0;

! emissions from private and public consumptions !

EQUATION E_p_ALL_EMIS7
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    p_ALL_EMIS(e,i,"private",r) = p_emis_priv(i,r,e);

EQUATION E_p_ALL_EMIS8
(all,i,ENDW_COMM)(all,r,REG)(all,e,GHG)
    p_ALL_EMIS(e,i,"private",r) = 0;

EQUATION E_p_ALL_EMIS9
(all,i,TRAD_COMM)(all,r,REG)(all,e,GHG)
    p_ALL_EMIS(e,i,"public",r) = p_emis_gov(i,r,e);

EQUATION E_p_ALL_EMIS10
(all,e,GHG)(all,i,ENDW_COMM)(all,r,REG)
    p_ALL_EMIS(e,i,"public",r) = 0;

EQUATION E_p_ALL_EMIS11
(all,e,GHG)(all,r,REG)
    p_ALL_EMIS(e,"process","private",r) = 0;

EQUATION E_p_ALL_EMIS12
(all,e,GHG)(all,r,REG)
    p_ALL_EMIS(e,"process","public",r) = 0;

VARIABLE (change) (all,e,GHG)(all,r,REG)
    c_L_EMIS_E(e,r)
# emissions by electricity sector #;

EQUATION E_c_L_EMIS_E
(all,e,GHG)(all,r,REG)
    c_L_EMIS_E(e,r)
        = SUM(i,EMIS_SOURCE,
            0.01 * L_ALL_EMIS(e,i,"ely",r) * p_ALL_EMIS(e,i,"ely",r));

VARIABLE (change) (all,r,REG)
    c_L_EMIS_E_CO2e(r)
# total emissions by eletricity sector, in CO2e #;

EQUATION E_c_L_EMIS_E_CO2e
(all,r,REG)
    c_L_EMIS_E_CO2e(r) = SUM(e,GHG,c_L_EMIS_E(e,r));

EQUATION E_c_L_EMIS_G_GHG
(all,e,GHG)
    c_L_EMIS_G_GHG(e)
        = SUM(i,EMIS_SOURCE, SUM(j,EMIS_OUTLET, SUM(r,REG,
            0.01 * L_ALL_EMIS(e,i,j,r) * p_ALL_EMIS(e,i,j,r))));

EQUATION E_c_L_EMIS_G_CO2e
    c_L_EMIS_G_CO2e
        = SUM(e,GHG,c_L_EMIS_G_GHG(e));

! energy accounting !
! Assign the values of TQE?. KJH 20191213 !
Formula (Initial)(all,i,NNGS)(all,r,REG)
TQE1(i,r) = SUM(j,PROD_COMM,EDF(i,j,r))
                + EDP(i,r) + EDG(i,r) + SUM(n,REG,EXI(i,r,n));

Formula (Initial)(all,r,REG)
TQE1("gas",r) = SUM(i,GAS,
            SUM(j,PROD_COMM,EDF(i,j,r))
          + EDP(i,r) + EDG(i,r) + SUM(n,REG,EXI(i,r,n)));

Formula (Initial)(all,r,REG)
TQE1("nuclear",r) = 0.260559089*TQNT("t4","ely",r);
!             Value ^^^^^^^^^^^ derived from gtem-c-atrees-20181111 database.
  KJH 20191213 !

Formula (Initial)(all,r,REG)
TQE1("renewables",r) = SUM(t, REN_ELY, TQNT(t,"ely",r)/11.63)/0.3;

Formula (Initial)(all,i,NNGS)(all,j,PROD_COMM)(all,r,REG)
TQE2(i,j,r) = EDF(i,j,r) + EIF(i,j,r);

Formula (Initial)(all,i,NNGS)(all,r,REG)
TQE2(i,"private",r) = EDP(i,r) + EIP(i,r);

Formula (Initial)(all,i,NNGS)(all,r,REG)
TQE2(i,"public",r) = EDG(i,r) + EIG(i,r);

Formula (Initial)(all,j,PROD_COMM)(all,r,REG)
TQE2("gas",j,r) = SUM(i,GAS, EDF(i,j,r) + EIF(i,j,r));

Formula (Initial)(all,r,REG)
TQE2("gas","private",r)= SUM(i,GAS, EDP(i,r) + EIP(i,r));

Formula (Initial)(all,r,REG)
TQE2("gas","public",r) = SUM(i,GAS, EDG(i,r) + EIG(i,r));

Formula (Initial)(all,i,ENERGY)(all,r,REG) TQE3(i,r) = SUM(j,USE,TQE2(i,j,r));

EQUATION E_qec1_1
(all,i,NNGS)(all,r,REG)
    ID01[TQE1(i,r)] * qec1(i,r)
        = IF(TQE1(i,r) > TINY,
            SUM(j,PROD_COMM,EDF(i,j,r) * qfd(i,j,r))
                + EDP(i,r) * qpd(i,r)
                + EDG(i,r) * qgd(i,r)
                + SUM(n,REG,EXI(i,r,n) * qxs(i,r,n)));

EQUATION E_qec1_2
(all,r,REG)
    ID01[TQE1("gas",r)] * qec1("gas",r)
        = IF(TQE1("gas",r) > TINY,SUM(i,GAS,
            SUM(j,PROD_COMM,EDF(i,j,r) * qfd(i,j,r))
          + EDP(i,r) * qpd(i,r)
          + EDG(i,r) * qgd(i,r)
          + SUM(n,REG,EXI(i,r,n) * qxs(i,r,n))));

EQUATION E_qec1_3
(all,r,REG)
    qec1("nuclear",r)
        = IF(TQE1("nuclear",r) > TINY, qtech("t4","ely",r));

EQUATION E_qec1_4
(all,r,REG)
    ID01[TQE1("renewables",r)] * 0.30 * qec1("renewables",r)
        = IF(TQE1("renewables",r) > TINY, SUM(t, REN_ELY,
            TQNT(t,"ely",r) / 11.63 * qtech(t,"ely",r)));

EQUATION E_qec2_NNGS_1
(all,i,NNGS)(all,j,PROD_COMM)(all,r,REG)
    ID01[TQE2(i,j,r)] * qec2(i,j,r)
        = IF(TQE2(i,j,r) > TINY,
            EDF(i,j,r) * qfd(i,j,r)
          + EIF(i,j,r) * qfm(i,j,r));

EQUATION E_qec2_NNGS_2
(all,i,NNGS)(all,r,REG)
    ID01[TQE2(i,"private",r)] * qec2(i,"private",r)
        = IF(TQE2(i,"private",r) > TINY,
            EDP(i,r) * qpd(i,r)
          + EIP(i,r) * qpm(i,r));

EQUATION E_qec2_NNGS_3
(all,i,NNGS)(all,r,REG)
    ID01[TQE2(i,"public",r)] * qec2(i,"public",r)
        = IF(TQE2(i,"public",r) > TINY,
            EDG(i,r) * qgd(i,r)
          + EIG(i,r) * qgm(i,r));

EQUATION E_qec2_NGS_1
(all,j,PROD_COMM)(all,r,REG)
    ID01[TQE2("gas",j,r)] * qec2("gas",j,r)
        = IF(TQE2("gas",j,r) > TINY,SUM(i,GAS,
            EDF(i,j,r) * qfd(i,j,r)
          + EIF(i,j,r) * qfm(i,j,r)));

EQUATION E_qec2_NGS_2
(all,r,REG)
    ID01[TQE2("gas","private",r)] * qec2("gas","private",r)
        = IF(TQE2("gas","private",r) > TINY,SUM(i,GAS,
            EDP(i,r) * qpd(i,r)
          + EIP(i,r) * qpm(i,r)));

EQUATION E_qec2_NGS_3
(all,r,REG)
    ID01[TQE2("gas","public",r)] * qec2("gas","public",r)
        = IF(TQE2("gas","public",r) > TINY,SUM(i,GAS,
            EDG(i,r) * qgd(i,r)
          + EIG(i,r) * qgm(i,r)));

EQUATION E_qec3
(all,i,ENERGY)(all,r,REG)
    ID01[TQE3(i,r)] * qec3(i,r) = SUM(j,USE,TQE2(i,j,r) * qec2(i,j,r));

![[! Removed. Not used. KJH 20191213
! Global IO tables !

EQUATION E_qgio (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    qgio(i,j,s,n) = 0;

EQUATION E_eimp
(all,i,TRAD_COMM)(all,n,REG)
    eimp(i,n) = 0;

EQUATION E_eio (all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)
    eio(i,j,s,n) = 0;

EQUATION E_ghgio
(all,i,TRAD_COMM)(all,j,USE)(all,s,REG)(all,n,REG)(all,e,GHG)
    ghgio(i,j,s,n,e) = 0;
!]]!
![[!
EQUATION E_qgio_1
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,s,REG)(all,n,REG)
    ID01[GLOB_IO(i,j,s,n)] * qgio(i,j,s,n)
        = IF(GLOB_IO(i,j,s,n) > TINY,
            IF(MAT_REG(s,n) = 1, QDFM(i,j,s) * qfd(i,j,s))
                + QIFM(i,j,n) * Q_NORM(i,s,n)
                    * [qfm(i,j,n) !+ qxs(i,s,n) - qimp(i,n)!]);

EQUATION E_qgio_2
(all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    ID01[GLOB_IO(i,"private",s,n)] * qgio(i,"private",s,n)
        = IF(GLOB_IO(i,"private",s,n) > TINY,
            IF(MAT_REG(s,n) = 1, QDPM(i,s) * qpd(i,s))
                + QIPM(i,n) * Q_NORM(i,s,n)
                    * [qpm(i,n) !+ qxs(i,s,n) - qimp(i,n)!]);

EQUATION E_qgio_3
(all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    ID01[GLOB_IO(i,"public",s,n)] * qgio(i,"public",s,n)
        = IF(GLOB_IO(i,"public",s,n) > TINY,
            IF(MAT_REG(s,n) = 1, QDGM(i,s) * qgd(i,s))
                + QIGM(i,n) * Q_NORM(i,s,n)
                    * [qgm(i,n) !+ qxs(i,s,n) - qimp(i,n)!]);

EQUATION E_eimp
(all,i,TRAD_COMM)(all,n,REG)
    ID01[ETIM(i,n)] * eimp(i,n)
        = IF(ETIM(i,n) > TINY,
            SUM(k,PROD_COMM,EIF(i,k,n) * qfm(i,k,n))
                + EIG(i,n) * qgm(i,n) + EIP(i,n) *qpm(i,n));

EQUATION E_eio_1
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,s,REG)(all,n,REG)
    ID01[ENER_IO(i,j,s,n)] * eio(i,j,s,n)
        = IF(ENER_IO(i,j,s,n) > TINY,
            IF(MAT_REG(s,n) = 1, EDF(i,j,s) * qfd(i,j,s))
                + EIF(i,j,n) * ENER_NORM(i,s,n)
                    * [qfm(i,j,n) !+ qxs(i,s,n) - eimp(i,n)!]);

EQUATION E_eio_2
(all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    ID01[ENER_IO(i,"private",s,n)] * eio(i,"private",s,n)
        = IF(ENER_IO(i,"private",s,n) > TINY,
            IF(MAT_REG(s,n) = 1, EDP(i,s) * qpd(i,s))
                + EIP(i,n) * ENER_NORM(i,s,n)
                    * [qpm(i,n) !+ qxs(i,s,n) - eimp(i,n)!]);

EQUATION E_eio_3
(all,i,TRAD_COMM)(all,s,REG)(all,n,REG)
    ID01[ENER_IO(i,"public",s,n)] * eio(i,"public",s,n)
        = IF(ENER_IO(i,"public",s,n) > TINY,
            IF(MAT_REG(s,n) = 1, EDG(i,s) * qgd(i,s))
                + EIG(i,n) * ENER_NORM(i,s,n)
                    * [qgm(i,n) !+ qxs(i,s,n) - eimp(i,n)!]);

EQUATION E_ghgio_1
(all,i,TRAD_COMM)(all,j,PROD_COMM)(all,s,REG)(all,n,REG)(all,e,GHG)
    ID01[GHG_IO(i,j,s,n,e)] * ghgio(i,j,s,n,e)
       = IF(GHG_IO(i,j,s,n,e) > TINY,
            IF(MAT_REG(s,n) = 1, EMIS_DINT(i,j,n,e) * efd(i,j,n,e))
                + EMIS_MINT(i,j,n,e) * GHG_NORM(i,s,n)
                    * [efm(i,j,n,e) !+ qxs(i,s,n) - qiw(i,n)!]);

EQUATION E_ghgio_2
(all,i,TRAD_COMM)(all,s,REG)(all,n,REG)(all,e,GHG)
    ID01[GHG_IO(i,"private",s,n,e)] * ghgio(i,"private",s,n,e)
       = IF(GHG_IO(i,"private",s,n,e) > TINY,
            IF(MAT_REG(s,n) = 1, EMIS_DPRIV(i,n,e) * epd(i,n,e))
                + EMIS_MPRIV(i,n,e) * GHG_NORM(i,s,n)
                    * [epm(i,n,e) !+ qxs(i,s,n) - qiw(i,n)!]);

EQUATION E_ghgio_3
(all,i,TRAD_COMM)(all,s,REG)(all,n,REG)(all,e,GHG)
    ID01[GHG_IO(i,"public",s,n,e)] * ghgio(i,"public",s,n,e)
       = IF(GHG_IO(i,"public",s,n,e) > TINY,
            IF(MAT_REG(s,n) = 1, EMIS_DGOV(i,n,e) * egd(i,n,e))
                + EMIS_MGOV(i,n,e) * GHG_NORM(i,s,n)
                    * [egm(i,n,e) !+ qxs(i,s,n) - qiw(i,n)!]);
!]]!

! climate damage !

COEFFICIENT (all,r,REG)
    DAMAGE(r)
# regional climate damage, negative shock to factor productivity #;

READ DAMAGE from file CLIMATE_file header "DMG";

UPDATE (all,r,REG)
    DAMAGE(r) = dmg_clim(r);

VARIABLE (change) (all,r,REG)
    c_REGTEMP(r)
# regional inter-annual temperature change #;

COEFFICIENT (all,r,REG)
    REGTEMP(r)
# regional temperature change from base year #;

READ REGTEMP from file CLIMATE_file header "REGT";

UPDATE (change) (all,r,REG)
    REGTEMP(r) = c_REGTEMP(r);

COEFFICIENT (PARAMETER) (all,r,REG)
    THETA1(r)
# parameter 1 of the damage function as per Bosello and Roson (2007) #;

COEFFICIENT (PARAMETER) (all,r,REG)
    THETA2(r)
# parameter 2 of the damage function as per Bosello and Roson (2007) #;

READ THETA1 from file CLIMATE_file header "THT1";
READ THETA2 from file CLIMATE_file header "THT2";

VARIABLE (all,r,REG)
    dmg_on(r)
# parameter to turn the damage function on #;

EQUATION E_ava_climate  (all,r,REG)
    DAMAGE(r) / 100 * dmg_clim(r)
        = THETA1(r) * c_REGTEMP(r)
        + 2 * THETA2(r) * REGTEMP(r) * c_REGTEMP(r)
        + dmg_on(r);

! negative emission technologies !

VARIABLE
    (all,m,NEMT)(all,r,REG) GR_NEMS(m,r)
# growth of negative emissions technologies #;
    (all,m,NEMT) f_GR_NEMS_W(m)
# global shift in growth of negative emissions technologies #;
    (all,m,NEMT)(all,r,REG) f_GR_NEMS(m,r)
# regional shift in growth of negative emissions technologies #;

EQUATION E_GR_NEMS
(all,m,NEMT)(all,r,REG)
    GR_NEMS(m,r) = f_GR_NEMS_W(m) + f_GR_NEMS(m,r);

VARIABLE
    (all,m,NEMT)(all,r,REG) AV_NEMS(m,r)
# factor input efficiency of negative emissions technologies #;
    (all,m,NEMT) f_AV_NEMS_W(m)
# global shift in factor input efficiency of negative emissions technologies #;
    (all,m,NEMT)(all,r,REG) f_AV_NEMS(m,r)
# regional shift in factor input efficiency of negative emissions technologies #;

EQUATION E_AV_NEMS
(all,m,NEMT)(all,r,REG)
    AV_NEMS(m,r) = f_AV_NEMS_W(m) + f_AV_NEMS(m,r);

VARIABLE
    (all,m,NEMT)(all,r,REG) AF_NEMS(m,r)
# intermediate input efficiency of negative emissions technologies #;
    (all,m,NEMT) f_AF_NEMS_W(m)
# global shift in intermediate input efficiency of negative emissions technologies #;
    (all,m,NEMT)(all,r,REG) f_AF_NEMS(m,r)
# regional shift in intermediate input efficiency of negative emissions technologies #;

VARIABLE (all,m,NEMT)(all,r,REG)
    adopt_NEMS(m,r)
# adopt_NEMS exog. f_adopt_NEMS endog. when NEMT are forced #;

EQUATION E_AF_NEMS
(all,m,NEMT)(all,r,REG)
    AF_NEMS(m,r) = f_AF_NEMS_W(m) + f_AF_NEMS(m,r);

EQUATION E_p_NEMS
(all,m,NEMT)(all,r,REG)
    p_NEMS(m,r) = f_p_NEMS(m,r) + GR_NEMS(m,r) + adopt_NEMS(m,r);

EQUATION E_q_VOAT
(all,m,NEMT)(all,r,REG)
    q_VOAT(m,r) = p_NEMS(m,r);

EQUATION E_p_VOAT
(all,m,NEMT)(all,r,REG)
    ID01[SUM(i,ENDW_COMM,EVAA(i,m,r))
        + SUM(i,TRAD_COMM,VDAA(i,m,r))
        + SUM(i,TRAD_COMM,VIAA(i,m,r))] * [p_VOAT(m,r) + q_VOAT(m,r)]
            = SUM(i,ENDW_COMM,EVAA(i,m,r) * [pm(i,r) + q_EVA(i,m,r)])
                + SUM(i,TRAD_COMM,VDAA(i,m,r) * [pm(i,r) + q_VDA(i,m,r)])
                + SUM(i,TRAD_COMM,VIAA(i,m,r) * [pimp(i,r) + q_VIA(i,m,r)]);

VARIABLE (default=levels);

! Introduce variables for the average input efficiency across part of the cost
  range for each NEMT, and the marginal input efficiencies. KJH 03Nov2018 !
VARIABLE (LINEAR_NAME=af_EVAave)(all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    L_af_EVAave(i,m,r)
# % average input efficiency change of EVAM & EVAA #;

VARIABLE (LINEAR_NAME=af_VDAave)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VDAave(i,m,r)
# % average input efficiency change of VDAM & VDAA #;

VARIABLE (LINEAR_NAME=af_VIAave)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VIAave(i,m,r)
# % average input efficiency change of VIAM & VIAA #;

VARIABLE (LINEAR_NAME=af_EVAmarg)(all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    L_af_EVAmarg(i,m,r)
# % marginal input efficiency change of EVAM & EVAA #;

VARIABLE (LINEAR_NAME=af_VDAmarg)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VDAmarg(i,m,r)
# % marginal input efficiency change of VDAM & VDAA #;

VARIABLE (LINEAR_NAME=af_VIAmarg)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VIAmarg(i,m,r)
# % marginal input efficiency change of VIAM & VIAA #;

COEFFICIENT (PARAMETER)(all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    alpha_EVA(i,m,r)
# Parameter linking level of NEMS to average input efficiency, endowments #;

COEFFICIENT (PARAMETER)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    alpha_VDA(i,m,r)
# Parameter linking level of NEMS to average input efficiency, domestic inter. #;

COEFFICIENT (PARAMETER)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    alpha_VIA(i,m,r)
# Parameter linking level of NEMS to average input efficiency, imported inter. #;

! Default alpha assume that the maximum unit cost of a technology is twice the
  minimum. KJH 04Nov2018 !

FORMULA (INITIAL)(all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    alpha_EVA(i,m,r) = loge(2);

FORMULA (INITIAL)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    alpha_VDA(i,m,r) = loge(2);

FORMULA (INITIAL)(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    alpha_VIA(i,m,r) = loge(2);

READ (IfHeaderExists) alpha_EVA from file PARAM_file header "AEVA";
READ (IfHeaderExists) alpha_VDA from file PARAM_file header "AVDA";
READ (IfHeaderExists) alpha_VIA from file PARAM_file header "AVIA";

! Introduce an upper bound for negative emissions from each technology and the
  proportion of this upper bound reached. KJH 03Nov2018 !

COEFFICIENT (PARAMETER)(all,m,NEMT)(all,r,REG)
    NEMS_MAX(m,r)
# maximum sequestration of each negative emission technology, mil. tons of CO2-e #;

READ NEMS_MAX from file SAM_file header "NMMX";

VARIABLE (all,m,NEMT)(all,r,REG)
    NEMS_PROP(m,r)
# proportion of maximum sequestration of each negative emission technology #;

FORMULA & EQUATION E_p_NEMS_PROP (all,m,NEMT)(all,r,REG)
    NEMS_PROP(m,r) = NEMS(m,r)/NEMS_MAX(m,r);

VARIABLE (default=linear);

EQUATION E_q_EVA
(all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    q_EVA(i,m,r)
        = q_VOAT(m,r) - af_EVA(i,m,r) - af_EVAave(i,m,r) - AV_NEMS(m,r);

EQUATION E_q_VDA
(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    q_VDA(i,m,r)
        = q_VOAT(m,r) - af_VDA(i,m,r) - af_VDAave(i,m,r) - AF_NEMS(m,r);

EQUATION E_q_VIA
(all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    q_VIA(i,m,r)
        = q_VOAT(m,r) - af_VIA(i,m,r) - af_VIAave(i,m,r) - AF_NEMS(m,r);

! Introduce equations that calculate the average input efficiencies from the
  level of NEMS as a proportion of its upper bound. KJH 03Nov2018 !

FORMULA & EQUATION E_af_EVAave (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    L_af_EVAave(i,m,r) =
    IF[alpha_EVA(i,m,r)>0, alpha_EVA(i,m,r)*NEMS_PROP(m,r)
                          /(exp{alpha_EVA(i,m,r)*NEMS_PROP(m,r)} - 1)] +
    IF[alpha_EVA(i,m,r)<=0, 1 ];

FORMULA & EQUATION E_af_VDAave (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VDAave(i,m,r) =
    IF[alpha_VDA(i,m,r)>0, alpha_VDA(i,m,r)*NEMS_PROP(m,r)
                          /(exp{alpha_VDA(i,m,r)*NEMS_PROP(m,r)} - 1)] +
    IF[alpha_VDA(i,m,r)<=0, 1 ];

FORMULA & EQUATION E_af_VIAave (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VIAave(i,m,r) =
    IF[alpha_VIA(i,m,r)>0, alpha_VIA(i,m,r)*NEMS_PROP(m,r)
                          /(exp{alpha_VIA(i,m,r)*NEMS_PROP(m,r)} - 1)] +
    IF[alpha_VIA(i,m,r)<=0, 1 ];

! Introduce equations that calculate the marginal input efficiencies from the
  level of NEMS as a proportion of its upper bound. KJH 03Nov2018 !

FORMULA & EQUATION E_af_EVAmarg (all,i,ENDW_COMM)(all,m,NEMT)(all,r,REG)
    L_af_EVAmarg(i,m,r) = exp{-alpha_EVA(i,m,r)*NEMS_PROP(m,r)};

FORMULA & EQUATION E_af_VDAmarg (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VDAmarg(i,m,r) = exp{-alpha_VDA(i,m,r)*NEMS_PROP(m,r)};

FORMULA & EQUATION E_af_VIAmarg (all,i,TRAD_COMM)(all,m,NEMT)(all,r,REG)
    L_af_VIAmarg(i,m,r) = exp{-alpha_VIA(i,m,r)*NEMS_PROP(m,r)};

Backsolve p_NEMS_PROP using E_p_NEMS_PROP;
Backsolve af_EVAave using E_af_EVAave;
Backsolve af_VDAave using E_af_VDAave;
Backsolve af_VIAave using E_af_VIAave;
Backsolve af_EVAmarg using E_af_EVAmarg;
Backsolve af_VDAmarg using E_af_VDAmarg;
Backsolve af_VIAmarg using E_af_VIAmarg;

! Define real marginal price variable RPNEMmarg which is compared with L_ECTAX
  to determine the adoption of each NEMT. KJH 03Nov2018 !
VARIABLE (LEVELS)(all,m,NEMT)(all,r,REG)
    RPNEMmarg(m,r)
# real marginal price of the negative emission technologies #;

FORMULA (INITIAL)(all,m,NEMT)(all,r,REG)
    RPNEMmarg(m,r) = PNEM(m,r)/L_CPI(r);

READ (IfHeaderExists) RPNEMmarg from file SAM_file header "RPNM";

EQUATION E_p_RPNEMmarg
(all,m,NEMT)(all,r,REG)
    ID01[SUM(i,ENDW_COMM,EVAA(i,m,r)*L_af_EVAave(i,m,r)/L_af_EVAmarg(i,m,r))
        + SUM(i,TRAD_COMM,VDAA(i,m,r)*L_af_VDAave(i,m,r)/L_af_VDAmarg(i,m,r))
        + SUM(i,TRAD_COMM,VIAA(i,m,r)*L_af_VIAave(i,m,r)/L_af_VIAmarg(i,m,r))]
     * [p_RPNEMmarg(m,r) + cpi(r) + q_VOAT(m,r)]
   = SUM(i,ENDW_COMM,EVAA(i,m,r)*L_af_EVAave(i,m,r)/L_af_EVAmarg(i,m,r)
                     * [pm(i,r) + q_EVA(i,m,r) + af_EVAave(i,m,r) - af_EVAmarg(i,m,r)])
   + SUM(i,TRAD_COMM,VDAA(i,m,r)*L_af_VDAave(i,m,r)/L_af_VDAmarg(i,m,r)
                     * [pm(i,r) + q_VDA(i,m,r) + af_VDAave(i,m,r) - af_VDAmarg(i,m,r)])
   + SUM(i,TRAD_COMM,VIAA(i,m,r)*L_af_VIAave(i,m,r)/L_af_VIAmarg(i,m,r)
                     * [pimp(i,r) + q_VIA(i,m,r) + af_VIAave(i,m,r) - af_VIAmarg(i,m,r)]);

Backsolve p_RPNEMmarg using E_p_RPNEMmarg;

! Theory of adoption of negative emission technologies. !
! ===================================================== !

! Each negative emission technology has many instances spanning a range of unit
  costs. The range of unit costs are determined by differing technical
  efficiencies in the use of inputs. The range of the technical efficiencies
  can differ across inputs. They are assumed to be decreasing exponential
  functions of the proportion of all instances of the technology currently
  implemented. An instance of a negative emission technology will
  be implemented when the carbon price equals or exceeds the unit cost of that
  instance, ie. when the marginal cost of the negative emission technology
  equals the carbon price. The modelled activity representing a negative
  emission technology has technical efficiencies of its inputs equal to an
  average across all currently implemented instances (plus exogenous shifts in
  efficiencies). KJH 04Nov2018
!

VARIABLE (CHANGE)(all,m,NEMT)(all,r,REG)
    f_adopt_NEMS(m,r)
# f_adopt_NEMS exog. adopt_NEMS endog. to implement NEMT adoption theory #;

EQUATION E_f_adopt_NEMS (all,m,NEMT)(all,r,REG)
    f_adopt_NEMS(m,r) =
    IF[RPNEMmarg(m,r)<1000*L_ECTAX(r,"CO2") and NEMS_PROP(m,r)<1,
      (RPNEMmarg(m,r) - 1000*L_ECTAX(r,"CO2"))*time] +
    2*p_NEMS(m,r);
!   ^  Assumed hard-wired responsive of NEMT to the difference between the
       real carbon price and real marginal price of the technology. KJH 08Nov2018 !

